!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.xutils=t():e.xutils=t()}(this,(()=>(()=>{"use strict";var e={713:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var s=Object.getOwnPropertyDescriptor(t,r);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,s)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),s=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),s(r(377),t)},448:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ElapsedTime=void 0;const n=r(925),s=r(782);t.ElapsedTime=class{constructor(){this.start_time=new Date,this.stop_time=void 0,this._ms=void 0}start(){const e=new Date;return this.start_time=(0,n._isDate)(this.start_time)?this.start_time:e,this.stop_time=void 0,this._ms=void 0,this}now(e=!1){const t=new Date,r=(0,n._isDate)(this.start_time)?this.start_time:this.start_time=t;return this._ms=t.getTime()-r.getTime(),e&&(this.start_time=t),this}stop(){const e=new Date,t=((0,n._isDate)(this.start_time)?this.start_time:e).getTime(),r=this.stop_time,s=(0,n._isDate)(r)&&r.getTime()>=t?r:this.stop_time=e;return this._ms=s.getTime()-t,this}started(){return(0,n._isDate)(this.start_time)}stopped(){return(0,n._isDate)(this.stop_time)}ms(){return parseInt(this._ms)}sec(e=3){return(0,s._round)(this.ms()/1e3,e)}min(e=3){return(0,s._round)(this.ms()/6e4,e)}data(){return this.stop(),{start_time:(0,n._isDate)(this.start_time)?this.start_time:void 0,stop_time:(0,n._isDate)(this.stop_time)?this.stop_time:void 0,elapsed_ms:this.ms()}}}},586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._batchValues=void 0,t._batchValues=(e,t)=>{if(!(Number.isInteger(t)&&t>0))throw new Error("Invalid batch size.");const r=e.slice(0),n=[];for(;r.length;)n.push(r.splice(0,t));return n}},925:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._timestamp=t._datetime=t._getDate=t._isDate=void 0,t._isDate=e=>e instanceof Date&&!isNaN(e.getTime()),t._getDate=(e,r)=>((0,t._isDate)(e)||(0,t._isDate)(e=new Date(e))||(e=r instanceof Date?r:void 0===r?new Date:new Date(r)),e),t._datetime=(e,r)=>{const n=(0,t._getDate)(e,r),s=e=>`${e}`.padStart(2,"0");return(0,t._isDate)(n)?`${n.getFullYear()}-${s(n.getMonth()+1)}-${s(n.getDate())} ${s(n.getHours())}:${s(n.getMinutes())}:${s(n.getSeconds())}`:`${n}`},t._timestamp=(e,r)=>{const n=(0,t._getDate)(e,r);return(0,t._isDate)(n)?n.toISOString():`${n}`}},802:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._debouced=void 0,t._debouced=(e,t=200,r=0,n=!1)=>{let s,i,o,a;t=!isNaN(t=parseFloat(t))&&t>=0?t:200,r=!isNaN(r=parseFloat(r))&&r>=0&&r>t?r:0,n=!!n;const u=r=>{let u=a;a=void 0,o&&(clearTimeout(o),o=void 0),i&&!r&&(clearTimeout(i),i=void 0),(null==u?void 0:u.length)&&"function"==typeof e&&e.apply(...u),t&&n&&!r&&(s=setTimeout((()=>{clearTimeout(s),s=void 0}),t))},l=function(...e){if(a=[this,e],!t)return u();const l=(e=0)=>{clearTimeout(i),i=setTimeout((()=>u()),t),e||!r||o||(o=setTimeout((()=>u()),r))};if(!n||s||i)return l();l(1),u(1)};return Object.defineProperties(l,{length:{value:e.length},name:{value:`${e.name||"anonymous"}__debounced__${t}`}}),l}},597:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._sayHello=void 0,t._sayHello=e=>{const t=`[x] - Hello ${e=(null==e?void 0:e.length)?e:"Thuku"}!`;return console.log(t),t}},917:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._jsonClone=t._jsonParse=t._jsonStringify=void 0,t._jsonStringify=(e,t,r=null)=>{const n=null===t?void 0:t,s=[],i=["this"],o=new Map,a=function(e,t){if(null===t)return t;if(t instanceof Error&&(t={"[Error]":String(t)}),t instanceof Set&&(t={"[Set]":[...t]}),t instanceof Map&&(t={"[Map]":[...t]}),"object"==typeof t){e&&((e,t)=>{let r=s.length-1,n=s[r];if(n[e]===t||0===r)return i.push(e),void s.push(t);for(;r-- >=0;)if(n=s[r],(null==n?void 0:n[e])===t){r+=2,s.length=r,i.length=r,--r,s[r]=t,i[r]=e;break}})(e,t);const r=o.get(t);if(r)return"[Circular]"+r;o.set(t,i.join("."))}return t};try{return void 0===e&&(e=void 0!==r?r:r=null),s.push(e),JSON.stringify(e,a,n)}finally{o.clear(),s.length=0,i.length=1}},t._jsonParse=(e,t)=>{try{return JSON.parse(e)}catch(e){return t}},t._jsonClone=(e,r,n=null)=>{let s=(0,t._jsonStringify)(e,r,n);return void 0!==s&&(s=(0,t._jsonParse)(s)),s}},782:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._rand=t._commas=t._round=t._int=t._num=t._toNum=t._isNumeric=void 0,t._isNumeric=(e,t=!1,r=!1)=>{if("number"==typeof e)return!isNaN(e);if("boolean"==typeof e)return!!t;const n=String(e).trim();return""===n?!!r:/(^[+-]?[0-9]+([.][0-9]+)?([eE][+-]?[0-9]+)?$)|(^[+-]?\.[0-9]+$)|(^[+-]?[0-9]+\.$)/.test(n)},t._toNum=(e,t=NaN,r=!0)=>{let n,s,i=e;if("number"!=typeof e){if("string"==typeof e){let t=/^\s*([\+-])\s*/,r=e.match(t);r&&(e=e.replace(t,"")),(e=e.replace(/^\s*[\+-]/,"").trim()).match(/^\d{1,3}(,\d{3})*(\.|(\.\d+))?$/)&&(e=e.replace(/,/g,"").trim()),e.match(/^\d*(\.|(\.\d+))?$/)?r&&(e=r[1]+e):e="x"}i=isNaN(i=Number(e))?parseFloat(i):i}if(""===i||null===i||isNaN(i=Number(i)))return t;if(r&&new RegExp("\\.\\d*(0{3}\\d*)").test(n=String(i))&&(s=n.match(/\.(\d+)/))){let e=s[1],t=e.length,r=-1,o=-1;for(let n=t-1;n>=0;n--)if(Number(e[n])){if(o>-1){if(r=n,o-r>=5)break;o=r=-1}}else o<0&&(o=n);r>-1&&o>-1&&o-r>=5&&(i=+n.substring(0,n.length-t+o+1))}return i},t._num=(e,r=NaN)=>(0,t._toNum)(e,r),t._int=(e,r=NaN)=>parseInt(String((0,t._toNum)(e,r))),t._round=(e,r=2)=>{if(isNaN(e))return NaN;let n=Math.pow(10,Math.abs((0,t._int)(r,2)));return Math.round((e+Number.EPSILON)*n)/n},t._commas=(e,r=2,n=!1)=>{const s=(0,t._round)((0,t._num)(e),r=(0,t._int)(r,2));if(isNaN(s))return console.warn("[WARNING: `_commas`] NaN value:",e),"";let i=String(s).replace(/\B(?=(\d{3})+(?!\d))/g,",");return r&&n&&(-1===i.indexOf(".")?i+=".".padEnd(r+1,"0"):i=i.split(".").reduce(((e,t,n)=>(e.push(1===n&&t.length<r?t.padEnd(r,"0"):t),e)),[]).join(".")),i},t._rand=(e,t)=>Math.floor(Math.random()*(t-e+1))+e},962:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._hasAnyProps=t._hasProps=t._hasProp=t._flatten=void 0,t._flatten=e=>e.flat(1/0),t._hasProp=(e,t,r=!1)=>!("object"!=typeof e||!e)&&(Object.prototype.hasOwnProperty.call(e,t)||!r&&t in e),t._hasProps=(e,...r)=>!!r.length&&!r.filter((r=>!(0,t._hasProp)(e,r))).length,t._hasAnyProps=(e,...r)=>!!r.length&&!!r.filter((r=>(0,t._hasProp)(e,r))).length},16:function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(s,i){function o(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}u((n=n.apply(e,t||[])).next())}))},n=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,s){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,s,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t._sleep=t._asyncValues=t._asyncAll=void 0,t._asyncAll=(e,t)=>r(void 0,void 0,void 0,(function*(){return new Promise((n=>{const s=[],i=e.length,o=()=>n(s);if(!i)return o();let a=0;e.forEach(((e,n,u)=>{r(void 0,void 0,void 0,(function*(){return Promise.resolve(t?t(e,n,u):e)})).then((e=>s.push({status:"resolved",index:n,value:e}))).catch((e=>s.push({status:"rejected",index:n,reason:e}))).finally((()=>++a===i?o():void 0))}))}))})),t._asyncValues=e=>({values:()=>e,size:()=>e.length,each(e){var t,s,i,o;return r(this,void 0,void 0,(function*(){let r=this,a=!1,u=-1,l=()=>{a=!0};try{for(var c,_=!0,f=n(r);c=yield f.next(),!(t=c.done);_=!0){o=c.value,_=!1;const t=o;if(u++,a)break;yield e(t,u,r.size(),l)}}catch(e){s={error:e}}finally{try{_||t||!(i=f.return)||(yield i.call(f))}finally{if(s)throw s.error}}}))},[Symbol.asyncIterator](){let t=0;const n=this;return{next(){return r(this,void 0,void 0,(function*(){let r,s=n.size();return t>=s?{done:!0,value:r}:(r=yield Promise.resolve(e[t]),t++,{done:!1,value:r})}))}}}}),t._sleep=e=>r(void 0,void 0,void 0,(function*(){return e=!isNaN(e)&&e>=0?e:0,new Promise((t=>setTimeout((()=>t(e)),e)))}))},78:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._queue=void 0,t._queue=()=>{const e={};let t=0,r=0;return{get count(){return r},get length(){return r-t},get isEmpty(){return 0===this.length},enqueue(t){e[r]=t,r++},dequeue(){const r=e[t];return delete e[t],t++,r},peek:()=>e[t],values:()=>Object.values(e)}}},172:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._sortValues=void 0,t._sortValues=(e,t)=>{const r=(e,t)=>"string"==typeof e&&"string"==typeof t&&"function"==typeof(null==e?void 0:e.localeCompare)?e.localeCompare(t):e>t?1:e<t?-1:0,n=e=>{if("number"==typeof e&&[1,-1].includes(e))return e;if("string"==typeof e){if(e.startsWith("asc"))return 1;if(e.startsWith("desc"))return-1}return 1};return e.sort((()=>{if(Object(t)===t){const e=Object.entries(t);if(e.length)return(t,s)=>{let i,o;for(o=0,i=0;0===o||i<e.length;i++){const[a,u]=e[i];o=r(null==t?void 0:t[a],null==s?void 0:s[a])*n(u)}return o}}return(e,s)=>r(e,s)*n(t)})())}},301:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._camelCase=t._studlyCase=t._slugCase=t._snakeCase=t._sentenceCase=t._titleCase=t._rtrim=t._ltrim=t._trim=t._strEscape=t._regEscape=t._strNorm=t._str=t._stringable=t._string=t._uuid=void 0;const n=r(917);t._uuid=function(e){const t=()=>Math.random().toString(36).substring(2)+(new Date).getTime().toString(36);if(!(void 0!==e&&Number.isInteger(e)&&e>0&&e<=64))return t();let r="";for(;r.length<e;)r+=t();return r.substring(0,e)},t._string=(e,t="")=>{let r="";try{r=e instanceof Date&&!isNaN(e.getTime())?e.toISOString():String(e)}catch(e){r=t}return r},t._stringable=e=>{const r=`!${Date.now()}!`,n=(0,t._string)(e,r);return n!==r&&!/\[object \w+\]/.test(n)&&n},t._str=(e,r=!1,s=!1)=>{if("string"!=typeof e){if(null==e)return"";if("object"==typeof e){if(Array.isArray(e))return s?(0,n._jsonStringify)(e):"";const r=(0,t._stringable)(e);if(!1===r)return s?(0,n._jsonStringify)(e):"";e=r}else e=(0,t._string)(e)}return r?e.trim():e},t._strNorm=e=>(0,t._str)(e).normalize("NFD").replace(/[\u0300-\u036f]/g,""),t._regEscape=e=>(0,t._str)(e).replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),t._strEscape=e=>JSON.stringify((0,t._str)(e)).replace(/\\u([\d\w]{4})/g,((e,t)=>{const r=parseInt(t,16);return r>255?e:"\\"+encodeURIComponent(String.fromCharCode(r)).replace("%","x").replace("x0B","v")})).replace(/^"|"$/g,"").replace(/\\"/g,'"'),t._trim=(e,r=" \r\n\t\f\v\0",n="")=>{if(e=(0,t._str)(e),!r.length)return e;r=r.replace(/\{default\}/," \r\n\t\f\v\0");let s=0,i=0,o=[...new Set([...r])].filter((e=>"-"===e?(s=1,!1):"_"!==e||(i=1,!1)));i&&o.unshift("_"),s&&o.unshift("-");let a=`[${(0,t._regEscape)(o.join(""))}]*`,u=`^${a}|${a}$`;return["l","left"].includes(n)?u=`^${a}`:["r","right"].includes(n)&&(u=`${a}$`),e.replace(new RegExp(u,"gs"),"")},t._ltrim=(e,r=" \r\n\t\f\v\0")=>(0,t._trim)(e,r,"left"),t._rtrim=(e,r=" \r\n\t\f\v\0")=>(0,t._trim)(e,r,"right"),t._titleCase=(e,r=!1)=>(0,t._str)(e).replace(/\w\S*/g,(e=>e[0].toUpperCase()+(r?e.substring(1):e.substring(1).toLowerCase()))),t._sentenceCase=(e,r=!1)=>(0,t._str)(e).split(/((?:\.|\?|!)\s*)/).map((e=>{if(e.length){const t=e.charAt(0).toUpperCase(),n=e.length>1?e.slice(1):"";e=t+(r?n:n.toLowerCase())}return e})).join(""),t._snakeCase=(e,r=!1)=>{let n=(0,t._strNorm)((0,t._trim)(e)).replace(/[A-Z]+/g,(e=>e[0].toUpperCase()+e.substring(1).toLowerCase())).replace(/\W+/g," ").split(/ |\B(?=[A-Z])/).join("_").replace(/_+/g,"_").toLowerCase();return"_"===n?"":(/^_|_$/.test(n)&&r&&(n=(0,t._trim)(n,"_",["l","left","r","right"].includes(r)?r:"")),n)},t._slugCase=(e,r=!1)=>(0,t._snakeCase)(e,r).replace(/_/g,"-"),t._studlyCase=e=>(0,t._snakeCase)(e).split("_").filter((e=>e.length)).map((e=>e[0].toUpperCase()+e.substring(1).toLowerCase())).join(""),t._camelCase=e=>{let r=(0,t._studlyCase)(e);return r.length&&(r=r[0].toLowerCase()+r.substring(1)),r}},692:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Term=void 0;const n=r(301),s=r(917);class i{static getFormats(e){const t=this.FORMATS,r=this.PREDEFINED_FORMATS;return(Array.isArray(e)?e:"string"==typeof e?[e]:[]).reduce(((e,n)=>{if((n=n.trim().toLowerCase())&&"reset"!==n){let s=n=n.replace(/[^a-z0-9]/gi,"_").replace("grey","gray");const i=t=>{const n=r[t];Array.isArray(n)?e.push(...n):"string"==typeof n&&e.push(n)};t.hasOwnProperty(n)?e.push(n):t.hasOwnProperty(s=`fg_${n}`)?e.push(s):r.hasOwnProperty(n)?i(n):r.hasOwnProperty(s=`bg_${n}`)&&i(s)}return e}),[])}static format(e,...t){let r;const s=this.getFormats(e),i=t=>{if(this.DISABLED||!e.length)return t;if("object"==typeof t&&t){if(Array.isArray(t))return t;if(new RegExp("\\[object \\w+\\]").test(r=(0,n._string)(t)))return t;t=r}return"string"==typeof t&&t.length?s.reduce(((e,t)=>this.FORMATS[t]+e+this.FORMATS.reset),t):t},o=this,a=t;return{format(e,...t){return a.push(o.format(e,...t).values()),this},values:(...e)=>a.concat(e).map((e=>i(e))),clear(...e){return o.clear(...this.values(...e))},log(...e){console.log(...this.values(...e))},debug(...e){console.debug(...this.values(...e))},warn(...e){console.warn(...this.values(...e))},error(...e){console.error(...this.values(...e))},info(...e){console.info(...this.values(...e))}}}static clear(...e){const t=e=>Object.values(this.FORMATS).reduce(((e,t)=>e.replace(new RegExp(String(t).replace(/\x1B/,"\\x1B").replace(/\[/,"\\["),"g"),"")),e);return e.map((e=>"string"==typeof e&&e.trim().length?t(e):e))}static text(e,t){const r=(0,n._string)(e),s=(Array.isArray(t)?t:"string"==typeof t?[t]:[]).filter((e=>"string"==typeof e&&!!e.trim()));return s.length&&r.trim().length?this.format(s,r).values()[0]:r}static log(...e){this.format("log",...e).log()}static debug(...e){this.format("debug",...e).debug()}static error(...e){this.format("error",...e).error()}static warn(...e){this.format("warn",...e).warn()}static info(...e){this.format("info",...e).info()}static success(...e){this.format("success",...e).log()}static list(e,t=!1){var r;let i=[e],o="values";if("object"==typeof e&&e)if(o=null===(r=e[Symbol.iterator])||void 0===r?void 0:r.name)i="entries"===o?t?[...e]:[e]:[...e];else if(o="values",i=[e],t&&!1===(0,n._stringable)(e)){let t=(0,s._jsonClone)(e),r=[];"object"==typeof t&&t&&(r=Object.entries(t)).length||(r=Object.entries(e)),r.length&&(o="entries",i=r)}return[i,o]}static table(e,t=248,r=!1){const i=this,[o,a]=i.list(e,"object"==typeof e&&e&&!(0,n._stringable)(e)),u=e=>{let t,r;if(Array.isArray(e)||!1===(r=(0,n._stringable)(e))){if("object"==typeof e&&e){const t=e[Symbol.iterator];t?(e=[...e],"entries"===t&&(e=Object.fromEntries(e))):e=(0,s._jsonClone)(e)}e=(0,s._jsonStringify)(e),t="magenta"}else t="green","number"==typeof e?t="yellow":null==e?t="gray":!0===e?t="cyan":!1===e?t="red":/^\d{4}-(?:0[1-9]|1[0-2])-(?:[0-2][1-9]|[1-3]0|3[01])T(?:[0-1][0-9]|2[0-3])(?::[0-6]\d)(?::[0-6]\d)?(?:\.\d{3})?(?:[+-][0-2]\d:[0-5]\d|Z)?$/.test(r)&&(t="magenta"),e=r;return[e,t]};if("values"===a&&o.length<2){const[t,r]=u(e);return void console.log(i.text(t,r))}let l;const c=[];if("entries"===a)c.push(["(index)","Values"]),c.push(...o);else{let e=[],t=[];o.forEach(((r,s)=>{let[o,a]=i.list(r,!s||"entries"===l);s||(l=a);const u={};o.forEach(((t,r)=>{let s,i;"entries"===a?(s=(0,n._str)(t[0],!0,!0),i=t[1]):(s=`${r}`,i=t),e.includes(s)||e.push(s),u[s]=i})),t.push(u)})),c.push(["(index)",...e]),t.forEach(((t,r)=>{const n=[];for(const r of e)n.push(t[r]);c.push([r,...n])}))}const _={},f=[];c.forEach((e=>{const r=[];e.forEach(((e,n)=>{const[s,i]=u(e);_.hasOwnProperty(n)||(_[n]=0);let o=s.length;o>t&&(o=t),o>_[n]&&(_[n]=o),r.push([s,i])})),f.push(r)}));const g=f.length;f.forEach(((e,t)=>{let n=0,s=[];e.forEach(((e,r)=>{let[o,a]=e;r&&t||(a=!r&&t&&"values"===l?"gray":"white");const u=_[r],c=[];if(o.length>u){for(;o.length>u;){const e=o.substring(0,u).padEnd(u);o=o.slice(u),c.push(i.text(e,a))}o.length&&c.push(i.text(o.padEnd(u),a))}else c.push(i.text(o.padEnd(u),a));s.push(c),n<c.length&&(n=c.length)})),s=s.map(((e,t)=>{const r=_[t];return[...Array(n)].map(((t,n)=>n<e.length?e[n]:"".padEnd(r)))}));const o=[...Array(n)].map((()=>[]));s.forEach(((e,t)=>{e.forEach(((e,r)=>o[r][t]=e))}));const a=[],u=o.length;o.forEach(((e,n)=>{n||t||a.push("┌─"+e.map(((e,t)=>"".padEnd(_[t],"─"))).join("─┬─")+"─┐"),a.push("│ "+e.join(" │ ")+" │"),(!t||r)&&n+1===u&&t+1<g&&a.push("├─"+e.map(((e,t)=>"".padEnd(_[t],"─"))).join("─┼─")+"─┤"),n+1===u&&t+1===g&&a.push("└─"+e.map(((e,t)=>"".padEnd(_[t],"─"))).join("─┴─")+"─┘")})),a.forEach((e=>console.log(e)))}))}}t.Term=i,i.DISABLED=!1,i.FORMATS={reset:"[0m",bright:"[1m",dim:"[2m",underscore:"[4m",blink:"[5m",reverse:"[7m",hidden:"[8m",fg_black:"[30m",fg_red:"[31m",fg_green:"[32m",fg_yellow:"[33m",fg_blue:"[34m",fg_magenta:"[35m",fg_cyan:"[36m",fg_white:"[37m",fg_gray:"[90m",bg_black:"[40m",bg_red:"[41m",bg_green:"[42m",bg_yellow:"[43m",bg_blue:"[44m",bg_magenta:"[45m",bg_cyan:"[46m",bg_white:"[47m",bg_gray:"[100m"},i.PREDEFINED_FORMATS={log:"fg_white",debug:"fg_gray",error:"fg_red",warn:"fg_yellow",info:"fg_cyan",success:"fg_green",bg_log:["bg_blue","fg_white"],bg_debug:["bg_gray","fg_black"],bg_error:["bg_red","fg_white"],bg_warn:["bg_yellow","fg_black"],bg_info:["bg_cyan","fg_black"],bg_success:["bg_green","fg_white"]}},377:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._debouced=t._hasAnyProps=t._hasProps=t._hasProp=t._flatten=t.ElapsedTime=t.Term=t._sortValues=t._queue=t._sleep=t._asyncValues=t._asyncAll=t._rand=t._commas=t._round=t._int=t._num=t._toNum=t._isNumeric=t._timestamp=t._datetime=t._getDate=t._isDate=t._batchValues=t._camelCase=t._studlyCase=t._slugCase=t._snakeCase=t._sentenceCase=t._titleCase=t._rtrim=t._ltrim=t._trim=t._strEscape=t._regEscape=t._strNorm=t._str=t._stringable=t._string=t._uuid=t._jsonClone=t._jsonParse=t._jsonStringify=t._sayHello=void 0;var n=r(597);Object.defineProperty(t,"_sayHello",{enumerable:!0,get:function(){return n._sayHello}});var s=r(917);Object.defineProperty(t,"_jsonStringify",{enumerable:!0,get:function(){return s._jsonStringify}}),Object.defineProperty(t,"_jsonParse",{enumerable:!0,get:function(){return s._jsonParse}}),Object.defineProperty(t,"_jsonClone",{enumerable:!0,get:function(){return s._jsonClone}});var i=r(301);Object.defineProperty(t,"_uuid",{enumerable:!0,get:function(){return i._uuid}}),Object.defineProperty(t,"_string",{enumerable:!0,get:function(){return i._string}}),Object.defineProperty(t,"_stringable",{enumerable:!0,get:function(){return i._stringable}}),Object.defineProperty(t,"_str",{enumerable:!0,get:function(){return i._str}}),Object.defineProperty(t,"_strNorm",{enumerable:!0,get:function(){return i._strNorm}}),Object.defineProperty(t,"_regEscape",{enumerable:!0,get:function(){return i._regEscape}}),Object.defineProperty(t,"_strEscape",{enumerable:!0,get:function(){return i._strEscape}}),Object.defineProperty(t,"_trim",{enumerable:!0,get:function(){return i._trim}}),Object.defineProperty(t,"_ltrim",{enumerable:!0,get:function(){return i._ltrim}}),Object.defineProperty(t,"_rtrim",{enumerable:!0,get:function(){return i._rtrim}}),Object.defineProperty(t,"_titleCase",{enumerable:!0,get:function(){return i._titleCase}}),Object.defineProperty(t,"_sentenceCase",{enumerable:!0,get:function(){return i._sentenceCase}}),Object.defineProperty(t,"_snakeCase",{enumerable:!0,get:function(){return i._snakeCase}}),Object.defineProperty(t,"_slugCase",{enumerable:!0,get:function(){return i._slugCase}}),Object.defineProperty(t,"_studlyCase",{enumerable:!0,get:function(){return i._studlyCase}}),Object.defineProperty(t,"_camelCase",{enumerable:!0,get:function(){return i._camelCase}});var o=r(586);Object.defineProperty(t,"_batchValues",{enumerable:!0,get:function(){return o._batchValues}});var a=r(925);Object.defineProperty(t,"_isDate",{enumerable:!0,get:function(){return a._isDate}}),Object.defineProperty(t,"_getDate",{enumerable:!0,get:function(){return a._getDate}}),Object.defineProperty(t,"_datetime",{enumerable:!0,get:function(){return a._datetime}}),Object.defineProperty(t,"_timestamp",{enumerable:!0,get:function(){return a._timestamp}});var u=r(782);Object.defineProperty(t,"_isNumeric",{enumerable:!0,get:function(){return u._isNumeric}}),Object.defineProperty(t,"_toNum",{enumerable:!0,get:function(){return u._toNum}}),Object.defineProperty(t,"_num",{enumerable:!0,get:function(){return u._num}}),Object.defineProperty(t,"_int",{enumerable:!0,get:function(){return u._int}}),Object.defineProperty(t,"_round",{enumerable:!0,get:function(){return u._round}}),Object.defineProperty(t,"_commas",{enumerable:!0,get:function(){return u._commas}}),Object.defineProperty(t,"_rand",{enumerable:!0,get:function(){return u._rand}});var l=r(16);Object.defineProperty(t,"_asyncAll",{enumerable:!0,get:function(){return l._asyncAll}}),Object.defineProperty(t,"_asyncValues",{enumerable:!0,get:function(){return l._asyncValues}}),Object.defineProperty(t,"_sleep",{enumerable:!0,get:function(){return l._sleep}});var c=r(78);Object.defineProperty(t,"_queue",{enumerable:!0,get:function(){return c._queue}});var _=r(172);Object.defineProperty(t,"_sortValues",{enumerable:!0,get:function(){return _._sortValues}});var f=r(692);Object.defineProperty(t,"Term",{enumerable:!0,get:function(){return f.Term}});var g=r(448);Object.defineProperty(t,"ElapsedTime",{enumerable:!0,get:function(){return g.ElapsedTime}});var m=r(962);Object.defineProperty(t,"_flatten",{enumerable:!0,get:function(){return m._flatten}}),Object.defineProperty(t,"_hasProp",{enumerable:!0,get:function(){return m._hasProp}}),Object.defineProperty(t,"_hasProps",{enumerable:!0,get:function(){return m._hasProps}}),Object.defineProperty(t,"_hasAnyProps",{enumerable:!0,get:function(){return m._hasAnyProps}});var d=r(802);Object.defineProperty(t,"_debouced",{enumerable:!0,get:function(){return d._debouced}})}},t={};return function r(n){var s=t[n];if(void 0!==s)return s.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}(713)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU21XLEdBR3BFbFcsRUFBT0QsT0FDZixDQ25CMEJtVyxDQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veHV0aWxzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19FbGFwc2VkVGltZS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2JhdGNoLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fZGF0ZXRpbWUudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19kZWJvdWNlZC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2hlbGxvLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fanNvbi50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX251bWJlci50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX29iamVjdHMudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19wcm9taXNlLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fcXVldWUudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19zb3J0LnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fc3RyaW5nLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fdGVybS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3h1dGlscy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wieHV0aWxzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInh1dGlsc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsICgpID0+IHtcbnJldHVybiAiLCJleHBvcnQgKiBmcm9tICcuL3V0aWxzJzsiLCJpbXBvcnQgeyBfaXNEYXRlIH0gZnJvbSAnLi9fZGF0ZXRpbWUnO1xyXG5pbXBvcnQgeyBfcm91bmQgfSBmcm9tICcuL19udW1iZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVsYXBzZWRUaW1lXHJcbntcclxuXHQvL3Byb3BzXHJcblx0c3RhcnRfdGltZTogRGF0ZXx1bmRlZmluZWQ7XHJcblx0c3RvcF90aW1lOiBEYXRlfHVuZGVmaW5lZDtcclxuXHRfbXM6IG51bWJlcnx1bmRlZmluZWQ7XHJcblx0XHJcblx0LyoqXHJcblx0ICogTmV3IGluc3RhbmNlXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoKXtcclxuXHRcdHRoaXMuc3RhcnRfdGltZSA9IG5ldyBEYXRlKCk7XHJcblx0XHR0aGlzLnN0b3BfdGltZSA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX21zID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU3RhcnQgdGltZSB0cmFja2luZyAoc2V0cyBzdGFydF90aW1lIHRvIG5vdyBhbmQgcmVzZXRzIG90aGVyIHByb3BlcnRpZXMpXHJcblx0ICovXHJcblx0c3RhcnQoKTogRWxhcHNlZFRpbWUge1xyXG5cdFx0Y29uc3QgX25vdyA9IG5ldyBEYXRlKCk7XHJcblx0XHR0aGlzLnN0YXJ0X3RpbWUgPSBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSkgPyB0aGlzLnN0YXJ0X3RpbWUgOiBfbm93O1xyXG5cdFx0dGhpcy5zdG9wX3RpbWUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLl9tcyA9IHVuZGVmaW5lZDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVHJhY2sgY3VycmVudCB0aW1lIChzZXRzIHRoaXMuX21zIHRvIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGxhc3Qgc3RhcnQgYW5kIG5vdylcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdXBkYXRlU3RhcnQgIFNldCBzdGFydCB0byBub3dcclxuXHQgKi9cclxuXHRub3codXBkYXRlU3RhcnQ6IGJvb2xlYW4gPSBmYWxzZSk6IEVsYXBzZWRUaW1lIHtcclxuXHRcdGNvbnN0IF9ub3cgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0Y29uc3QgX3N0YXJ0OiBhbnkgPSBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSkgPyB0aGlzLnN0YXJ0X3RpbWUgOiB0aGlzLnN0YXJ0X3RpbWUgPSBfbm93O1xyXG5cdFx0dGhpcy5fbXMgPSBfbm93LmdldFRpbWUoKSAtIF9zdGFydC5nZXRUaW1lKCk7XHJcblx0XHRpZiAodXBkYXRlU3RhcnQpIHRoaXMuc3RhcnRfdGltZSA9IF9ub3c7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3AgdGltZSB0cmFja2luZyAoc2V0cyB0aGlzLl9tcyB0byB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBsYXN0IHN0YXJ0IGFuZCBsYXN0IHN0b3ApXHJcblx0ICogSWYgbGFzdCBzdG9wIGlzIGxlc3MgdGhhbiBzdGFydCB0aW1lLCBzdG9wIHRpbWUgaXMgdXBkYXRlZCB0byBub3cuXHJcblx0ICovXHJcblx0c3RvcCgpOiBFbGFwc2VkVGltZSB7XHJcblx0XHRjb25zdCBfbm93ID0gbmV3IERhdGUoKTtcclxuXHRcdGNvbnN0IF9zdGFydDogYW55ID0gX2lzRGF0ZSh0aGlzLnN0YXJ0X3RpbWUpID8gdGhpcy5zdGFydF90aW1lIDogX25vdywgdCA9IF9zdGFydC5nZXRUaW1lKCk7XHJcblx0XHRjb25zdCBfc3RvcF90aW1lOiBhbnkgPSB0aGlzLnN0b3BfdGltZTtcclxuXHRcdGNvbnN0IF9zdG9wID0gX2lzRGF0ZShfc3RvcF90aW1lKSAmJiBfc3RvcF90aW1lLmdldFRpbWUoKSA+PSB0ID8gX3N0b3BfdGltZSA6IHRoaXMuc3RvcF90aW1lID0gX25vdztcclxuXHRcdHRoaXMuX21zID0gX3N0b3AuZ2V0VGltZSgpIC0gdDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogV2hldGhlciB0aW1lIHRyYWNraW5nIHdhcyBzdGFydGVkXHJcblx0ICovXHJcblx0c3RhcnRlZCgpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBXaGV0aGVyIHRpbWUgdHJhY2tpbmcgd2FzIHN0b3BwZWRcclxuXHQgKi9cclxuXHRzdG9wcGVkKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIF9pc0RhdGUodGhpcy5zdG9wX3RpbWUpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHRyYWNrZWQgZWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xyXG5cdCAqIFxyXG5cdCAqIEByZXR1cm5zIG1pbGxpc2Vjb25kc1xyXG5cdCAqL1xyXG5cdG1zKCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gcGFyc2VJbnQodGhpcy5fbXMgYXMgYW55KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0cmFja2VkIGVsYXBzZWQgdGltZSBpbiBzZWNvbmRzXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGRlY2ltYWxQbGFjZXNcclxuXHQgKiBAcmV0dXJucyBzZWNvbmRzXHJcblx0ICovXHJcblx0c2VjKGRlY2ltYWxQbGFjZXM6IG51bWJlciA9IDMpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIF9yb3VuZCh0aGlzLm1zKCkvMTAwMCwgZGVjaW1hbFBsYWNlcyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgdHJhY2tlZCBlbGFwc2VkIHRpbWUgaW4gbWludXRlc1xyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBkZWNpbWFsUGxhY2VzXHJcblx0ICogQHJldHVybnMgbWludXRlc1xyXG5cdCAqL1xyXG5cdG1pbihkZWNpbWFsUGxhY2VzOiBudW1iZXIgPSAzKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBfcm91bmQodGhpcy5tcygpLzYwMDAwLCBkZWNpbWFsUGxhY2VzKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0cmFja2luZyBkYXRhICh0aGlzIHdpbGwgc3RvcCB0cmFja2luZylcclxuXHQgKi9cclxuXHRkYXRhKCk6IHtzdGFydF90aW1lOiBEYXRlfHVuZGVmaW5lZDsgc3RvcF90aW1lOiBEYXRlfHVuZGVmaW5lZDsgZWxhcHNlZF9tczogbnVtYmVyO317XHJcblx0XHR0aGlzLnN0b3AoKTtcclxuXHRcdGNvbnN0IHN0YXJ0X3RpbWUgPSBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSkgPyB0aGlzLnN0YXJ0X3RpbWUgOiB1bmRlZmluZWQ7XHJcblx0XHRjb25zdCBzdG9wX3RpbWUgPSBfaXNEYXRlKHRoaXMuc3RvcF90aW1lKSA/IHRoaXMuc3RvcF90aW1lIDogdW5kZWZpbmVkO1xyXG5cdFx0Y29uc3QgZWxhcHNlZF9tcyA9IHRoaXMubXMoKTtcclxuXHRcdHJldHVybiB7c3RhcnRfdGltZSwgc3RvcF90aW1lLCBlbGFwc2VkX21zfTtcclxuXHR9XHJcbn0iLCIvKipcclxuICogU3BsaXQgYGFycmF5YCBpbnRvIGJhdGNoZXMgYFRbXVtdYCBvZiBzcGVjaWZpZWQgc2l6ZS5cclxuICogLSBpLmUuIGBfYmF0Y2hWYWx1ZXM8bnVtYmVyPihbMSwyLDMsNCw1LDYsNyw4XSwgMylgID0+IGBbWzEsMiwzXSxbNCw1LDZdLFs3LDhdXWBcclxuICogXHJcbiAqIEBwYXJhbSBhcnJheSAgQmF0Y2ggdmFsdWVzXHJcbiAqIEBwYXJhbSBiYXRjaFNpemUgIEJhdGNoIHNpemUgYHggPiAwYC5cclxuICogQHJldHVybnMgIGBUW11bXWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfYmF0Y2hWYWx1ZXMgPSA8VCBleHRlbmRzIGFueT4oYXJyYXk6IFRbXSwgYmF0Y2hTaXplOiBudW1iZXIpOiBUW11bXSA9PiB7XHJcblx0aWYgKCEoTnVtYmVyLmlzSW50ZWdlcihiYXRjaFNpemUpICYmIGJhdGNoU2l6ZSA+IDApKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYmF0Y2ggc2l6ZS4nKTtcclxuXHRjb25zdCBfYXJyYXkgPSBhcnJheS5zbGljZSgwKSwgX2J1ZmZlcjogVFtdW10gPSBbXTtcclxuXHR3aGlsZSAoX2FycmF5Lmxlbmd0aCkgX2J1ZmZlci5wdXNoKF9hcnJheS5zcGxpY2UoMCwgYmF0Y2hTaXplKSk7XHJcblx0cmV0dXJuIF9idWZmZXI7XHJcbn07IiwiLyoqXHJcbiAqIFZhbGlkYXRlIGBEYXRlYCBpbnN0YW5jZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2lzRGF0ZSA9ICh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSk7XHJcblxyXG4vKipcclxuICogR2V0L2NyZWF0ZSBgRGF0ZWAgaW5zdGFuY2VcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWUgfiBgdmFsdWUgaW5zdGFuY2VPZiBEYXRlID8gdmFsdWUgOiBuZXcgRGF0ZSh2YWx1ZSlgXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgUGFyc2UgZGVmYXVsdCBvbiBmYWlsdXJlIFtkZWZhdWx0OiBgdW5kZWZpbmVkYCA9PiBgbmV3IERhdGUoKWBdXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2dldERhdGUgPSAodmFsdWU/OiBhbnksIF9kZWZhdWx0PzogRGF0ZXxzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkKTogRGF0ZSA9PiB7XHJcblx0aWYgKCFfaXNEYXRlKHZhbHVlKSAmJiAhX2lzRGF0ZSh2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKSkpe1xyXG5cdFx0aWYgKF9kZWZhdWx0IGluc3RhbmNlb2YgRGF0ZSkgdmFsdWUgPSBfZGVmYXVsdDtcclxuXHRcdGVsc2UgaWYgKF9kZWZhdWx0ID09PSB1bmRlZmluZWQpIHZhbHVlID0gbmV3IERhdGUoKTtcclxuXHRcdGVsc2UgdmFsdWUgPSBuZXcgRGF0ZShfZGVmYXVsdCBhcyBhbnkpO1xyXG5cdH1cclxuXHRyZXR1cm4gdmFsdWU7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydCBgRGF0ZWAgdmFsdWUgdG8gZGF0ZXRpbWUgZm9ybWF0IChpLmUuIGAyMDIzLTA1LTI3IDIyOjExOjU3YCB+IGBZWVlZLU1NLUREIEhIOm1tOnNzYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWUgfiBgdmFsdWUgaW5zdGFuY2VPZiBEYXRlID8gdmFsdWUgOiBuZXcgRGF0ZSh2YWx1ZSlgXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgUGFyc2UgZGVmYXVsdCBvbiBmYWlsdXJlIFtkZWZhdWx0OiBgdW5kZWZpbmVkYCA9PiBgbmV3IERhdGUoKWBdXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2RhdGV0aW1lID0gKHZhbHVlPzogYW55LCBfZGVmYXVsdD86IERhdGV8c3RyaW5nfG51bWJlcnxudWxsfHVuZGVmaW5lZCk6IHN0cmluZyA9PiB7XHJcblx0Y29uc3QgZGF0ZSA9IF9nZXREYXRlKHZhbHVlLCBfZGVmYXVsdCksIF9wYWQgPSAodjogbnVtYmVyKSA9PiBgJHt2fWAucGFkU3RhcnQoMiwgJzAnKTtcclxuXHRyZXR1cm4gIV9pc0RhdGUoZGF0ZSkgPyBgJHtkYXRlfWAgOiBgJHtkYXRlLmdldEZ1bGxZZWFyKCl9LSR7X3BhZChkYXRlLmdldE1vbnRoKCkgKyAxKX0tJHtfcGFkKGRhdGUuZ2V0RGF0ZSgpKX0gJHtfcGFkKGRhdGUuZ2V0SG91cnMoKSl9OiR7X3BhZChkYXRlLmdldE1pbnV0ZXMoKSl9OiR7X3BhZChkYXRlLmdldFNlY29uZHMoKSl9YDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IGBEYXRlYCB2YWx1ZSB0byBJU08gZm9ybWF0IChpLmUuIGBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClgIH4gYDIwMjMtMDUtMjdUMTk6MzA6NDQuNTc1WmApXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlIH4gYHZhbHVlIGluc3RhbmNlT2YgRGF0ZSA/IHZhbHVlIDogbmV3IERhdGUodmFsdWUpYFxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgIFBhcnNlIGRlZmF1bHQgb24gZmFpbHVyZSBbZGVmYXVsdDogYHVuZGVmaW5lZGAgPT4gYG5ldyBEYXRlKClgXVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90aW1lc3RhbXAgPSAodmFsdWU/OiBhbnksIF9kZWZhdWx0PzogRGF0ZXxzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkKTogc3RyaW5nID0+IHtcclxuXHRjb25zdCBkYXRlID0gX2dldERhdGUodmFsdWUsIF9kZWZhdWx0KTtcclxuXHRyZXR1cm4gIV9pc0RhdGUoZGF0ZSkgPyBgJHtkYXRlfWAgOiBkYXRlLnRvSVNPU3RyaW5nKCk7XHJcbn07XHJcblxyXG4vLy4uXHJcblxyXG4vKlxyXG4vL1RFU1RTOlxyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoKSA9PiBuZXcgRGF0ZSgpID0+YCwgX2dldERhdGUoKSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZSgnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykgPT5gLCBfZ2V0RGF0ZSgnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoMTY4NTIxNTg0NDU3NSkgPT5gLCBfZ2V0RGF0ZSgxNjg1MjE1ODQ0NTc1KSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZShOYU4pID0+IG5ldyBEYXRlKCkgPT5gLCBfZ2V0RGF0ZShOYU4pKTtcclxuY29uc29sZS5sb2coYF9nZXREYXRlKE5hTiwgbnVsbCkgPT4gYCwgX2dldERhdGUoTmFOLCBudWxsKSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZShOYU4sIG5ldyBEYXRlKCkpID0+IGAsIF9nZXREYXRlKE5hTiwgbmV3IERhdGUoKSkpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoTmFOLCBOYU4pID0+IGAsIF9nZXREYXRlKE5hTiwgTmFOKSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZShOYU4sIDE2ODUyMTU4NDQ1NzUpID0+IGAsIF9nZXREYXRlKE5hTiwgMTY4NTIxNTg0NDU3NSkpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoTmFOLCAnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykgPT4gYCwgX2dldERhdGUoTmFOLCAnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoTmFOLCAnbWlkbmlnaHQnKSA9PiBgLCBfZ2V0RGF0ZShOYU4sICdtaWRuaWdodCcpKTtcclxuXHJcbi8vUkVTVUxUUzpcclxuLy8gX2dldERhdGUoKSA9PiBuZXcgRGF0ZSgpID0+IDIwMjMtMDUtMjdUMjA6Mzk6MTkuODIxWlxyXG4vLyBfZ2V0RGF0ZSgnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykgPT4gMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaXHJcbi8vIF9nZXREYXRlKDE2ODUyMTU4NDQ1NzUpID0+IDIwMjMtMDUtMjdUMTk6MzA6NDQuNTc1WlxyXG4vLyBfZ2V0RGF0ZShOYU4pID0+IG5ldyBEYXRlKCkgPT4gMjAyMy0wNS0yN1QyMDozOToxOS44MjNaXHJcbi8vIF9nZXREYXRlKE5hTiwgbnVsbCkgPT4gIDE5NzAtMDEtMDFUMDA6MDA6MDAuMDAwWlxyXG4vLyBfZ2V0RGF0ZShOYU4sIG5ldyBEYXRlKCkpID0+ICAyMDIzLTA1LTI3VDIwOjM5OjE5LjgyNFpcclxuLy8gX2dldERhdGUoTmFOLCBOYU4pID0+ICBJbnZhbGlkIERhdGVcclxuLy8gX2dldERhdGUoTmFOLCAxNjg1MjE1ODQ0NTc1KSA9PiAgMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaXHJcbi8vIF9nZXREYXRlKE5hTiwgJzIwMjMtMDUtMjdUMTk6MzA6NDQuNTc1WicpID0+ICAyMDIzLTA1LTI3VDE5OjMwOjQ0LjU3NVpcclxuLy8gX2dldERhdGUoTmFOLCAnbWlkbmlnaHQnKSA9PiAgSW52YWxpZCBEYXRlXHJcbiovIiwiaW1wb3J0IHsgYm9vbCB9IGZyb20gJy4vX2NvbW1vbic7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGRlYm91bmNlZCBjYWxsYmFjayBmdW5jdGlvblxyXG4gKiBcclxuICogQHBhcmFtIGhhbmRsZXIgIFRocm90dGxlZCBjYWxsYmFjayBoYW5kbGVyXHJcbiAqIEBwYXJhbSBkZWxheSAgQ2FsbGJhY2sgZGVsYXkgbWlsbGlzZWNvbmRzXHJcbiAqIEBwYXJhbSBtYXhXYWl0ICBNYXhpbXVtIGNhbGxiYWNrIGRlbGF5IG1pbGxpc2Vjb25kc1xyXG4gKiBAcGFyYW0gaW1tZWRpYXRlICBFeGVjdXRlIGNhbGxiYWNrIGJlZm9yZSBkZWxheVxyXG4gKiBAcmV0dXJucyBUaHJvdHRsZWQgY2FsbGJhY2sgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBfZGVib3VjZWQgPSAoaGFuZGxlcjogKC4uLmFyZ3M6IGFueSk9PnZvaWQsIGRlbGF5OiBudW1iZXIgPSAyMDAsIG1heFdhaXQ6IG51bWJlciA9IDAsIGltbWVkaWF0ZTogYm9vbCA9IGZhbHNlKTogKCguLi5hcmdzOiBhbnkpPT52b2lkKSA9PiB7XHJcblx0ZGVsYXkgPSAhaXNOYU4oZGVsYXkgPSBwYXJzZUZsb2F0KGRlbGF5IGFzIGFueSkpICYmIGRlbGF5ID49IDAgPyBkZWxheSA6IDIwMDtcclxuXHRtYXhXYWl0ID0gIWlzTmFOKG1heFdhaXQgPSBwYXJzZUZsb2F0KG1heFdhaXQgYXMgYW55KSkgJiYgbWF4V2FpdCA+PSAwICYmIG1heFdhaXQgPiBkZWxheSA/IG1heFdhaXQgOiAwO1xyXG5cdGltbWVkaWF0ZSA9ICEhaW1tZWRpYXRlO1xyXG5cdGxldCBpbW1lZGlhdGVUaW1lcjogYW55LCBjYWxsVGltZXI6IGFueSwgd2FpdFRpbWVyOiBhbnksIG5leHRDYWxsOiBbY29udGV4dDogYW55LCBhcmdzOiBhbnlbXV0gfCB1bmRlZmluZWQ7XHJcblx0Y29uc3QgZXhlY3V0ZSA9IChpc19pbW1lZGlhdGU/OmJvb2wpID0+IHtcclxuXHRcdGxldCBuZXh0ID0gbmV4dENhbGw7XHJcblx0XHRuZXh0Q2FsbCA9IHVuZGVmaW5lZDtcclxuXHRcdGlmICh3YWl0VGltZXIpe1xyXG5cdFx0XHRjbGVhclRpbWVvdXQod2FpdFRpbWVyKTtcclxuXHRcdFx0d2FpdFRpbWVyID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGNhbGxUaW1lciAmJiAhaXNfaW1tZWRpYXRlKXtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KGNhbGxUaW1lcik7XHJcblx0XHRcdGNhbGxUaW1lciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmIChuZXh0Py5sZW5ndGggJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGhhbmRsZXIpIGhhbmRsZXIuYXBwbHkoLi4ubmV4dCk7XHJcblx0XHRpZiAoZGVsYXkgJiYgaW1tZWRpYXRlICYmICFpc19pbW1lZGlhdGUpe1xyXG5cdFx0XHRpbW1lZGlhdGVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdGNsZWFyVGltZW91dChpbW1lZGlhdGVUaW1lcik7XHJcblx0XHRcdFx0aW1tZWRpYXRlVGltZXIgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH0sIGRlbGF5KTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdGNvbnN0IHdyYXBwZXIgPSBmdW5jdGlvbih0aGlzOiBhbnksIC4uLmFyZ3M6IGFueVtdKXtcclxuXHRcdG5leHRDYWxsID0gW3RoaXMsIGFyZ3NdO1xyXG5cdFx0aWYgKCFkZWxheSkgcmV0dXJuIGV4ZWN1dGUoKTtcclxuXHRcdGNvbnN0IF9uZXh0ID0gKG5vX3dhaXQ9MCkgPT4ge1xyXG5cdFx0XHRjbGVhclRpbWVvdXQoY2FsbFRpbWVyKTtcclxuXHRcdFx0Y2FsbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiBleGVjdXRlKCksIGRlbGF5KTtcclxuXHRcdFx0aWYgKCFub193YWl0ICYmIG1heFdhaXQgJiYgIXdhaXRUaW1lcikgd2FpdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiBleGVjdXRlKCksIG1heFdhaXQpO1xyXG5cdFx0fTtcclxuXHRcdGlmICghKGltbWVkaWF0ZSAmJiAhaW1tZWRpYXRlVGltZXIgJiYgIWNhbGxUaW1lcikpIHJldHVybiBfbmV4dCgpO1xyXG5cdFx0X25leHQoMSlcclxuXHRcdGV4ZWN1dGUoMSk7XHJcblx0fTtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3cmFwcGVyLCB7XHJcblx0XHRsZW5ndGg6IHt2YWx1ZTogaGFuZGxlci5sZW5ndGh9LFxyXG5cdFx0bmFtZToge3ZhbHVlOiBgJHtoYW5kbGVyLm5hbWV8fCdhbm9ueW1vdXMnfV9fZGVib3VuY2VkX18ke2RlbGF5fWB9LFxyXG5cdH0pO1xyXG5cdHJldHVybiB3cmFwcGVyO1xyXG59OyIsIi8qKlxyXG4gKiBTYXkgSGVsbG8hXHJcbiAqIFxyXG4gKiBAcGFyYW0gbmFtZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zYXlIZWxsbyA9IChuYW1lPzogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuXHRuYW1lID0gbmFtZT8ubGVuZ3RoID8gbmFtZSA6ICdUaHVrdSc7XHJcblx0Y29uc3QgaGVsbG8gPSBgW3hdIC0gSGVsbG8gJHtuYW1lfSFgO1xyXG5cdGNvbnNvbGUubG9nKGhlbGxvKTtcclxuXHRyZXR1cm4gaGVsbG87XHJcbn0iLCIvKipcclxuICogQ3VzdG9tIGBKU09OLnN0cmluZ2lmeWAgd2l0aCBleHRlbmRlZCBjdXN0b20gcmVwbGFjZXJcclxuICogLSBEZWZhdWx0IHZhbHVlIGZvciBgdW5kZWZpbmVkYCB2YWx1ZSBhcmd1bWVudFxyXG4gKiAtIEZpeCBgRXJyb3JgLCBgU2V0YCwgYE1hcGAgc3RyaW5naWZ5XHJcbiAqIC0gQ2lyY3VsYXIgcmVmZXJlbmNlIGZpeGVzXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlIChgdW5kZWZpbmVkYCB2YWx1ZSBpcyByZXBsYWNlZCB3aXRoIGBfdW5kZWZpbmVkYCBhcmd1bWVudCBzdWJzdGl0dXRlIHZhbHVlKVxyXG4gKiBAcGFyYW0gc3BhY2UgIEluZGVudGF0aW9uIHNwYWNlXHJcbiAqIEBwYXJhbSBfdW5kZWZpbmVkICBEZWZhdWx0IGB1bmRlZmluZWRgIGFyZ3VtZW50IGB2YWx1ZWAgc3Vic3RpdHV0ZSAoZGVmYXVsdCBgbnVsbGApXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2pzb25TdHJpbmdpZnkgPSAodmFsdWU6IGFueSwgc3BhY2U/OiBzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkLCBfdW5kZWZpbmVkOiBhbnkgPSBudWxsKTogc3RyaW5nID0+IHtcclxuXHRjb25zdCBfc3BhY2U6IHN0cmluZ3xudW1iZXJ8dW5kZWZpbmVkID0gc3BhY2UgPT09IG51bGwgPyB1bmRlZmluZWQgOiBzcGFjZTtcclxuXHRjb25zdCBwYXJlbnRzOiBhbnkgPSBbXTtcclxuXHRjb25zdCBwYXRoOiBhbnlbXSA9IFsndGhpcyddO1xyXG5cdGNvbnN0IHJlZnMgPSBuZXcgTWFwPGFueSwgYW55PigpO1xyXG5cdGNvbnN0IF9jbGVhciA9ICgpOiB2b2lkID0+IHtcclxuXHRcdHJlZnMuY2xlYXIoKTtcclxuXHRcdHBhcmVudHMubGVuZ3RoID0gMDtcclxuXHRcdHBhdGgubGVuZ3RoID0gMTtcclxuXHR9O1xyXG5cdGNvbnN0IF9wYXJlbnRzID0gKGtleTogYW55LCB2YWx1ZTogYW55KTogdm9pZCA9PiB7XHJcblx0XHRsZXQgaSA9IHBhcmVudHMubGVuZ3RoIC0gMSwgcHJldiA9IHBhcmVudHNbaV07XHJcblx0XHRpZiAocHJldltrZXldID09PSB2YWx1ZSB8fCBpID09PSAwKXtcclxuXHRcdFx0cGF0aC5wdXNoKGtleSk7XHJcblx0XHRcdHBhcmVudHMucHVzaCh2YWx1ZSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHdoaWxlIChpLS0gPj0gMCkge1xyXG5cdFx0XHRwcmV2ID0gcGFyZW50c1tpXTtcclxuXHRcdFx0aWYgKHByZXY/LltrZXldID09PSB2YWx1ZSl7XHJcblx0XHRcdFx0aSArPSAyO1xyXG5cdFx0XHRcdHBhcmVudHMubGVuZ3RoID0gaTtcclxuXHRcdFx0XHRwYXRoLmxlbmd0aCA9IGk7XHJcblx0XHRcdFx0LS1pO1xyXG5cdFx0XHRcdHBhcmVudHNbaV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRwYXRoW2ldID0ga2V5O1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRjb25zdCBfcmVwbGFjZXIgPSBmdW5jdGlvbih0aGlzIDphbnksIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcclxuXHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xyXG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHZhbHVlID0ge1tgW0Vycm9yXWBdOiBTdHJpbmcodmFsdWUpfTtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNldCkgdmFsdWUgPSB7J1tTZXRdJzogWy4uLnZhbHVlXX07XHJcblx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBNYXApIHZhbHVlID0geydbTWFwXSc6IFsuLi52YWx1ZV19O1xyXG5cdFx0aWYgKCdvYmplY3QnID09PSB0eXBlb2YgdmFsdWUpe1xyXG5cdFx0XHRpZiAoa2V5KSBfcGFyZW50cyhrZXksIHZhbHVlKTtcclxuXHRcdFx0Y29uc3Qgb3RoZXIgPSByZWZzLmdldCh2YWx1ZSk7XHJcblx0XHRcdGlmIChvdGhlcikgcmV0dXJuICdbQ2lyY3VsYXJdJyArIG90aGVyO1xyXG5cdFx0XHRlbHNlIHJlZnMuc2V0KHZhbHVlLCBwYXRoLmpvaW4oJy4nKSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fTtcclxuXHR0cnkge1xyXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gX3VuZGVmaW5lZCAhPT0gdW5kZWZpbmVkID8gX3VuZGVmaW5lZCA6IF91bmRlZmluZWQgPSBudWxsO1xyXG5cdFx0cGFyZW50cy5wdXNoKHZhbHVlKTtcclxuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgX3JlcGxhY2VyLCBfc3BhY2UpO1xyXG5cdH1cclxuXHRmaW5hbGx5IHtcclxuXHRcdF9jbGVhcigpO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBDdXN0b20gYEpTT04ucGFyc2VgIHdpdGggZXJyb3IgY2F0Y2ggYW5kIGRlZmF1bHQgcmVzdWx0IG9uIHBhcnNlIGZhaWx1cmVcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKiBAcGFyYW0gX2RlZmF1bHRcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfanNvblBhcnNlID0gKHZhbHVlOiBzdHJpbmcsIF9kZWZhdWx0PzogYW55KTogYW55ID0+IHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xyXG5cdH1cclxuXHRjYXRjaCAoZSl7XHJcblx0XHRyZXR1cm4gX2RlZmF1bHQ7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENsb25lIHZhbHVlIHZpYSBqc29uIHN0cmluZ2lmeSBhbmQgcGFyc2VcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWVcclxuICogQHBhcmFtIHNwYWNlICBJbmRlbnRhdGlvbiBzcGFjZVxyXG4gKiBAcGFyYW0gX3VuZGVmaW5lZCAgRGVmYXVsdCBgdW5kZWZpbmVkYCBhcmd1bWVudCBgdmFsdWVgIHN1YnN0aXR1dGUgKGRlZmF1bHQgYG51bGxgKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9qc29uQ2xvbmUgPSA8VFJldHVybiBleHRlbmRzIGFueT4odmFsdWU6IGFueSwgc3BhY2U/OiBzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZCwgX3VuZGVmaW5lZDogYW55ID0gbnVsbCk6IFRSZXR1cm4gPT4ge1xyXG5cdGxldCB2YWw6IGFueSA9IF9qc29uU3RyaW5naWZ5KHZhbHVlLCBzcGFjZSwgX3VuZGVmaW5lZCk7XHJcblx0aWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB2YWwgPSBfanNvblBhcnNlKHZhbCk7XHJcblx0cmV0dXJuIHZhbCBhcyBUUmV0dXJuO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBib29sIH0gZnJvbSAnLi9fY29tbW9uJztcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBudW1lcmljXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlXHJcbiAqIEBwYXJhbSBib29sZWFucyAgUGFzcyBgYm9vbGVhbmAgdmFsdWVzIGFzIG51bWVyaWNcclxuICogQHBhcmFtIGJsYW5rcyAgUGFzcyBlbXB0eSBgc3RyaW5nYCB2YWx1ZXMgKGJlY2F1c2UgYCFpc05hTignJykgPT09IHRydWVgKVxyXG4gKiBAcmV0dXJucyBgYm9vbGVhbmAgaXMgbnVtZXJpY1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9pc051bWVyaWMgPSAodmFsdWU6IGFueSwgYm9vbGVhbnM6IGJvb2wgPSBmYWxzZSwgYmxhbmtzOiBib29sID0gZmFsc2UpOiBib29sZWFuID0+IHtcclxuXHRpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuICFpc05hTih2YWx1ZSk7XHJcblx0aWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbHVlKSByZXR1cm4gISFib29sZWFucztcclxuXHRjb25zdCB2ID0gU3RyaW5nKHZhbHVlKS50cmltKCk7XHJcblx0aWYgKHYgPT09ICcnKSByZXR1cm4gISFibGFua3M7XHJcblx0cmV0dXJuIC8oXlsrLV0/WzAtOV0rKFsuXVswLTldKyk/KFtlRV1bKy1dP1swLTldKyk/JCl8KF5bKy1dP1xcLlswLTldKyQpfCheWystXT9bMC05XStcXC4kKS8udGVzdCh2KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHZhbHVlIHRvIG5vcm1hbGl6ZWQgbnVtYmVyXHJcbiAqIFxyXG4gKiAtIEJsYW5rIHRyaW1tZWQgYHN0cmluZ2AgdmFsdWUgaXMgY29uc2lkZXJlZCBgTmFOYCAoaS5lLiBcIlwiKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgIFtkZWZhdWx0OiBgTmFOYF0gRGVmYXVsdCByZXN1bHQgd2hlbiBwYXJzZSByZXN1bHQgaXMgYE5hTmBcclxuICogQHBhcmFtIGZpeEZsb2F0ICBbZGVmYXVsdDogYHRydWVgXSBXaGV0aGVyIHRvIGZpeCBmbG9hdCB6ZXJvcyAoaS5lLiBgMS4xLzEwMGAgPSBgMC4wMTEwMDAwMDAwMDAwMDAwMDFgID0+IGAwLjAxMWApXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIHBhcnNlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90b051bSA9ICh2YWx1ZTogYW55LCBfZGVmYXVsdDogbnVtYmVyID0gTmFOLCBmaXhGbG9hdDogYm9vbCA9IHRydWUpOiBudW1iZXIgPT4ge1xyXG5cdGxldCBudW0gPSB2YWx1ZTtcclxuXHRpZiAoJ251bWJlcicgIT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRcdGxldCBwID0gL15cXHMqKFtcXCstXSlcXHMqLywgbWF0Y2hlcyA9IHZhbHVlLm1hdGNoKHApOyAvL21hdGNoIHByZWZpeCArLy1cclxuXHRcdFx0aWYgKG1hdGNoZXMpIHZhbHVlID0gdmFsdWUucmVwbGFjZShwLCAnJyk7IC8vcmVtb3ZlIHByZWZpeCArLy1cclxuXHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eXFxzKltcXCstXS8sICcnKS50cmltKCk7IC8vcmVtb3ZlIHByZWZpeCArLy1cclxuXHRcdFx0aWYgKHZhbHVlLm1hdGNoKC9eXFxkezEsM30oLFxcZHszfSkqKFxcLnwoXFwuXFxkKykpPyQvKSkgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8sL2csICcnKS50cmltKCk7IC8vbWF0Y2ggYW5kIHJlbW92ZSBcIixcIiB0aG91c2FuZCBzZXBhcmF0b3JcclxuXHRcdFx0aWYgKCF2YWx1ZS5tYXRjaCgvXlxcZCooXFwufChcXC5cXGQrKSk/JC8pKSB2YWx1ZSA9ICd4JzsgLy9pbnZhbGlkYXRlIGludmFsaWQgbGVhZGluZyBkZWNpbWFsIChpLmUuICcuMTAnKVxyXG5cdFx0XHRlbHNlIGlmIChtYXRjaGVzKSB2YWx1ZSA9IG1hdGNoZXNbMV0gKyB2YWx1ZTsgLy9yZXN0b3JlIHByZWZpeCArLy1cclxuXHRcdH1cclxuXHRcdG51bSA9ICFpc05hTihudW0gPSBOdW1iZXIodmFsdWUpKSA/IG51bSA6IHBhcnNlRmxvYXQobnVtKTsgLy9wYXJzZSBudW1iZXJcclxuXHR9XHJcblx0aWYgKCEobnVtICE9PSAnJyAmJiBudW0gIT09IG51bGwgJiYgIWlzTmFOKG51bSA9IE51bWJlcihudW0pKSkpIHJldHVybiBfZGVmYXVsdDsgLy9yZXR1cm4gZGVmYXVsdCB3aGVuIHZhbHVlIGlzIG5vdCBub3QgbnVtZXJpY1xyXG5cdGxldCB2YWwsIG1hdGNoZXMsIHBsYWNlcyA9IDU7IC8vZml4IGZsb2F0IC0gbWF4IDUgZGVjaW1hbCBwbGFjZXNcclxuXHRpZiAoZml4RmxvYXQgJiYgbmV3IFJlZ0V4cChgXFxcXC5cXFxcZCooMHskezN9fVxcXFxkKilgKS50ZXN0KHZhbCA9IFN0cmluZyhudW0pKSAmJiAobWF0Y2hlcyA9IHZhbC5tYXRjaCgvXFwuKFxcZCspLykpKXsgXHJcblx0XHRsZXQgZmxvYXRzID0gbWF0Y2hlc1sxXSwgbGVuID0gZmxvYXRzLmxlbmd0aCwgbiA9IC0xLCB4ID0gLTE7XHJcblx0XHRmb3IgKGxldCBpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pe1xyXG5cdFx0XHRpZiAoIU51bWJlcihmbG9hdHNbaV0pKXtcclxuXHRcdFx0XHRpZiAoeCA8IDApIHggPSBpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHggPiAtMSl7XHJcblx0XHRcdFx0biA9IGk7XHJcblx0XHRcdFx0aWYgKHggLSBuID49IHBsYWNlcykgYnJlYWs7XHJcblx0XHRcdFx0ZWxzZSB4ID0gbiA9IC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAobiA+IC0xICYmIHggPiAtMSAmJiAoeCAtIG4gPj0gcGxhY2VzKSkgbnVtID0gK3ZhbC5zdWJzdHJpbmcoMCwgdmFsLmxlbmd0aCAtIGxlbiArIHggKyAxKTtcclxuXHR9XHJcblx0cmV0dXJuIG51bTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSB2YWx1ZSB0byBudW1iZXIgKHNob3J0aGFuZClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWVcclxuICogQHBhcmFtIF9kZWZhdWx0ICBbZGVmYXVsdDogYE5hTmBdIERlZmF1bHQgcmVzdWx0IHdoZW4gcGFyc2UgcmVzdWx0IGlzIGBOYU5gXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIHBhcnNlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9udW0gPSAodmFsdWU6IGFueSwgX2RlZmF1bHQ6IG51bWJlciA9IE5hTik6IG51bWJlciA9PiBfdG9OdW0odmFsdWUsIF9kZWZhdWx0KTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSB2YWx1ZSB0byBpbnRlZ2VyXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgW2RlZmF1bHQ6IGBOYU5gXSBEZWZhdWx0IHJlc3VsdCB3aGVuIHBhcnNlIHJlc3VsdCBpcyBgTmFOYFxyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCBpbnRlZ2VyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2ludCA9ICh2YWx1ZTogYW55LCBfZGVmYXVsdDogbnVtYmVyID0gTmFOKTogbnVtYmVyID0+IHBhcnNlSW50KFN0cmluZyhfdG9OdW0odmFsdWUsIF9kZWZhdWx0KSkpO1xyXG5cclxuLyoqXHJcbiAqIFJvdW5kIG51bWJlciB0byBkZWNpbWFsIHBsYWNlc1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gcGxhY2VzICBbZGVmYXVsdDogYDJgXSBEZWNpbWFsIHBsYWNlc1xyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCByb3VuZGVkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3JvdW5kID0gKHZhbHVlOiBudW1iZXIsIHBsYWNlczogbnVtYmVyID0gMik6IG51bWJlciA9PiB7XHJcblx0aWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuIE5hTjtcclxuXHRsZXQgcCA9IDEwICoqIE1hdGguYWJzKF9pbnQocGxhY2VzLCAyKSk7XHJcblx0cmV0dXJuIE1hdGgucm91bmQoKHZhbHVlICsgTnVtYmVyLkVQU0lMT04pICogcCkgLyBwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgbnVtZXJpYyB2YWx1ZSB0byBjb21tYSB0aG91c2FuZCBkZWxpbWl0ZWQgc3RyaW5nIChpLmUuIGAxMDAwLjQ1NjdgID0+IGAnMSwwMDAuNDUnYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWVcclxuICogQHBhcmFtIHBsYWNlcyAgW2RlZmF1bHQ6IGAyYF0gUm91bmQgZGVjaW1hbCBwbGFjZXNcclxuICogQHBhcmFtIHplcm9zICBFbmFibGUgdHJhaWxpbmcgYCcwJ2AgZGVjaW1hbCBwbGFjZXMgKGkuZS4gYDEwMDBgID0+IGAnMSwwMDAuMDAnYClcclxuICogQHJldHVybnMgYHN0cmluZ2AgQ29tbWEgdGhvdXNhbmQgZGVsaW1pdGVkIG51bWJlciAocmV0dXJucyBgXCJcImAgaWYgcGFyc2VkIGB2YWx1ZWAgaXMgYE5hTmApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2NvbW1hcyA9ICh2YWx1ZTogYW55LCBwbGFjZXM6IG51bWJlciA9IDIsIHplcm9zOiBib29sID0gZmFsc2UpOiBzdHJpbmcgPT4ge1xyXG5cdGNvbnN0IG51bSA9IF9yb3VuZChfbnVtKHZhbHVlKSwgcGxhY2VzID0gX2ludChwbGFjZXMsIDIpKTtcclxuXHRpZiAoaXNOYU4obnVtKSl7XHJcblx0XHRjb25zb2xlLndhcm4oJ1tXQVJOSU5HOiBgX2NvbW1hc2BdIE5hTiB2YWx1ZTonLCB2YWx1ZSk7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cdGxldCB2YWwgPSBTdHJpbmcobnVtKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLCcpO1xyXG5cdGlmIChwbGFjZXMgJiYgemVyb3Mpe1xyXG5cdFx0aWYgKHZhbC5pbmRleE9mKCcuJykgPT09IC0xKSB2YWwgKz0gJy4nLnBhZEVuZChwbGFjZXMgKyAxLCAnMCcpO1xyXG5cdFx0ZWxzZSB2YWwgPSB2YWwuc3BsaXQoJy4nKS5yZWR1Y2U8c3RyaW5nW10+KChwcmV2LCB2LCBpKSA9PiB7XHJcblx0XHRcdHByZXYucHVzaChpID09PSAxICYmIHYubGVuZ3RoIDwgcGxhY2VzID8gdi5wYWRFbmQocGxhY2VzLCAnMCcpIDogdik7XHJcblx0XHRcdHJldHVybiBwcmV2O1xyXG5cdFx0fSwgW10pLmpvaW4oJy4nKTtcclxuXHR9XHJcblx0cmV0dXJuIHZhbDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSByYW5kb20gYGludGVnZXJgIG51bWJlci5cclxuICogXHJcbiAqIEBwYXJhbSBtaW4gIE1pbiBgaW50ZWdlcmBcclxuICogQHBhcmFtIG1heCAgTWF4IGBpbnRlZ2VyYFxyXG4gKiBAcmV0dXJucyAgYG51bWJlcmAgUmFuZG9tIGBpbnRlZ2VyYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9yYW5kID0gKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyIsImltcG9ydCB7IGJvb2wgfSBmcm9tICcuL19jb21tb24nO1xyXG5cclxuLyoqXHJcbiAqIEZsYXR0ZW4gYXJyYXkgcmVjdXJzaXZlbHlcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfZmxhdHRlbiA9ICh2YWx1ZXM6IGFueVtdKTogYW55W10gPT4gdmFsdWVzLmZsYXQoSW5maW5pdHkpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHZhbHVlIGhhcyBwcm9wZXJ0eVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBTZWFyY2ggYG9iamVjdGAgdmFsdWVcclxuICogQHBhcmFtIHByb3AgIEZpbmQgcHJvcGVydHlcclxuICogQHBhcmFtIG93biAgW2RlZmF1bHQ6IGBmYWxzZWBdIEFzIG93biBwcm9wZXJ0eVxyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzUHJvcCA9ICh2YWx1ZTogYW55LCBwcm9wOiBhbnksIG93bjogYm9vbCA9IGZhbHNlKTogYm9vbGVhbiA9PiB7XHJcblx0aWYgKCEoJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZSkpIHJldHVybiBmYWxzZTtcclxuXHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBwcm9wKSB8fCAob3duID8gZmFsc2UgOiBwcm9wIGluIHZhbHVlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBvYmplY3QgaGFzIHByb3BlcnRpZXNcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgU2VhcmNoIGBvYmplY3RgIHZhbHVlXHJcbiAqIEBwYXJhbSBwcm9wcyAgU3ByZWFkIGZpbmQgcHJvcGVydGllc1xyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzUHJvcHMgPSAodmFsdWU6IGFueSwgLi4ucHJvcHM6IGFueSk6IGJvb2xlYW4gPT4gIXByb3BzLmxlbmd0aCA/IGZhbHNlIDogIXByb3BzLmZpbHRlcigoazogYW55KSA9PiAhX2hhc1Byb3AodmFsdWUsIGspKS5sZW5ndGg7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgb2JqZWN0IGhhcyBhbnkgb2YgdGhlIHByb3BlcnRpZXNcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgU2VhcmNoIGBvYmplY3RgIHZhbHVlXHJcbiAqIEBwYXJhbSBwcm9wcyAgU3ByZWFkIGZpbmQgcHJvcGVydGllc1xyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzQW55UHJvcHMgPSAodmFsdWU6IGFueSwgLi4ucHJvcHM6IGFueSk6IGJvb2xlYW4gPT4gIXByb3BzLmxlbmd0aCA/IGZhbHNlIDogISFwcm9wcy5maWx0ZXIoKGs6IGFueSkgPT4gX2hhc1Byb3AodmFsdWUsIGspKS5sZW5ndGg7IiwiaW1wb3J0IHsgX3N0ciB9IGZyb20gJy4vX3N0cmluZyc7XHJcblxyXG4vKipcclxuICogUHJvbWlzZSByZXN1bHQgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9taXNlUmVzdWx0PFRSZXN1bHQ+IHtcclxuXHRzdGF0dXM6ICdyZXNvbHZlZCd8J3JlamVjdGVkJztcclxuXHRpbmRleDogbnVtYmVyO1xyXG5cdHZhbHVlPzogVFJlc3VsdDtcclxuXHRyZWFzb24/OiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJhbGxlbCByZXNvbHZlIGBhcnJheWAgdmFsdWVzIGNhbGxiYWNrIHByb21pc2VzXHJcbiAqIC0gaS5lLiBhd2FpdCBfYXN5bmNBbGw8bnVtYmVyLCBudW1iZXI+KFsxLCAyXSwgYXN5bmMgKG51bSkgPT4gbnVtICogMikgLS0+IFt7c3RhdHVzOiAncmVzb2x2ZWQnLCBpbmRleDogMCwgdmFsdWU6IDJ9LCB7c3RhdHVzOiAncmVzb2x2ZWQnLCBpbmRleDogMSwgdmFsdWU6IDR9XVxyXG4gKiBcclxuICogQHBhcmFtIGFycmF5ICBFbnRyaWVzXHJcbiAqIEBwYXJhbSBjYWxsYmFjayAgRW50cnkgY2FsbGJhY2tcclxuICogQHJldHVybnMgYFByb21pc2U8SVByb21pc2VSZXN1bHQ8VFJlc3VsdD5bXT5gXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2FzeW5jQWxsID0gYXN5bmM8VCBleHRlbmRzIGFueSwgVFJlc3VsdCBleHRlbmRzIGFueT4oYXJyYXk6IFRbXSwgY2FsbGJhY2s/OiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pID0+IFByb21pc2U8VFJlc3VsdD4pOiBQcm9taXNlPElQcm9taXNlUmVzdWx0PFRSZXN1bHQ+W10+ID0+IHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuXHRcdGNvbnN0IF9idWZmZXI6IElQcm9taXNlUmVzdWx0PFRSZXN1bHQ+W10gPSBbXSwgX2xlbiA9IGFycmF5Lmxlbmd0aDtcclxuXHRcdGNvbnN0IF9yZXNvbHZlID0gKCkgPT4gcmVzb2x2ZShfYnVmZmVyKTtcclxuXHRcdGlmICghX2xlbikgcmV0dXJuIF9yZXNvbHZlKCk7XHJcblx0XHRsZXQgY291bnQgPSAwO1xyXG5cdFx0YXJyYXkuZm9yRWFjaCgodiwgaSwgYSkgPT4ge1xyXG5cdFx0XHQoYXN5bmMoKT0+UHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrID8gY2FsbGJhY2sodiwgaSwgYSkgOiB2KSBhcyBQcm9taXNlPFRSZXN1bHQ+KSgpXHJcblx0XHRcdC50aGVuKHZhbHVlID0+IF9idWZmZXIucHVzaCh7c3RhdHVzOiAncmVzb2x2ZWQnLCBpbmRleDogaSwgdmFsdWV9KSlcclxuXHRcdFx0LmNhdGNoKHJlYXNvbiA9PiBfYnVmZmVyLnB1c2goe3N0YXR1czogJ3JlamVjdGVkJywgaW5kZXg6IGksIHJlYXNvbn0pKVxyXG5cdFx0XHQuZmluYWxseSgoKSA9PiArK2NvdW50ID09PSBfbGVuID8gX3Jlc29sdmUoKSA6IHVuZGVmaW5lZCk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgYXN5bmMgaXRlcmFibGUgdmFsdWVzIChpLmUuIGBmb3IgYXdhaXQgKGNvbnN0IHZhbHVlIG9mIF9hc3luY1ZhbHVlcyhhcnJheSkpey4uLn1gKVxyXG4gKiBcclxuICogQHBhcmFtIGFycmF5ICBWYWx1ZXNcclxuICogQHJldHVybnMgQXN5bmMgaXRlcmFibGUgb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2FzeW5jVmFsdWVzID0gPFQgZXh0ZW5kcyBhbnk+KGFycmF5OiBUW10pOiB7XHJcblx0dmFsdWVzOiAoKSA9PiBUW10sXHJcblx0c2l6ZTogKCkgPT4gbnVtYmVyO1xyXG5cdGVhY2g6IChjYWxsYmFjazogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgX2JyZWFrOiAoKT0+dm9pZCk9PlByb21pc2U8YW55PikgPT4gUHJvbWlzZTx2b2lkPjtcclxuXHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiAoKSA9PiB7XHJcblx0XHRuZXh0OiAoKSA9PiBQcm9taXNlPHtkb25lOiBib29sZWFuOyB2YWx1ZTogVH0+O1xyXG5cdH1cclxufSA9PiAoe1xyXG5cdHZhbHVlczogKCkgPT4gYXJyYXksXHJcblx0c2l6ZTogKCkgPT4gYXJyYXkubGVuZ3RoLFxyXG5cdGFzeW5jIGVhY2goY2FsbGJhY2s6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIF9icmVhazogKCk9PnZvaWQpPT5Qcm9taXNlPGFueT4pOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGxldCBzZWxmID0gdGhpcywgY2FuY2VsID0gZmFsc2UsIGluZGV4ID0gLTEsIF9icmVhayA9ICgpID0+IHtcclxuXHRcdFx0Y2FuY2VsID0gdHJ1ZTtcclxuXHRcdH07XHJcblx0XHRmb3IgYXdhaXQgKGNvbnN0IHZhbHVlIG9mIHNlbGYpe1xyXG5cdFx0XHRpbmRleCArKztcclxuXHRcdFx0aWYgKGNhbmNlbCkgYnJlYWs7XHJcblx0XHRcdGF3YWl0IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgc2VsZi5zaXplKCksIF9icmVhayk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCl7XHJcblx0XHRsZXQgaW5kZXggPSAwO1xyXG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRhc3luYyBuZXh0KCk6IFByb21pc2U8e2RvbmU6IGJvb2xlYW47IHZhbHVlOiBUfT4ge1xyXG5cdFx0XHRcdGxldCB2YWx1ZTogVCA9IHVuZGVmaW5lZCBhcyBULCBsZW5ndGggPSB0aGF0LnNpemUoKTtcclxuXHRcdFx0XHRpZiAoaW5kZXggPj0gbGVuZ3RoKSByZXR1cm4ge2RvbmU6IHRydWUsIHZhbHVlfTtcclxuXHRcdFx0XHR2YWx1ZSA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShhcnJheVtpbmRleF0pO1xyXG5cdFx0XHRcdGluZGV4ICsrO1xyXG5cdFx0XHRcdHJldHVybiB7ZG9uZTogZmFsc2UsIHZhbHVlfTtcclxuXHRcdFx0fSxcclxuXHRcdH07XHJcblx0fSxcclxufSk7XHJcblxyXG4vKipcclxuICogRGVsYXkgcHJvbWlzZVxyXG4gKiBcclxuICogQHBhcmFtIHRpbWVvdXQgIERlbGF5IG1pbGxpc2Vjb25kc1xyXG4gKiBAcmV0dXJucyBgUHJvbWlzZTxudW1iZXI+YCB0aW1lb3V0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3NsZWVwID0gYXN5bmMgKHRpbWVvdXQ6IG51bWJlcik6IFByb21pc2U8bnVtYmVyPiA9PiB7XHJcblx0dGltZW91dCA9ICFpc05hTih0aW1lb3V0KSAmJiB0aW1lb3V0ID49IDAgPyB0aW1lb3V0IDogMFxyXG5cdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh0aW1lb3V0KSwgdGltZW91dCkpO1xyXG59OyIsIi8qKlxyXG4gKiBRdWV1ZSBvYmplY3QgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElRdWV1ZTxUPiB7XHJcblx0Y291bnQ6IG51bWJlcjtcclxuXHRsZW5ndGg6IG51bWJlcjtcclxuXHRpc0VtcHR5OiBib29sZWFuO1xyXG5cdGVucXVldWUodmFsdWU6IFQpOiB2b2lkO1xyXG5cdGRlcXVldWUoKTogVHx1bmRlZmluZWQ7XHJcblx0cGVlaygpOiBUfHVuZGVmaW5lZDtcclxuXHR2YWx1ZXMoKTogVFtdO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIHF1ZXVlIG9iamVjdFxyXG4gKiBcclxuICogQHJldHVybnMgYElRdWV1ZWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcXVldWUgPSA8VCBleHRlbmRzIGFueT4oKTogSVF1ZXVlPFQ+ID0+IHtcclxuXHRjb25zdCBpdGVtczoge1trZXk6IG51bWJlcl06IFR9ID0ge307XHJcblx0bGV0IGhlYWQ6IG51bWJlciA9IDA7XHJcblx0bGV0IHRhaWw6IG51bWJlciA9IDA7XHJcblx0cmV0dXJuIHtcclxuXHRcdGdldCBjb3VudCgpOiBudW1iZXIge1xyXG5cdFx0XHRyZXR1cm4gdGFpbDtcclxuXHRcdH0sXHJcblx0XHRnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcblx0XHRcdHJldHVybiB0YWlsIC0gaGVhZDtcclxuXHRcdH0sXHJcblx0XHRnZXQgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMubGVuZ3RoID09PSAwO1xyXG5cdFx0fSxcclxuXHRcdGVucXVldWUodmFsdWU6IFQpOiB2b2lkIHtcclxuXHRcdFx0aXRlbXNbdGFpbF0gPSB2YWx1ZTtcclxuXHRcdFx0dGFpbCArKztcclxuXHRcdH0sXHJcblx0XHRkZXF1ZXVlKCk6IFR8dW5kZWZpbmVkIHtcclxuXHRcdFx0Y29uc3QgaXRlbSA9IGl0ZW1zW2hlYWRdO1xyXG5cdFx0XHRkZWxldGUgaXRlbXNbaGVhZF07XHJcblx0XHRcdGhlYWQgKys7XHJcblx0XHRcdHJldHVybiBpdGVtO1xyXG5cdFx0fSxcclxuXHRcdHBlZWsoKTogVHx1bmRlZmluZWQge1xyXG5cdFx0XHRyZXR1cm4gaXRlbXNbaGVhZF07XHJcblx0XHR9LFxyXG5cdFx0dmFsdWVzKCk6IFRbXSB7XHJcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzKGl0ZW1zKTtcclxuXHRcdH0sXHJcblx0fTtcclxufTsiLCIvKipcclxuICogU29ydCBkaXJlY3Rpb24gdHlwZVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU29ydERpcmVjdGlvbiA9IDF8LTF8J2FzYyd8J2Rlc2MnfCdhc2NlbmRpbmcnfCdkZXNjZW5kaW5nJztcclxuXHJcbi8qKlxyXG4gKiBTb3J0IG9yZGVyIHR5cGVcclxuICovXHJcbmV4cG9ydCB0eXBlIFNvcnRPcmRlciA9IFNvcnREaXJlY3Rpb258e1trZXk6IHN0cmluZ106IFNvcnREaXJlY3Rpb259O1xyXG5cclxuLyoqXHJcbiAqIFNvcnQgYXJyYXkgdmFsdWVzXHJcbiAqIFxyXG4gKiBAcGFyYW0gYXJyYXlcclxuICogQHBhcmFtIHNvcnRcclxuICogQHJldHVybnMgU29ydGVkIGBhcnJheWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc29ydFZhbHVlcyA9IDxUIGV4dGVuZHMgYW55PihhcnJheTogVFtdLCBzb3J0PzogU29ydE9yZGVyKTogVFtdID0+IHtcclxuXHRjb25zdCBfY29tcGFyZSA9IChhOiBhbnksIGI6IGFueSk6IG51bWJlciA9PiB7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBhICYmICdzdHJpbmcnID09PSB0eXBlb2YgYiAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgYT8ubG9jYWxlQ29tcGFyZSkgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcclxuXHRcdHJldHVybiBhID4gYiA/IDEgOiAoYSA8IGIgPyAtMSA6IDApO1xyXG5cdH07XHJcblx0Y29uc3QgX2RpcmVjdGlvbiA9ICh2YWw/OiBTb3J0RGlyZWN0aW9uKTogbnVtYmVyID0+IHtcclxuXHRcdGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHZhbCAmJiBbMSwgLTFdLmluY2x1ZGVzKHZhbCkpIHJldHVybiB2YWw7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWwpe1xyXG5cdFx0XHRpZiAodmFsLnN0YXJ0c1dpdGgoJ2FzYycpKSByZXR1cm4gMTtcclxuXHRcdFx0aWYgKHZhbC5zdGFydHNXaXRoKCdkZXNjJykpIHJldHVybiAtMTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAxO1xyXG5cdH07XHJcblx0Y29uc3QgX21ldGhvZCA9ICgpOiAoKGE6IGFueSwgYjogYW55KT0+bnVtYmVyKSA9PiB7XHJcblx0XHRpZiAoT2JqZWN0KHNvcnQpID09PSBzb3J0KXtcclxuXHRcdFx0Y29uc3QgX2VudHJpZXMgPSBPYmplY3QuZW50cmllcyhzb3J0IGFzIHtba2V5OiBzdHJpbmddOiBTb3J0RGlyZWN0aW9ufSk7XHJcblx0XHRcdGlmIChfZW50cmllcy5sZW5ndGgpIHJldHVybiAoYSwgYikgPT4ge1xyXG5cdFx0XHRcdGxldCBpLCByZXN1bHQ7XHJcblx0XHRcdFx0Zm9yIChyZXN1bHQgPSAwLCBpID0gMDsgcmVzdWx0ID09PSAwIHx8IGkgPCBfZW50cmllcy5sZW5ndGg7IGkgKyspe1xyXG5cdFx0XHRcdFx0Y29uc3QgW2tleSwgdmFsXSA9IF9lbnRyaWVzW2ldO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gX2NvbXBhcmUoYT8uW2tleV0sIGI/LltrZXldKSAqIF9kaXJlY3Rpb24odmFsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAoYSwgYikgPT4gX2NvbXBhcmUoYSwgYikgKiBfZGlyZWN0aW9uKHNvcnQgYXMgU29ydERpcmVjdGlvbik7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyYXkuc29ydChfbWV0aG9kKCkpO1xyXG59OyIsImltcG9ydCB7IGJvb2wgfSBmcm9tICcuL19jb21tb24nO1xyXG5pbXBvcnQgeyBfanNvblN0cmluZ2lmeSB9IGZyb20gJy4vX2pzb24nO1xyXG5cclxuLyoqXHJcbiAqIEdldCB1bmlxdWUgc3RyaW5nIG9mIHJhbmRvbSBjaGFyYWN0ZXJzIChpbiBsb3dlcmNhc2UpXHJcbiAqIFxyXG4gKiBAcGFyYW0gbGVuZ3RoICAobWF4IDY0KVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF91dWlkKGxlbmd0aD86IG51bWJlcik6IHN0cmluZ3tcclxuXHRjb25zdCBfdWlkID0gKCkgPT4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKS50b1N0cmluZygzNik7XHJcblx0aWYgKCEobGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIDw9IDY0KSkgcmV0dXJuIF91aWQoKTtcclxuXHRsZXQgYnVmZmVyID0gJyc7XHJcblx0d2hpbGUgKGJ1ZmZlci5sZW5ndGggPCBsZW5ndGgpIGJ1ZmZlciArPSBfdWlkKCk7XHJcblx0cmV0dXJuIGJ1ZmZlci5zdWJzdHJpbmcoMCwgbGVuZ3RoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNhZmVseSBgc3RyaW5nYCBjYXN0IHZhbHVlXHJcbiAqIC0gUmV0dXJucyBJU08gZm9ybWF0IHRpbWVzdGFtcCBmb3IgdmFsaWQgRGF0ZSB2YWx1ZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBDYXN0IHZhbHVlXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgW2RlZmF1bHQ6IGAnJ2BdIERlZmF1bHQgcmVzdWx0IG9uIGZhaWx1cmVcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyaW5nID0gKHZhbHVlOiBhbnksIF9kZWZhdWx0OiBzdHJpbmcgPSAnJyk6IHN0cmluZyA9PiB7XHJcblx0bGV0IHZhbDogc3RyaW5nID0gJyc7XHJcblx0dHJ5IHtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSkpIHZhbCA9IHZhbHVlLnRvSVNPU3RyaW5nKCk7XHJcblx0XHRlbHNlIHZhbCA9IFN0cmluZyh2YWx1ZSk7XHJcblx0fVxyXG5cdGNhdGNoIChlKXtcclxuXHRcdHZhbCA9IF9kZWZhdWx0O1xyXG5cdH1cclxuXHRyZXR1cm4gdmFsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNhZmVseSBgc3RyaW5nYCBjYXN0IHZhbHVlIGlmIHBvc3NpYmxlLlxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBmYWxzZXxzdHJpbmdgIENhc3QgcmVzdWx0IG9yIGBmYWxzZWAgb24gZmFpbHVyZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zdHJpbmdhYmxlID0gKHZhbHVlOiBhbnkpOiBmYWxzZXxzdHJpbmcgPT4ge1xyXG5cdGNvbnN0IGZhaWxlZCA9IGAhJHtEYXRlLm5vdygpfSFgLCB2YWwgPSBfc3RyaW5nKHZhbHVlLCBmYWlsZWQpLCBwYXR0ZXJuID0gL1xcW29iamVjdCBcXHcrXFxdLztcclxuXHRyZXR1cm4gISh2YWwgPT09IGZhaWxlZCB8fCBwYXR0ZXJuLnRlc3QodmFsKSkgPyB2YWwgOiBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHZhbHVlIHRvIGBzdHJpbmdgIGVxdWl2YWxlbnRcclxuICogXHJcbiAqIC0gUmV0dXJucyAnJyBmb3IgYG51bGxgIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZVxyXG4gKiAtIFdoZW4gYHN0cmluZ2lmeWAgaXMgYGZhbHNlYCwgcmV0dXJucyAnJyBmb3IgYGFycmF5YCBvciBgb2JqZWN0YCB2YWx1ZSB0aGF0IGRvZXMgbm90IGltcGxlbWVudCBgdG9TdHJpbmcoKWAgbWV0aG9kXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHBhcmFtIHRyaW0gIFRyaW0gcmVzdWx0XHJcbiAqIEBwYXJhbSBzdHJpbmdpZnkgIFN0cmluZ2lmeSBgYXJyYXlgIG9yIGBvYmplY3RgIHZhbHVlIHRoYXQgZG9lcyBub3QgaW1wbGVtZW50IGB0b1N0cmluZygpYCBtZXRob2RcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyID0gKHZhbHVlOiBhbnksIHRyaW06IGJvb2xlYW4gPSBmYWxzZSwgc3RyaW5naWZ5OiBib29sZWFuID0gZmFsc2UpOiBzdHJpbmcgPT4ge1xyXG5cdGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHZhbHVlKXtcclxuXHRcdGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XHJcblx0XHRlbHNlIGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbHVlKXtcclxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gc3RyaW5naWZ5ID8gX2pzb25TdHJpbmdpZnkodmFsdWUpIDogJyc7XHJcblx0XHRcdGNvbnN0IHRtcCA9IF9zdHJpbmdhYmxlKHZhbHVlKTtcclxuXHRcdFx0aWYgKHRtcCA9PT0gZmFsc2UpIHJldHVybiBzdHJpbmdpZnkgPyBfanNvblN0cmluZ2lmeSh2YWx1ZSkgOiAnJztcclxuXHRcdFx0ZWxzZSB2YWx1ZSA9IHRtcDtcclxuXHRcdH1cclxuXHRcdGVsc2UgdmFsdWUgPSBfc3RyaW5nKHZhbHVlKTtcclxuXHR9XHJcblx0cmV0dXJuIHRyaW0gPyB2YWx1ZS50cmltKCkgOiB2YWx1ZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBOb3JtYWxpemUgc3RyaW5nIGJ5IHJlbW92aW5nIGFjY2VudHMgKGkuZS4gXCJBbcOpbGllXCIgPT4gXCJBbWVsaWVcIilcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zdHJOb3JtID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4gX3N0cih2YWx1ZSkubm9ybWFsaXplKCdORkQnKS5yZXBsYWNlKC9bXFx1MDMwMC1cXHUwMzZmXS9nLCAnJyk7XHJcblxyXG4vKipcclxuICogRXNjYXBlIHJlZ2V4IG9wZXJhdG9ycyBmcm9tIHN0cmluZ1xyXG4gKiAtIGkuZS4gYCdcXFxcc1xcblxcclxcdFxcdlxceDAwfl8hQCMkJV4mKigpW11cXFxcLywuP1wiXFwnOjt7fXw8Pj0rLSdgID0+IGAnXFxcXHNcXG5cXHJcXHRcXHZcXHgwMFxcc35fIUAjXFxcXCQlXFxcXF4mXFxcXCpcXFxcKFxcXFwpXFxcXFtcXFxcXVxcXFxcXFxcLyxcXFxcLlxcXFw/XCJcXCc6O1xcXFx7XFxcXH1cXFxcfDw+PVxcXFwrLSdgXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcmVnRXNjYXBlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4gX3N0cih2YWx1ZSkucmVwbGFjZSgvWy4qKz9eJHt9KCl8W1xcXVxcXFxdL2csICdcXFxcJCYnKTtcclxuXHJcbi8qKlxyXG4gKiBFc2NhcGUgc3RyaW5nIHNwZWNpYWwgY2hhcmFjdGVyc1xyXG4gKiAtIGkuZS4gYCdcXHJcXG5cXHRcXGZcXHZcXHgwMC1cXHUwMGYzLVxcdTEyMzQtXFx4YjQtXFx1MDAwYi0vXFxcXCdgID0+IGAnXFxcXHJcXFxcblxcXFx0XFxcXGZcXFxcdlxcXFx4MDAtw7Mt4Yi0LcK0LVxcXFx2LS9cXFxcXFxcXCdgXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyRXNjYXBlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4gSlNPTi5zdHJpbmdpZnkoX3N0cih2YWx1ZSkpXHJcbi5yZXBsYWNlKC9cXFxcdShbXFxkXFx3XXs0fSkvZywgKG0sIHMpID0+IHtcclxuXHRjb25zdCBoID0gcGFyc2VJbnQocywgMTYpO1xyXG5cdHJldHVybiBoID4gMjU1ID8gbSA6ICdcXFxcJyArIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcuZnJvbUNoYXJDb2RlKGgpKS5yZXBsYWNlKCclJywgJ3gnKS5yZXBsYWNlKCd4MEInLCAndicpO1xyXG59KVxyXG4ucmVwbGFjZSgvXlwifFwiJC9nLCAnJylcclxuLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKTtcclxuXHJcbi8qKlxyXG4gKiBSZWdleCBzdHJpbmcgdHJpbSBjaGFyYWN0ZXJzXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFRyaW0gdmFsdWVcclxuICogQHBhcmFtIGNoYXJzICBTdHJpcCBjaGFyYWN0ZXJzIFtkZWZhdWx0OiBgJyBcXG5cXHJcXHRcXGZcXHZcXHgwMCdgXSAtIHVzZSBgJ3tkZWZhdWx0fSdgIHRvIGluY2x1ZGUgZGVmYXVsdHMgKGkuZSBgJy17ZGVmYXVsdHN9J2AgPT0gYCctIFxcblxcclxcdFxcZlxcdlxceDAwJ2ApXHJcbiAqIEBwYXJhbSBybCAgVHJpbSBtb2RlIChgJydgID0+IChkZWZhdWx0KSB0cmltIHJpZ2h0ICYgbGVmdCwgYCdyJ3wncmlnaHQnYCA9PiB0cmltIHJpZ2h0LCBgJ2wnfCdsZWZ0J2AgPT4gdHJpbSBsZWZ0KVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90cmltID0gKHZhbHVlOiBhbnksIGNoYXJzOiBzdHJpbmcgPSAnIFxcclxcblxcdFxcZlxcdlxceDAwJywgcmw6ICcnfCdyJ3wnbCd8J3JpZ2h0J3wnbGVmdCcgPSAnJyk6IHN0cmluZyA9PiB7XHJcblx0dmFsdWUgPSBfc3RyKHZhbHVlKTtcclxuXHRpZiAoIWNoYXJzLmxlbmd0aCkgcmV0dXJuIHZhbHVlO1xyXG5cdGNoYXJzID0gY2hhcnMucmVwbGFjZSgvXFx7ZGVmYXVsdFxcfS8sICcgXFxyXFxuXFx0XFxmXFx2XFx4MDAnKTtcclxuXHRsZXQgZDEgPSAwLCBkMiA9IDA7XHJcblx0bGV0IF9jaGFyczogc3RyaW5nW10gPSBbLi4ubmV3IFNldChbLi4uY2hhcnNdKV0uZmlsdGVyKHYgPT4ge1xyXG5cdFx0aWYgKHYgPT09ICctJyl7XHJcblx0XHRcdGQxID0gMTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHYgPT09ICdfJyl7XHJcblx0XHRcdGQyID0gMTtcclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSk7XHJcblx0aWYgKGQyKSBfY2hhcnMudW5zaGlmdCgnXycpO1xyXG5cdGlmIChkMSkgX2NoYXJzLnVuc2hpZnQoJy0nKTtcclxuXHRsZXQgcCA9IGBbJHtfcmVnRXNjYXBlKF9jaGFycy5qb2luKCcnKSl9XSpgLCBwYXR0ZXJuID0gYF4ke3B9fCR7cH0kYDtcclxuXHRpZiAoWydsJywgJ2xlZnQnXS5pbmNsdWRlcyhybCkpIHBhdHRlcm4gPSBgXiR7cH1gO1xyXG5cdGVsc2UgaWYgKFsncicsICdyaWdodCddLmluY2x1ZGVzKHJsKSkgcGF0dGVybiA9IGAke3B9JGA7XHJcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChwYXR0ZXJuLCAnZ3MnKSwgJycpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlZ2V4IHN0cmluZyB0cmltIGxlYWRpbmcgY2hhcmFjdGVycyAobGVmdClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSBUcmltIHZhbHVlXHJcbiAqIEBwYXJhbSBjaGFycyBTdHJpcCBjaGFyYWN0ZXJzIFtkZWZhdWx0OiBgJyBcXG5cXHJcXHRcXGZcXHZcXHgwMCdgXSAtIHVzZSBgJ3tkZWZhdWx0fSdgIHRvIGluY2x1ZGUgZGVmYXVsdHMgKGkuZSBgJy17ZGVmYXVsdHN9J2AgPT0gYCctIFxcblxcclxcdFxcZlxcdlxceDAwJ2ApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2x0cmltID0gKHZhbHVlOiBhbnksIGNoYXJzOiBzdHJpbmcgPSAnIFxcclxcblxcdFxcZlxcdlxceDAwJyk6IHN0cmluZyA9PiBfdHJpbSh2YWx1ZSwgY2hhcnMsICdsZWZ0Jyk7XHJcblxyXG4vKipcclxuICogUmVnZXggc3RyaW5nIHRyaW0gdHJhaWxpbmcgY2hhcmFjdGVycyAocmlnaHQpXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgVHJpbSB2YWx1ZVxyXG4gKiBAcGFyYW0gY2hhcnMgU3RyaXAgY2hhcmFjdGVycyBbZGVmYXVsdDogYCcgXFxuXFxyXFx0XFxmXFx2XFx4MDAnYF0gLSB1c2UgYCd7ZGVmYXVsdH0nYCB0byBpbmNsdWRlIGRlZmF1bHRzIChpLmUgYCcte2RlZmF1bHRzfSdgID09IGAnLSBcXG5cXHJcXHRcXGZcXHZcXHgwMCdgKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9ydHJpbSA9ICh2YWx1ZTogYW55LCBjaGFyczogc3RyaW5nID0gJyBcXHJcXG5cXHRcXGZcXHZcXHgwMCcpOiBzdHJpbmcgPT4gX3RyaW0odmFsdWUsIGNoYXJzLCAncmlnaHQnKTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHN0cmluZyB0byB0aXRsZSBjYXNlIChpLmUuIFwiaGVMTG8gd29SbGRcIiA9PiBcIkhlbGxvIFdvcmxkXCIpXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHN0cmluZ1xyXG4gKiBAcGFyYW0ga2VlcENhc2UgIERpc2FibGUgbG93ZXJjYXNpbmcgdW5jYXBpdGFsaXplZCBjaGFyYWN0ZXJzXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3RpdGxlQ2FzZSA9ICh2YWx1ZTogYW55LCBrZWVwQ2FzZTogYm9vbCA9IGZhbHNlKTogc3RyaW5nID0+IF9zdHIodmFsdWUpXHJcbi5yZXBsYWNlKC9cXHdcXFMqL2csIG1hdGNoID0+IG1hdGNoWzBdLnRvVXBwZXJDYXNlKClcclxuKyAoa2VlcENhc2UgPyBtYXRjaC5zdWJzdHJpbmcoMSkgOiBtYXRjaC5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSkpO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgc3RyaW5nIHRvIHNlbnRlbmNlIGNhc2VcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2Ugc3RyaW5nXHJcbiAqIEBwYXJhbSBrZWVwQ2FzZSAgRGlzYWJsZSBsb3dlcmNhc2luZyB1bmNhcGl0YWxpemVkIGNoYXJhY3RlcnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc2VudGVuY2VDYXNlID0gKHZhbHVlOiBhbnksIGtlZXBDYXNlOiBib29sID0gZmFsc2UpOiBzdHJpbmcgPT4gX3N0cih2YWx1ZSlcclxuLnNwbGl0KC8oKD86XFwufFxcP3whKVxccyopLylcclxuLm1hcCh2YWwgPT4ge1xyXG4gIGlmICh2YWwubGVuZ3RoKXtcclxuICAgIGNvbnN0IGZpcnN0ID0gdmFsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgY29uc3QgcmVzdCA9IHZhbC5sZW5ndGggPiAxID8gdmFsLnNsaWNlKDEpIDogJyc7XHJcbiAgICB2YWwgPSBmaXJzdCArIChrZWVwQ2FzZSA/IHJlc3QgOiByZXN0LnRvTG93ZXJDYXNlKCkpO1xyXG4gIH1cclxuICByZXR1cm4gdmFsO1xyXG59KVxyXG4uam9pbignJyk7XHJcblxyXG4vKipcclxuICogQ29udmVydCB2YWx1ZSB0byBzbmFrZSBjYXNlIChpLmUuICdIZWxsb1dvcmxkJyA9PiAnaGVsbG9fd29ybGQnKVxyXG4gKiAtIGFjY2VudHMgYXJlIG5vcm1hbGl6ZWQgKGkuZS4gXCJUZXN0IEFtw6lsaWVcIiA9PiBcInRlc3RfYW1lbGllXCIpXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHN0cmluZ1xyXG4gKiBAcGFyYW0gdHJpbVRyYWlsaW5nICBUcmltIHRyYWlsaW5nIFwiX1wiIChgZmFsc2VgID0gKGRlZmF1bHQpIGRpc2FibGVkLCBgdHJ1ZWAgPT4gdHJpbSByaWdodCAmIGxlZnQsIGAncid8J3JpZ2h0J2AgPT4gdHJpbSByaWdodCwgYCdsJ3wnbGVmdCdgID0+IHRyaW0gbGVmdClcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc25ha2VDYXNlID0gKHZhbHVlOiBhbnksIHRyaW1UcmFpbGluZzogYm9vbGVhbnwnbCd8J2xlZnQnfCdyJ3wncmlnaHQnID0gZmFsc2UpOiBzdHJpbmcgPT4ge1xyXG5cdGxldCByZXMgPSBfc3RyTm9ybShfdHJpbSh2YWx1ZSkpXHJcblx0LnJlcGxhY2UoL1tBLVpdKy9nLCBtID0+IG1bMF0udG9VcHBlckNhc2UoKSArIG0uc3Vic3RyaW5nKDEpLnRvTG93ZXJDYXNlKCkpXHJcblx0LnJlcGxhY2UoL1xcVysvZywgJyAnKVxyXG5cdC5zcGxpdCgvIHxcXEIoPz1bQS1aXSkvKS5qb2luKCdfJykucmVwbGFjZSgvXysvZywgJ18nKS50b0xvd2VyQ2FzZSgpO1xyXG5cdGlmIChyZXMgPT09ICdfJykgcmV0dXJuICcnO1xyXG5cdGlmICgvXl98XyQvLnRlc3QocmVzKSAmJiB0cmltVHJhaWxpbmcpIHJlcyA9IF90cmltKHJlcywgJ18nLCAoWydsJywnbGVmdCcsJ3InLCdyaWdodCddLmluY2x1ZGVzKHRyaW1UcmFpbGluZyBhcyBhbnkpID8gdHJpbVRyYWlsaW5nIDogJycpIGFzIGFueSk7XHJcblx0cmV0dXJuIHJlcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHZhbHVlIHRvIHNsdWcgY2FzZSAoaS5lLiAnSGVsbG9Xb3JsZCcgPT4gJ2hlbGxvLXdvcmxkJylcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2Ugc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3NsdWdDYXNlID0gKHZhbHVlOiBhbnksIHRyaW1UcmFpbGluZzogYm9vbGVhbnwnbCd8J2xlZnQnfCdyJ3wncmlnaHQnID0gZmFsc2UpOiBzdHJpbmcgPT4gX3NuYWtlQ2FzZSh2YWx1ZSwgdHJpbVRyYWlsaW5nKS5yZXBsYWNlKC9fL2csICctJyk7XHJcblxyXG4vKipcclxuICogQ29udmVydCB2YWx1ZSB0byBzdHVkbHkgY2FzZSAoaS5lLiAnaGVsbG8td29ybGQnID0+ICdIZWxsb1dvcmxkJylcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2Ugc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3N0dWRseUNhc2UgPSAodmFsdWU6IGFueSk6IHN0cmluZyA9PiBfc25ha2VDYXNlKHZhbHVlKVxyXG4uc3BsaXQoJ18nKVxyXG4uZmlsdGVyKHYgPT4gdi5sZW5ndGgpXHJcbi5tYXAod29yZCA9PiB3b3JkWzBdLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpKVxyXG4uam9pbignJyk7XHJcblxyXG4vKipcclxuICogQ29udmVydCB2YWx1ZSB0byBjYW1lbCBjYXNlIChpLmUuICdoZWxsby13b3JsZCcgPT4gJ2hlbGxvV29ybGQnKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBjb25zdCBfY2FtZWxDYXNlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4ge1xyXG5cdGxldCByZXMgPSBfc3R1ZGx5Q2FzZSh2YWx1ZSk7XHJcblx0aWYgKHJlcy5sZW5ndGgpIHJlcyA9IHJlc1swXS50b0xvd2VyQ2FzZSgpICsgcmVzLnN1YnN0cmluZygxKTtcclxuXHRyZXR1cm4gcmVzO1xyXG59OyIsImltcG9ydCB7IF9pc0RhdGUsIF90aW1lc3RhbXAgfSBmcm9tICcuL19kYXRldGltZSc7XHJcbmltcG9ydCB7IF9zdHIsIF9zdHJpbmcsIF9zdHJpbmdhYmxlIH0gZnJvbSAnLi9fc3RyaW5nJztcclxuaW1wb3J0IHsgX2pzb25TdHJpbmdpZnksIF9qc29uQ2xvbmUgfSBmcm9tICcuL19qc29uJztcclxuXHJcbi8qKlxyXG4gKiBUZXJtIGZvcm1hdCByZXN1bHQgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElUZXJtRm9ybWF0IHtcclxuXHRmb3JtYXQ6IChmb3JtYXRzOiBzdHJpbmd8c3RyaW5nW10sIC4uLmFyZ3M6IGFueVtdKSA9PiBJVGVybUZvcm1hdDtcclxuXHR2YWx1ZXM6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55W107XHJcblx0Y2xlYXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gYW55W107XHJcblx0bG9nOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xyXG5cdGRlYnVnOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xyXG5cdHdhcm46IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHZvaWQ7XHJcblx0ZXJyb3I6IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHZvaWQ7XHJcblx0aW5mbzogKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRlcm0gYGNvbnNvbGUuKmAgbG9nZ2VyXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGVybVxyXG57XHJcblx0LyoqXHJcblx0ICogRGlzYWJsZSBmb3JtYXRzXHJcblx0ICovXHJcblx0c3RhdGljIERJU0FCTEVEOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRleHQgZm9ybWF0c1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBGT1JNQVRTOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfSA9IHtcclxuXHRcdHJlc2V0OiAnXFx4MWJbMG0nLFxyXG5cdFx0YnJpZ2h0OiAnXFx4MWJbMW0nLFxyXG5cdFx0ZGltOiAnXFx4MWJbMm0nLFxyXG5cdFx0dW5kZXJzY29yZTogJ1xceDFiWzRtJyxcclxuXHRcdGJsaW5rOiAnXFx4MWJbNW0nLFxyXG5cdFx0cmV2ZXJzZTogJ1xceDFiWzdtJyxcclxuXHRcdGhpZGRlbjogJ1xceDFiWzhtJyxcclxuXHRcdGZnX2JsYWNrOiAnXFx4MWJbMzBtJyxcclxuXHRcdGZnX3JlZDogJ1xceDFiWzMxbScsXHJcblx0XHRmZ19ncmVlbjogJ1xceDFiWzMybScsXHJcblx0XHRmZ195ZWxsb3c6ICdcXHgxYlszM20nLFxyXG5cdFx0ZmdfYmx1ZTogJ1xceDFiWzM0bScsXHJcblx0XHRmZ19tYWdlbnRhOiAnXFx4MWJbMzVtJyxcclxuXHRcdGZnX2N5YW46ICdcXHgxYlszNm0nLFxyXG5cdFx0Zmdfd2hpdGU6ICdcXHgxYlszN20nLFxyXG5cdFx0ZmdfZ3JheTogJ1xceDFiWzkwbScsXHJcblx0XHRiZ19ibGFjazogJ1xceDFiWzQwbScsXHJcblx0XHRiZ19yZWQ6ICdcXHgxYls0MW0nLFxyXG5cdFx0YmdfZ3JlZW46ICdcXHgxYls0Mm0nLFxyXG5cdFx0YmdfeWVsbG93OiAnXFx4MWJbNDNtJyxcclxuXHRcdGJnX2JsdWU6ICdcXHgxYls0NG0nLFxyXG5cdFx0YmdfbWFnZW50YTogJ1xceDFiWzQ1bScsXHJcblx0XHRiZ19jeWFuOiAnXFx4MWJbNDZtJyxcclxuXHRcdGJnX3doaXRlOiAnXFx4MWJbNDdtJyxcclxuXHRcdGJnX2dyYXk6ICdcXHgxYlsxMDBtJyxcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBQcmVkZWZpbmVkIHRleHQgZm9ybWF0c1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBQUkVERUZJTkVEX0ZPUk1BVFM6IHtba2V5OiBzdHJpbmddOiBzdHJpbmd8c3RyaW5nW119ID0ge1xyXG5cdFx0bG9nOiAnZmdfd2hpdGUnLFxyXG5cdFx0ZGVidWc6ICdmZ19ncmF5JyxcclxuXHRcdGVycm9yOiAnZmdfcmVkJyxcclxuXHRcdHdhcm46ICdmZ195ZWxsb3cnLFxyXG5cdFx0aW5mbzogJ2ZnX2N5YW4nLFxyXG5cdFx0c3VjY2VzczogJ2ZnX2dyZWVuJyxcclxuXHRcdGJnX2xvZzogWydiZ19ibHVlJywgJ2ZnX3doaXRlJ10sXHJcblx0XHRiZ19kZWJ1ZzogWydiZ19ncmF5JywgJ2ZnX2JsYWNrJ10sXHJcblx0XHRiZ19lcnJvcjogWydiZ19yZWQnLCAnZmdfd2hpdGUnXSxcclxuXHRcdGJnX3dhcm46IFsnYmdfeWVsbG93JywgJ2ZnX2JsYWNrJ10sXHJcblx0XHRiZ19pbmZvOiBbJ2JnX2N5YW4nLCAnZmdfYmxhY2snXSxcclxuXHRcdGJnX3N1Y2Nlc3M6IFsnYmdfZ3JlZW4nLCAnZmdfd2hpdGUnXSxcclxuXHR9O1xyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgc3RhbmRhcmRpemVkIHRleHQgZm9ybWF0c1xyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBmb3JtYXRzIFRleHQgZm9ybWF0KHMpXHJcblx0ICogQHJldHVybnMgYHN0cmluZ1tdYFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JtYXRzKGZvcm1hdHM6IHN0cmluZ3xzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuXHRcdGNvbnN0IEZNID0gdGhpcy5GT1JNQVRTO1xyXG5cdFx0Y29uc3QgUEYgPSB0aGlzLlBSRURFRklORURfRk9STUFUUztcclxuXHRcdGNvbnN0IF9mb3JtYXRzOiBzdHJpbmdbXSA9IEFycmF5LmlzQXJyYXkoZm9ybWF0cykgPyBmb3JtYXRzIDogJ3N0cmluZycgPT09IHR5cGVvZiBmb3JtYXRzID8gW2Zvcm1hdHNdIDogW107XHJcblx0XHRyZXR1cm4gX2Zvcm1hdHMucmVkdWNlPHN0cmluZ1tdPigocHJldiwgdmFsKSA9PiB7XHJcblx0XHRcdGlmICgodmFsID0gdmFsLnRyaW0oKS50b0xvd2VyQ2FzZSgpKSAmJiB2YWwgIT09ICdyZXNldCcpe1xyXG5cdFx0XHRcdGxldCB0bXAgPSB2YWwgPSB2YWwucmVwbGFjZSgvW15hLXowLTldL2lnLCAnXycpLnJlcGxhY2UoJ2dyZXknLCAnZ3JheScpO1xyXG5cdFx0XHRcdGNvbnN0IF9hZGRQRiA9IChrOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuXHRcdFx0XHRcdGNvbnN0IHYgPSBQRltrXTtcclxuXHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHYpKSBwcmV2LnB1c2goLi4udik7XHJcblx0XHRcdFx0XHRlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHYpIHByZXYucHVzaCh2KTtcclxuXHRcdFx0XHR9O1xyXG5cdFx0XHRcdGlmIChGTS5oYXNPd25Qcm9wZXJ0eSh2YWwpKSBwcmV2LnB1c2godmFsKTtcclxuXHRcdFx0XHRlbHNlIGlmIChGTS5oYXNPd25Qcm9wZXJ0eSh0bXAgPSBgZmdfJHt2YWx9YCkpIHByZXYucHVzaCh0bXApO1xyXG5cdFx0XHRcdGVsc2UgaWYgKFBGLmhhc093blByb3BlcnR5KHZhbCkpIF9hZGRQRih2YWwpO1xyXG5cdFx0XHRcdGVsc2UgaWYgKFBGLmhhc093blByb3BlcnR5KHRtcCA9IGBiZ18ke3ZhbH1gKSkgX2FkZFBGKHRtcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHByZXY7XHJcblx0XHR9LCBbXSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRleHQgZm9ybWF0IGxvZyBhcmd1bWVudHNcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gZm9ybWF0cyAgVGV4dCBmb3JtYXQocylcclxuXHQgKiBAcGFyYW0gYXJncyAgRm9ybWF0IHZhbHVlc1xyXG5cdCAqIEByZXR1cm5zIGBJVGVybUZvcm1hdGBcclxuXHQgKi9cclxuXHRzdGF0aWMgZm9ybWF0KGZvcm1hdHM6IHN0cmluZ3xzdHJpbmdbXSwgLi4uYXJnczogYW55KTogSVRlcm1Gb3JtYXQge1xyXG5cdFx0bGV0IHRtcDogc3RyaW5nO1xyXG5cdFx0Y29uc3QgX2Zvcm1hdHM6IHN0cmluZ1tdID0gdGhpcy5nZXRGb3JtYXRzKGZvcm1hdHMpO1xyXG5cdFx0Y29uc3QgX2Zvcm1hdCA9ICh2YWw6IGFueSk6IGFueSA9PiB7XHJcblx0XHRcdGlmICh0aGlzLkRJU0FCTEVEIHx8ICFmb3JtYXRzLmxlbmd0aCkgcmV0dXJuIHZhbDtcclxuXHRcdFx0aWYgKCdvYmplY3QnID09PSB0eXBlb2YgdmFsICYmIHZhbCl7XHJcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuIHZhbDtcclxuXHRcdFx0XHRpZiAobmV3IFJlZ0V4cCgnXFxcXFtvYmplY3QgXFxcXHcrXFxcXFxcXScpLnRlc3QodG1wID0gX3N0cmluZyh2YWwpKSkgcmV0dXJuIHZhbDtcclxuXHRcdFx0XHRlbHNlIHZhbCA9IHRtcDtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoISgnc3RyaW5nJyA9PT0gdHlwZW9mIHZhbCAmJiB2YWwubGVuZ3RoKSkgcmV0dXJuIHZhbDtcclxuXHRcdFx0cmV0dXJuIF9mb3JtYXRzLnJlZHVjZTxzdHJpbmc+KCh2LCBmKSA9PiB0aGlzLkZPUk1BVFNbZl0gKyB2ICsgdGhpcy5GT1JNQVRTLnJlc2V0LCB2YWwpO1xyXG5cdFx0fTtcclxuXHRcdGNvbnN0IHRoYXQgPSB0aGlzLCBfYXJnczogYW55W10gPSBhcmdzO1xyXG5cdFx0cmV0dXJuIHtcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBBZGQgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogQHBhcmFtIGZvcm1hdHNcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3NcclxuXHRcdFx0ICovXHJcblx0XHRcdGZvcm1hdChmb3JtYXRzOiBzdHJpbmd8c3RyaW5nW10sIC4uLmFyZ3M6IGFueVtdKTogSVRlcm1Gb3JtYXQge1xyXG5cdFx0XHRcdF9hcmdzLnB1c2godGhhdC5mb3JtYXQoZm9ybWF0cywgLi4uYXJncykudmFsdWVzKCkpO1xyXG5cdFx0XHRcdHJldHVybiB0aGlzO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCBmb3JtYXR0ZWQgdmFsdWVzXHJcblx0XHRcdCAqIFxyXG5cdFx0XHQgKiBAcGFyYW0gYXJnc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0dmFsdWVzKC4uLmFyZ3M6IGFueVtdKTogYW55W10ge1xyXG5cdFx0XHRcdHJldHVybiBfYXJncy5jb25jYXQoYXJncykubWFwKHZhbCA9PiBfZm9ybWF0KHZhbCkpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIEdldCB2YWx1ZXMgd2l0aG91dCBmb3JtYXR0aW5nXHJcblx0XHRcdCAqIFxyXG5cdFx0XHQgKiBAcGFyYW0gYXJnc1xyXG5cdFx0XHQgKi9cclxuXHRcdFx0Y2xlYXIoLi4uYXJnczogYW55W10pOiBhbnlbXSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoYXQuY2xlYXIoLi4udGhpcy52YWx1ZXMoLi4uYXJncykpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIGBjb25zb2xlLmxvZ2AgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3MgXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRsb2coLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdFx0XHRjb25zb2xlLmxvZyguLi50aGlzLnZhbHVlcyguLi5hcmdzKSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogYGNvbnNvbGUuZGVidWdgIGZvcm1hdHRlZCB2YWx1ZXNcclxuXHRcdFx0ICogXHJcblx0XHRcdCAqIEBwYXJhbSBhcmdzIFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0ZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdFx0XHRjb25zb2xlLmRlYnVnKC4uLnRoaXMudmFsdWVzKC4uLmFyZ3MpKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBgY29uc29sZS53YXJuYCBmb3JtYXR0ZWQgdmFsdWVzXHJcblx0XHRcdCAqIFxyXG5cdFx0XHQgKiBAcGFyYW0gYXJncyBcclxuXHRcdFx0ICovXHJcblx0XHRcdHdhcm4oLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdFx0XHRjb25zb2xlLndhcm4oLi4udGhpcy52YWx1ZXMoLi4uYXJncykpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIGBjb25zb2xlLmVycm9yYCBmb3JtYXR0ZWQgdmFsdWVzXHJcblx0XHRcdCAqIFxyXG5cdFx0XHQgKiBAcGFyYW0gYXJncyBcclxuXHRcdFx0ICovXHJcblx0XHRcdGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvciguLi50aGlzLnZhbHVlcyguLi5hcmdzKSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogYGNvbnNvbGUuaW5mb2AgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3MgXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRpbmZvKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHRcdFx0Y29uc29sZS5pbmZvKC4uLnRoaXMudmFsdWVzKC4uLmFyZ3MpKTtcclxuXHRcdFx0fSxcclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDbGVhciB0ZXh0IHZhbHVlIGZvcm1hdHRpbmdcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gYXJncyAgRm9ybWF0dGVkIHZhbHVlc1xyXG5cdCAqIEByZXR1cm5zIGBhbnlbXWAgQ2xlYXIgdmFsdWVzXHJcblx0ICovXHJcblx0c3RhdGljIGNsZWFyKC4uLmFyZ3M6IGFueVtdKTogYW55W10ge1xyXG5cdFx0Y29uc3QgX2NsZWFyID0gKHZhbDogc3RyaW5nKTogc3RyaW5nID0+IE9iamVjdC52YWx1ZXModGhpcy5GT1JNQVRTKS5yZWR1Y2U8c3RyaW5nPigocCwgdik9PiBwLnJlcGxhY2UobmV3IFJlZ0V4cChTdHJpbmcodikucmVwbGFjZSgvXFx4MUIvLCAnXFxcXHgxQicpLnJlcGxhY2UoL1xcWy8sICdcXFxcWycpLCAnZycpLCAnJyksIHZhbCk7XHJcblx0XHRyZXR1cm4gYXJncy5tYXAoKHZhbDogYW55KSA9PiAnc3RyaW5nJyA9PT0gdHlwZW9mIHZhbCAmJiB2YWwudHJpbSgpLmxlbmd0aCA/IF9jbGVhcih2YWwpIDogdmFsKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCBmb3JtYXR0ZWQgdGV4dFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSB2YWx1ZSAgVGV4dCB2YWx1ZVxyXG5cdCAqIEBwYXJhbSBmb3JtYXRzICBUZXh0IGZvcm1hdChzKVxyXG5cdCAqIEByZXR1cm5zIGBzdHJpbmdgIEZvcm1hdHRlZFxyXG5cdCAqL1xyXG5cdHN0YXRpYyB0ZXh0KHZhbHVlOiBzdHJpbmcsIGZvcm1hdHM/OiBzdHJpbmd8c3RyaW5nW10pOiBzdHJpbmcge1xyXG5cdFx0Y29uc3QgX3ZhbDogc3RyaW5nID0gX3N0cmluZyh2YWx1ZSksIF9mb3JtYXRzOiBzdHJpbmdbXSA9IChBcnJheS5pc0FycmF5KGZvcm1hdHMpID8gZm9ybWF0cyA6ICdzdHJpbmcnID09PSB0eXBlb2YgZm9ybWF0cyA/IFtmb3JtYXRzXSA6IFtdKS5maWx0ZXIodiA9PiAnc3RyaW5nJyA9PT0gdHlwZW9mIHYgJiYgISF2LnRyaW0oKSk7XHJcblx0XHRpZiAoIShfZm9ybWF0cy5sZW5ndGggJiYgX3ZhbC50cmltKCkubGVuZ3RoKSkgcmV0dXJuIF92YWw7XHJcblx0XHRyZXR1cm4gdGhpcy5mb3JtYXQoX2Zvcm1hdHMsIF92YWwpLnZhbHVlcygpWzBdO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTG9nIGBjb25zb2xlLmxvZ2AgZm9ybWF0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIGFyZ3NcclxuXHQgKi9cclxuXHRzdGF0aWMgbG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnbG9nJywgLi4uYXJncykubG9nKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBEZWJ1ZyBgY29uc29sZS5kZWJ1Z2AgZm9ybWF0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIGFyZ3NcclxuXHQgKi9cclxuXHRzdGF0aWMgZGVidWcoLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdHRoaXMuZm9ybWF0KCdkZWJ1ZycsIC4uLmFyZ3MpLmRlYnVnKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFcnJvciBgY29uc29sZS5lcnJvcmAgZm9ybWF0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIGFyZ3NcclxuXHQgKi9cclxuXHRzdGF0aWMgZXJyb3IoLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuXHRcdHRoaXMuZm9ybWF0KCdlcnJvcicsIC4uLmFyZ3MpLmVycm9yKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBXYXJuIGBjb25zb2xlLndhcm5gIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIHdhcm4oLi4uYXJnczogYW55KTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnd2FybicsIC4uLmFyZ3MpLndhcm4oKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEluZm8gYGNvbnNvbGUuaW5mb2AgZm9ybWF0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIGFyZ3NcclxuXHQgKi9cclxuXHRzdGF0aWMgaW5mbyguLi5hcmdzOiBhbnkpOiB2b2lkIHtcclxuXHRcdHRoaXMuZm9ybWF0KCdpbmZvJywgLi4uYXJncykuaW5mbygpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU3VjY2VzcyBgY29uc29sZS5sb2dgIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIHN1Y2Nlc3MoLi4uYXJnczogYW55KTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnc3VjY2VzcycsIC4uLmFyZ3MpLmxvZygpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHZhbHVlIGxpc3RcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdmFsdWVcclxuXHQgKiBAcGFyYW0gX2VudHJpZXNcclxuXHQgKi9cclxuXHRzdGF0aWMgbGlzdCh2YWx1ZTogYW55LCBfZW50cmllczogYm9vbGVhbiA9IGZhbHNlKTogW2xpc3Q6IGFueVtdLCB0eXBlOid2YWx1ZXMnfCdlbnRyaWVzJ10ge1xyXG5cdFx0bGV0IGl0ZW1zOiBhbnlbXSA9IFt2YWx1ZV0sIHR5cGU6ICd2YWx1ZXMnfCdlbnRyaWVzJyA9ICd2YWx1ZXMnO1xyXG5cdFx0aWYgKCdvYmplY3QnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUpe1xyXG5cdFx0XHRpZiAoISh0eXBlID0gdmFsdWVbU3ltYm9sLml0ZXJhdG9yXT8ubmFtZSkpe1xyXG5cdFx0XHRcdHR5cGUgPSAndmFsdWVzJztcclxuXHRcdFx0XHRpdGVtcyA9IFt2YWx1ZV07XHJcblx0XHRcdFx0aWYgKF9lbnRyaWVzICYmIF9zdHJpbmdhYmxlKHZhbHVlKSA9PT0gZmFsc2Upe1xyXG5cdFx0XHRcdFx0bGV0IHRtcDogYW55ID0gX2pzb25DbG9uZTxhbnk+KHZhbHVlKSwgdG1wX2VudHJpZXM6IFtrOiBhbnksIHY6IGFueV1bXSA9IFtdO1xyXG5cdFx0XHRcdFx0aWYgKCEoJ29iamVjdCcgPT09IHR5cGVvZiB0bXAgJiYgdG1wICYmICh0bXBfZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHRtcCkpLmxlbmd0aCkpIHRtcF9lbnRyaWVzID0gT2JqZWN0LmVudHJpZXModmFsdWUpO1xyXG5cdFx0XHRcdFx0aWYgKHRtcF9lbnRyaWVzLmxlbmd0aCl7XHJcblx0XHRcdFx0XHRcdHR5cGUgPSAnZW50cmllcyc7XHJcblx0XHRcdFx0XHRcdGl0ZW1zID0gdG1wX2VudHJpZXM7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHR5cGUgPT09ICdlbnRyaWVzJykgaXRlbXMgPSBfZW50cmllcyA/IFsuLi52YWx1ZV0gOiBbdmFsdWVdO1xyXG5cdFx0XHRlbHNlIGl0ZW1zID0gWy4uLnZhbHVlXTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBbaXRlbXMsIHR5cGVdO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ3VzdG9tIGBjb25zb2xlLnRhYmxlYCBsb2dnZXJcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gZGF0YVxyXG5cdCAqIEBwYXJhbSBjZWxsTWF4TGVuZ3RoXHJcblx0ICovXHJcblx0c3RhdGljIHRhYmxlKGRhdGE6IGFueSwgY2VsbE1heExlbmd0aDogbnVtYmVyID0gMjQ4LCBkaXZpZGVyOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcclxuXHRcdFxyXG5cdFx0Ly92YXJzXHJcblx0XHRjb25zdCB0aGF0ID0gdGhpcztcclxuXHRcdGNvbnN0IFtkYXRhX2l0ZW1zLCBkYXRhX3R5cGVdID0gdGhhdC5saXN0KGRhdGEsICdvYmplY3QnID09PSB0eXBlb2YgZGF0YSAmJiBkYXRhICYmICFfc3RyaW5nYWJsZShkYXRhKSk7XHJcblxyXG5cdFx0Ly9mbiA9PiBzdHIgdmFsdWVcclxuXHRcdGNvbnN0IHN0clZhbCA9ICh2YWw6IGFueSk6IFtfdmFsdWU6IHN0cmluZywgX2Zvcm1hdDogc3RyaW5nXSA9PiB7XHJcblx0XHRcdGxldCBjb2xvcjogc3RyaW5nLCB0bXA6IGFueTtcclxuXHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KHZhbCkgJiYgKHRtcCA9IF9zdHJpbmdhYmxlKHZhbCkpICE9PSBmYWxzZSl7XHJcblx0XHRcdFx0Y29sb3IgPSAnZ3JlZW4nO1xyXG5cdFx0XHRcdGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHZhbCkgY29sb3IgPSAneWVsbG93JztcclxuXHRcdFx0XHRlbHNlIGlmICh2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09IG51bGwpIGNvbG9yID0gJ2dyYXknO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHZhbCA9PT0gdHJ1ZSkgY29sb3IgPSAnY3lhbic7XHJcblx0XHRcdFx0ZWxzZSBpZiAodmFsID09PSBmYWxzZSkgY29sb3IgPSAncmVkJztcclxuXHRcdFx0XHRlbHNlIGlmICgvXlxcZHs0fS0oPzowWzEtOV18MVswLTJdKS0oPzpbMC0yXVsxLTldfFsxLTNdMHwzWzAxXSlUKD86WzAtMV1bMC05XXwyWzAtM10pKD86OlswLTZdXFxkKSg/OjpbMC02XVxcZCk/KD86XFwuXFxkezN9KT8oPzpbKy1dWzAtMl1cXGQ6WzAtNV1cXGR8Wik/JC8udGVzdCh0bXApKSBjb2xvciA9ICdtYWdlbnRhJzsgLy9tYXRjaCBJU08gdGltZXN0YW1wIChpLmUuIDIwMjMtMDYtMDlUMTg6MTg6NTcuMDcwWilcclxuXHRcdFx0XHR2YWwgPSB0bXA7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0aWYgKCdvYmplY3QnID09PSB0eXBlb2YgdmFsICYmIHZhbCl7XHJcblx0XHRcdFx0XHRjb25zdCBfdHlwZSA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdO1xyXG5cdFx0XHRcdFx0aWYgKCEhX3R5cGUpe1xyXG5cdFx0XHRcdFx0XHR2YWwgPSBbLi4udmFsXTtcclxuXHRcdFx0XHRcdFx0aWYgKF90eXBlID09PSAnZW50cmllcycpIHZhbCA9IE9iamVjdC5mcm9tRW50cmllcyh2YWwpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB2YWwgPSBfanNvbkNsb25lPGFueT4odmFsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0dmFsID0gX2pzb25TdHJpbmdpZnkodmFsKTtcclxuXHRcdFx0XHRjb2xvciA9ICdtYWdlbnRhJztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gW3ZhbCwgY29sb3JdO1xyXG5cdFx0fTtcclxuXHJcblx0XHQvL3ZhbHVlIGxvZyAtIGNhbm5vdCBiZSB0YWJsZWRcclxuXHRcdGlmIChkYXRhX3R5cGUgPT09ICd2YWx1ZXMnICYmIGRhdGFfaXRlbXMubGVuZ3RoIDwgMil7XHJcblx0XHRcdGNvbnN0IFtfdmFsdWUsIF9mb3JtYXRdID0gc3RyVmFsKGRhdGEpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyh0aGF0LnRleHQoX3ZhbHVlLCBfZm9ybWF0KSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHQvL3RhYmxlIGl0ZW1zXHJcblx0XHRsZXQgbW9kZTogJ3ZhbHVlcyd8J2VudHJpZXMnO1xyXG5cdFx0Y29uc3QgdGFibGVfaXRlbXM6IGFueVtdW10gPSBbXTtcclxuXHRcdGlmIChkYXRhX3R5cGUgPT09ICdlbnRyaWVzJyl7XHJcblx0XHRcdHRhYmxlX2l0ZW1zLnB1c2goWycoaW5kZXgpJywgJ1ZhbHVlcyddKTtcclxuXHRcdFx0dGFibGVfaXRlbXMucHVzaCguLi5kYXRhX2l0ZW1zKTtcclxuXHRcdH1cclxuXHRcdGVsc2Uge1xyXG5cdFx0XHRsZXQgbWFwX2tleXM6IHN0cmluZ1tdID0gW10sIG1hcF9pdGVtczoge1trZXk6IHN0cmluZ106IGFueX1bXSA9IFtdO1xyXG5cdFx0XHRkYXRhX2l0ZW1zLmZvckVhY2goKGRhdGFfaXRlbSwgcikgPT4ge1xyXG5cdFx0XHRcdGxldCBbbGlzdF9pdGVtcywgbGlzdF90eXBlXSA9IHRoYXQubGlzdChkYXRhX2l0ZW0sICFyIHx8IG1vZGUgPT09ICdlbnRyaWVzJyk7XHJcblx0XHRcdFx0aWYgKCFyKSBtb2RlID0gbGlzdF90eXBlO1xyXG5cdFx0XHRcdGNvbnN0IG1hcF9pdGVtOiB7W2tleTogc3RyaW5nXTogYW55fSA9IHt9O1xyXG5cdFx0XHRcdGxpc3RfaXRlbXMuZm9yRWFjaCgoaXRlbSwgaSkgPT4ge1xyXG5cdFx0XHRcdFx0bGV0IGs6IHN0cmluZywgdjogYW55O1xyXG5cdFx0XHRcdFx0aWYgKGxpc3RfdHlwZSA9PT0gJ2VudHJpZXMnKXtcclxuXHRcdFx0XHRcdFx0ayA9IF9zdHIoaXRlbVswXSwgdHJ1ZSwgdHJ1ZSk7XHJcblx0XHRcdFx0XHRcdHYgPSBpdGVtWzFdO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZSB7XHJcblx0XHRcdFx0XHRcdGsgPSBgJHtpfWA7XHJcblx0XHRcdFx0XHRcdHYgPSBpdGVtO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKCFtYXBfa2V5cy5pbmNsdWRlcyhrKSkgbWFwX2tleXMucHVzaChrKTtcclxuXHRcdFx0XHRcdG1hcF9pdGVtW2tdID0gdjtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRtYXBfaXRlbXMucHVzaChtYXBfaXRlbSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0YWJsZV9pdGVtcy5wdXNoKFsnKGluZGV4KScsIC4uLm1hcF9rZXlzXSk7XHJcblx0XHRcdG1hcF9pdGVtcy5mb3JFYWNoKChtYXBfaXRlbSwgcikgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IHRhYmxlX2l0ZW06IGFueVtdID0gW107XHJcblx0XHRcdFx0Zm9yIChjb25zdCBrZXkgb2YgbWFwX2tleXMpIHRhYmxlX2l0ZW0ucHVzaChtYXBfaXRlbVtrZXldKTtcclxuXHRcdFx0XHR0YWJsZV9pdGVtcy5wdXNoKFtyLCAuLi50YWJsZV9pdGVtXSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vd2lkdGhcclxuXHRcdGNvbnN0IHdpZHRoX21hcDoge1trZXk6IG51bWJlcl06IG51bWJlcn0gPSB7fTtcclxuXHRcdGNvbnN0IHN0cl9pdGVtczogW192YWx1ZTogc3RyaW5nLCBfZm9ybWF0OiBzdHJpbmddW11bXSA9IFtdO1xyXG5cdFx0dGFibGVfaXRlbXMuZm9yRWFjaCh0YWJsZV9pdGVtID0+IHtcclxuXHRcdFx0Y29uc3Qgc3RyX2l0ZW06IFtfdmFsdWU6IHN0cmluZywgX2Zvcm1hdDogc3RyaW5nXVtdID0gW107XHJcblx0XHRcdHRhYmxlX2l0ZW0uZm9yRWFjaCgodmFsLCBpKSA9PiB7XHJcblx0XHRcdFx0Y29uc3QgW192YWx1ZSwgX2Zvcm1hdF0gPSBzdHJWYWwodmFsKTtcclxuXHRcdFx0XHRpZiAoIXdpZHRoX21hcC5oYXNPd25Qcm9wZXJ0eShpKSkgd2lkdGhfbWFwW2ldID0gMDtcclxuXHRcdFx0XHRsZXQgbGVuID0gX3ZhbHVlLmxlbmd0aDtcclxuXHRcdFx0XHRpZiAobGVuID4gY2VsbE1heExlbmd0aCkgbGVuID0gY2VsbE1heExlbmd0aDsgLy9jZWxsTWF4TGVuZ3RoIGxpbWl0XHJcblx0XHRcdFx0aWYgKGxlbiA+IHdpZHRoX21hcFtpXSkgd2lkdGhfbWFwW2ldID0gbGVuO1xyXG5cdFx0XHRcdHN0cl9pdGVtLnB1c2goW192YWx1ZSwgX2Zvcm1hdF0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0c3RyX2l0ZW1zLnB1c2goc3RyX2l0ZW0pO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly9yb3dzXHJcblx0XHRjb25zdCByb3dzX2xlbjogbnVtYmVyID0gc3RyX2l0ZW1zLmxlbmd0aDtcclxuXHRcdHN0cl9pdGVtcy5mb3JFYWNoKChzdHJfaXRlbSwgcikgPT4ge1xyXG5cdFx0XHRsZXQgbWF4X2xpbmVzOiBudW1iZXIgPSAwLCBzdHJfaXRlbV9saW5lczogc3RyaW5nW11bXSA9IFtdO1xyXG5cdFx0XHRzdHJfaXRlbS5mb3JFYWNoKCh2YWwsIGkpID0+IHtcclxuXHRcdFx0XHRsZXQgW192YWx1ZSwgX2Zvcm1hdF0gPSB2YWw7XHJcblx0XHRcdFx0aWYgKCFpIHx8ICFyKSBfZm9ybWF0ID0gKCFpICYmIHIgJiYgbW9kZSA9PT0gJ3ZhbHVlcycpID8gJ2dyYXknIDogJ3doaXRlJztcclxuXHRcdFx0XHRjb25zdCB3aWR0aDogbnVtYmVyID0gd2lkdGhfbWFwW2ldO1xyXG5cdFx0XHRcdGNvbnN0IGxpbmVzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0XHRcdGlmIChfdmFsdWUubGVuZ3RoID4gd2lkdGgpe1xyXG5cdFx0XHRcdFx0d2hpbGUgKF92YWx1ZS5sZW5ndGggPiB3aWR0aCkge1xyXG5cdFx0XHRcdFx0XHRjb25zdCBsaW5lID0gX3ZhbHVlLnN1YnN0cmluZygwLCB3aWR0aCkucGFkRW5kKHdpZHRoKTtcclxuXHRcdFx0XHRcdFx0X3ZhbHVlID0gX3ZhbHVlLnNsaWNlKHdpZHRoKTtcclxuXHRcdFx0XHRcdFx0bGluZXMucHVzaCh0aGF0LnRleHQobGluZSwgX2Zvcm1hdCkpOyAvL2Zvcm1hdFxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKF92YWx1ZS5sZW5ndGgpIGxpbmVzLnB1c2godGhhdC50ZXh0KF92YWx1ZS5wYWRFbmQod2lkdGgpLCBfZm9ybWF0KSk7IC8vZm9ybWF0XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgbGluZXMucHVzaCh0aGF0LnRleHQoX3ZhbHVlLnBhZEVuZCh3aWR0aCksIF9mb3JtYXQpKTsgLy9mb3JtYXRcclxuXHRcdFx0XHRzdHJfaXRlbV9saW5lcy5wdXNoKGxpbmVzKTtcclxuXHRcdFx0XHRpZiAobWF4X2xpbmVzIDwgbGluZXMubGVuZ3RoKSBtYXhfbGluZXMgPSBsaW5lcy5sZW5ndGg7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRzdHJfaXRlbV9saW5lcyA9IHN0cl9pdGVtX2xpbmVzLm1hcCgobGluZXMsIGMpID0+IHtcclxuXHRcdFx0XHRjb25zdCB3aWR0aDogbnVtYmVyID0gd2lkdGhfbWFwW2NdO1xyXG5cdFx0XHRcdHJldHVybiBbLi4uQXJyYXkobWF4X2xpbmVzKV0ubWFwKChfLCBpKSA9PiB7XHJcblx0XHRcdFx0XHRjb25zdCBsaW5lID0gaSA8IGxpbmVzLmxlbmd0aCA/IGxpbmVzW2ldIDogJycucGFkRW5kKHdpZHRoKTtcclxuXHRcdFx0XHRcdHJldHVybiBsaW5lO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0Y29uc3QgbGluZV9yb3dzOnN0cmluZ1tdW10gPSBbLi4uQXJyYXkobWF4X2xpbmVzKV0ubWFwKCgpID0+IFtdKTtcclxuXHRcdFx0c3RyX2l0ZW1fbGluZXMuZm9yRWFjaCgobGluZXMsIGMpID0+IHtcclxuXHRcdFx0XHRsaW5lcy5mb3JFYWNoKChsaW5lLCBpKSA9PiBsaW5lX3Jvd3NbaV1bY10gPSBsaW5lKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGNvbnN0IHJvd3M6IHN0cmluZ1tdID0gW107XHJcblx0XHRcdGNvbnN0IGxlbiA9IGxpbmVfcm93cy5sZW5ndGg7XHJcblx0XHRcdGxpbmVfcm93cy5mb3JFYWNoKChsaW5lX3JvdywgbikgPT4ge1xyXG5cdFx0XHRcdGlmICghbiAmJiAhcikgcm93cy5wdXNoKCfilIzilIAnICsgbGluZV9yb3cubWFwKChfLCBpKSA9PiAnJy5wYWRFbmQod2lkdGhfbWFwW2ldLCAn4pSAJykpLmpvaW4oJ+KUgOKUrOKUgCcpICsgJ+KUgOKUkCcpOyAvL2JvcmRlciB0b3BcclxuXHRcdFx0XHRyb3dzLnB1c2goJ+KUgiAnICsgbGluZV9yb3cuam9pbignIOKUgiAnKSArICcg4pSCJyk7XHJcblx0XHRcdFx0aWYgKCghciB8fCBkaXZpZGVyKSAmJiBuICsgMSA9PT0gbGVuICYmIHIgKyAxIDwgcm93c19sZW4pIHJvd3MucHVzaCgn4pSc4pSAJyArIGxpbmVfcm93Lm1hcCgoXywgaSkgPT4gJycucGFkRW5kKHdpZHRoX21hcFtpXSwgJ+KUgCcpKS5qb2luKCfilIDilLzilIAnKSArICfilIDilKQnKTsgLy9ib3JkZXIgbWlkXHJcblx0XHRcdFx0aWYgKG4gKyAxID09PSBsZW4gJiYgciArIDEgPT09IHJvd3NfbGVuKSByb3dzLnB1c2goJ+KUlOKUgCcgKyBsaW5lX3Jvdy5tYXAoKF8sIGkpID0+ICcnLnBhZEVuZCh3aWR0aF9tYXBbaV0sICfilIAnKSkuam9pbign4pSA4pS04pSAJykgKyAn4pSA4pSYJyk7IC8vYm9yZGVyIGJvdHRvbVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0cm93cy5mb3JFYWNoKHJvdyA9PiBjb25zb2xlLmxvZyhyb3cpKTtcclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG5cclxuXHJcbi8vVEVTVCBUQUJMRVxyXG4vLyBjb25zdCBfdmFsdWVzOiBhbnlbXSA9IGBcclxuLy8gSW4gZXUgZmV1Z2lhdCBpcHN1bSwgaWQgZXVpc21vZCBuaXNpLlxyXG4vLyBTZWQgc2VtIHZlbGl0LCBmYWNpbGlzaXMgdml0YWUgdHVycGlzIHV0LCBvcm5hcmUgZmluaWJ1cyBsYWN1cy5cclxuLy8gUHJvaW4gc29kYWxlcyB2ZXN0aWJ1bHVtIG1hdXJpcyBldSB0ZW1wb3IuIENyYXMgc2l0IGFtZXQgdmVoaWN1bGEgdXJuYS5cclxuLy8gTWFlY2VuYXMgZmV1Z2lhdCB2YXJpdXMgdmVsaXQgZXUgZWdlc3Rhcy4gRG9uZWMgZmluaWJ1cyBsb3JlbSBldCB0ZW1wb3IgbG9ib3J0aXMuXHJcbi8vIE51bGxhbSB0aW5jaWR1bnQgcG9zdWVyZSBuaWJoLCB2b2x1dHBhdCBpbXBlcmRpZXQgb3JjaSByaG9uY3VzIGV1LiBWZXN0aWJ1bHVtIG1heGltdXMgcnV0cnVtIGVyYXQgYWMgZmF1Y2lidXMuXHJcbi8vIE1hdXJpcyB2aXRhZSB0ZW1wb3IgdmVsaXQuXHJcbi8vIEN1cmFiaXR1ciB1bHRyaWNpZXMgbnVuYyBub24gbWFzc2EgYXVjdG9yLCB2ZWwgdGluY2lkdW50IHR1cnBpcyBlbGVtZW50dW0uXHJcbi8vIGAudHJpbSgpLnNwbGl0KCdcXG4nKS5tYXAodiA9PiB2LnRyaW0oKSk7XHJcbi8vIGNvbnN0IF9zZXQgPSBuZXcgU2V0PG51bWJlcj4oWzEsIDIsIDIsIDQsIDVdKTtcclxuLy8gY29uc3QgX21hcCA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KFtbJ25hbWUnLCAnTWFydGluJ10sIFsnYWdlJywgMzBdLCBbJ3Bob25lJywgNDQ0NTU1XV0pO1xyXG4vLyBjb25zdCBfY2lyYyA9ICgoKT0+eyBjb25zdCB4diA9IHtuYW1lOid0ZXN0WFYnLF9nZXQ6ZnVuY3Rpb24odGhpczogYW55KXtjb25zdCBzZWxmID0gdGhpczsgc2VsZi5feHYgPSBzZWxmOyByZXR1cm4gc2VsZjt9fTsgcmV0dXJuIHh2Ll9nZXQoKTsgfSkoKTtcclxuLy8gX3ZhbHVlcy5wdXNoKC4uLltuZXcgRGF0ZSgpLCBuZXcgVHlwZUVycm9yKCdIZWxsbyBlcnJvci4nKSwgX3NldCwgX21hcCwgX2NpcmNdKTtcclxuLy8gY29uc3QgX2JhdGNoID0gX2JhdGNoVmFsdWVzKF92YWx1ZXMsIDMpLm1hcChhcnIgPT4gIShfcmFuZCgwLCAxMCklMikgPyBhcnIuc2xpY2UoMCkgOiBhcnIuc2xpY2UoMCkucmV2ZXJzZSgpKTtcclxuLy8gY29uc3QgX29iamVjdHM6IGFueVtdID0gX2pzb25DbG9uZTxhbnlbXVtdPihfYmF0Y2gpLm1hcChhcnIgPT4gT2JqZWN0LmZyb21FbnRyaWVzKGFyci5tYXAoKHYsIGkpID0+IFtgY29sICR7aX1gLCB2XSkpKTtcclxuLy8gY29uc3QgX29iamVjdDogYW55ID0gX29iamVjdHNbX3JhbmQoMCwgX29iamVjdHMubGVuZ3RoIC0gMSldO1xyXG4vLyBjb25zdCBfYXJyOiBhbnlbXSA9IFsuLi5BcnJheSg1KV0ubWFwKChfLCByKSA9PiBbLi4uQXJyYXkoNCldLm1hcCgoXywgYykgPT4gYCR7W3IsIGNdfWApKTtcclxuLy8gLy90ZXN0c1xyXG4vLyBjb25zdCBfdGVzdHM6IHtba2V5OiBzdHJpbmddOiBhbnl9ID0ge1xyXG4vLyBcdF9zZXQsXHJcbi8vIFx0X21hcCxcclxuLy8gXHRfYmF0Y2gsXHJcbi8vIFx0X29iamVjdCxcclxuLy8gXHRfYXJyLFxyXG4vLyBcdF9zdHI6ICdDdXJhYml0dXIgdWx0cmljaWVzIG51bmMgbm9uIG1hc3NhIGF1Y3RvciwgdmVsIHRpbmNpZHVudCB0dXJwaXMgZWxlbWVudHVtLicsXHJcbi8vIFx0X251bTogX3JhbmQoMTAwMCwgMTAwMDAwKSxcclxuLy8gXHRfZGF0ZTogbmV3IERhdGUoKSxcclxuLy8gXHRfZXJyOiBuZXcgRXJyb3IoJ0hlbGxvIGVycm9yIScpLFxyXG4vLyBcdF9ib29sOiBbdHJ1ZSwgZmFsc2VdLFxyXG4vLyB9O1xyXG4vLyBPYmplY3QuZW50cmllcyhfdGVzdHMpLmZvckVhY2goKGVudHJ5LCBpKSA9PiB7XHJcbi8vIFx0Y29uc3QgW2tleSwgdmFsdWVdID0gZW50cnk7XHJcbi8vIFx0Y29uc29sZS5sb2coJycpO1xyXG4vLyBcdFRlcm0ud2FybihgLS0tIFske2l9XSB0ZXN0IC0gJHtrZXl9YCwgdmFsdWU/Lmxlbmd0aCA/PyAnJyk7XHJcbi8vIFx0VGVybS50YWJsZSh2YWx1ZSwgMzIpO1xyXG4vLyB9KTtcclxuLy8gLy90YWJsZVxyXG4vLyBjb25zb2xlLmxvZygnJyk7XHJcbi8vIFRlcm0uZGVidWcoJz09PSB0YWJsZScpO1xyXG4vLyBjb25zb2xlLnRhYmxlKF9hcnIpO1xyXG4vLyBjb25zb2xlLnRhYmxlKF9vYmplY3QpO1xyXG4vLyByZXR1cm47IiwiLy9fY29tbW9uXHJcbmV4cG9ydCB0eXBlIHtcclxuXHRib29sLFxyXG59IGZyb20gJy4vX2NvbW1vbic7XHJcblxyXG4vL19oZWxsb1xyXG5leHBvcnQge1xyXG5cdF9zYXlIZWxsbyxcclxufSBmcm9tICcuL19oZWxsbyc7XHJcblxyXG4vL19qc29uXHJcbmV4cG9ydCB7XHJcblx0X2pzb25TdHJpbmdpZnksXHJcblx0X2pzb25QYXJzZSxcclxuXHRfanNvbkNsb25lLFxyXG59IGZyb20gJy4vX2pzb24nO1xyXG5cclxuLy9fc3RyaW5nXHJcbmV4cG9ydCB7XHJcblx0X3V1aWQsXHJcblx0X3N0cmluZyxcclxuXHRfc3RyaW5nYWJsZSxcclxuXHRfc3RyLFxyXG5cdF9zdHJOb3JtLFxyXG5cdF9yZWdFc2NhcGUsXHJcblx0X3N0ckVzY2FwZSxcclxuXHRfdHJpbSxcclxuXHRfbHRyaW0sXHJcblx0X3J0cmltLFxyXG5cdF90aXRsZUNhc2UsXHJcblx0X3NlbnRlbmNlQ2FzZSxcclxuXHRfc25ha2VDYXNlLFxyXG5cdF9zbHVnQ2FzZSxcclxuXHRfc3R1ZGx5Q2FzZSxcclxuXHRfY2FtZWxDYXNlLFxyXG59IGZyb20gJy4vX3N0cmluZyc7XHJcblxyXG4vL19iYXRjaFxyXG5leHBvcnQge1xyXG5cdF9iYXRjaFZhbHVlcyxcclxufSBmcm9tICcuL19iYXRjaCc7XHJcblxyXG4vL19kYXRldGltZVxyXG5leHBvcnQge1xyXG5cdF9pc0RhdGUsXHJcblx0X2dldERhdGUsXHJcblx0X2RhdGV0aW1lLFxyXG5cdF90aW1lc3RhbXAsXHJcbn0gZnJvbSAnLi9fZGF0ZXRpbWUnO1xyXG5cclxuZXhwb3J0IHtcclxuXHRfaXNOdW1lcmljLFxyXG5cdF90b051bSxcclxuXHRfbnVtLFxyXG5cdF9pbnQsXHJcblx0X3JvdW5kLFxyXG5cdF9jb21tYXMsXHJcblx0X3JhbmQsXHJcbn0gZnJvbSAnLi9fbnVtYmVyJztcclxuXHJcbi8vX3Byb21pc2VcclxuZXhwb3J0IHR5cGUge1xyXG5cdElQcm9taXNlUmVzdWx0LFxyXG59IGZyb20gJy4vX3Byb21pc2UnO1xyXG5cclxuZXhwb3J0IHtcclxuXHRfYXN5bmNBbGwsXHJcblx0X2FzeW5jVmFsdWVzLFxyXG5cdF9zbGVlcCxcclxufSBmcm9tICcuL19wcm9taXNlJztcclxuXHJcbi8vX3F1ZXVlXHJcbmV4cG9ydCB0eXBlIHtcclxuXHRJUXVldWUsXHJcbn0gZnJvbSAnLi9fcXVldWUnO1xyXG5cclxuZXhwb3J0IHtcclxuXHRfcXVldWUsXHJcbn0gZnJvbSAnLi9fcXVldWUnO1xyXG5cclxuLy9fc29ydFxyXG5leHBvcnQgdHlwZSB7XHJcblx0U29ydERpcmVjdGlvbixcclxuXHRTb3J0T3JkZXIsXHJcbn0gZnJvbSAnLi9fc29ydCc7XHJcblxyXG5leHBvcnQge1xyXG5cdF9zb3J0VmFsdWVzLFxyXG59IGZyb20gJy4vX3NvcnQnO1xyXG5cclxuLy9fdGVybVxyXG5leHBvcnQgdHlwZSB7XHJcblx0SVRlcm1Gb3JtYXQsXHJcbn0gZnJvbSAnLi9fdGVybSc7XHJcblxyXG5leHBvcnQge1xyXG5cdFRlcm0sXHJcbn0gZnJvbSAnLi9fdGVybSc7XHJcblxyXG4vL19FbGFwc2VkVGltZVxyXG5leHBvcnQge1xyXG5cdEVsYXBzZWRUaW1lLFxyXG59IGZyb20gJy4vX0VsYXBzZWRUaW1lJztcclxuXHJcbi8vX29iamVjdHNcclxuZXhwb3J0IHtcclxuXHRfZmxhdHRlbixcclxuXHRfaGFzUHJvcCxcclxuXHRfaGFzUHJvcHMsXHJcblx0X2hhc0FueVByb3BzLFxyXG59IGZyb20gJy4vX29iamVjdHMnO1xyXG5cclxuLy9fZGVib3VuY2VkXHJcbmV4cG9ydCB7XHJcblx0X2RlYm91Y2VkLFxyXG59IGZyb20gJy4vX2RlYm91Y2VkJztcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTMpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJjb25zdHJ1Y3RvciIsInN0YXJ0X3RpbWUiLCJEYXRlIiwic3RvcF90aW1lIiwidW5kZWZpbmVkIiwiX21zIiwic3RhcnQiLCJfbm93IiwiX2lzRGF0ZSIsIm5vdyIsInVwZGF0ZVN0YXJ0IiwiX3N0YXJ0IiwiZ2V0VGltZSIsInN0b3AiLCJ0IiwiX3N0b3BfdGltZSIsIl9zdG9wIiwic3RhcnRlZCIsInN0b3BwZWQiLCJtcyIsInBhcnNlSW50Iiwic2VjIiwiZGVjaW1hbFBsYWNlcyIsIl9yb3VuZCIsIm1pbiIsImRhdGEiLCJlbGFwc2VkX21zIiwiX2JhdGNoVmFsdWVzIiwiYXJyYXkiLCJiYXRjaFNpemUiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJFcnJvciIsIl9hcnJheSIsInNsaWNlIiwiX2J1ZmZlciIsImxlbmd0aCIsInB1c2giLCJzcGxpY2UiLCJ2YWx1ZSIsImlzTmFOIiwiX2dldERhdGUiLCJfZGVmYXVsdCIsIl9kYXRldGltZSIsImRhdGUiLCJfcGFkIiwidiIsInBhZFN0YXJ0IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiX3RpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwiX2RlYm91Y2VkIiwiaGFuZGxlciIsImRlbGF5IiwibWF4V2FpdCIsImltbWVkaWF0ZSIsImltbWVkaWF0ZVRpbWVyIiwiY2FsbFRpbWVyIiwid2FpdFRpbWVyIiwibmV4dENhbGwiLCJwYXJzZUZsb2F0IiwiZXhlY3V0ZSIsImlzX2ltbWVkaWF0ZSIsIm5leHQiLCJjbGVhclRpbWVvdXQiLCJhcHBseSIsInNldFRpbWVvdXQiLCJ3cmFwcGVyIiwiYXJncyIsIl9uZXh0Iiwibm9fd2FpdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJuYW1lIiwiX3NheUhlbGxvIiwiaGVsbG8iLCJjb25zb2xlIiwibG9nIiwiX2pzb25TdHJpbmdpZnkiLCJzcGFjZSIsIl91bmRlZmluZWQiLCJfc3BhY2UiLCJwYXJlbnRzIiwicGF0aCIsInJlZnMiLCJNYXAiLCJfcmVwbGFjZXIiLCJrZXkiLCJTdHJpbmciLCJTZXQiLCJpIiwicHJldiIsIl9wYXJlbnRzIiwib3RoZXIiLCJnZXQiLCJzZXQiLCJqb2luIiwiSlNPTiIsInN0cmluZ2lmeSIsImNsZWFyIiwiX2pzb25QYXJzZSIsInBhcnNlIiwiZSIsIl9qc29uQ2xvbmUiLCJ2YWwiLCJfaXNOdW1lcmljIiwiYm9vbGVhbnMiLCJibGFua3MiLCJ0cmltIiwidGVzdCIsIl90b051bSIsIk5hTiIsImZpeEZsb2F0IiwibWF0Y2hlcyIsIm51bSIsInAiLCJtYXRjaCIsInJlcGxhY2UiLCJSZWdFeHAiLCJmbG9hdHMiLCJsZW4iLCJuIiwieCIsInN1YnN0cmluZyIsIl9udW0iLCJfaW50IiwicGxhY2VzIiwiTWF0aCIsImFicyIsInJvdW5kIiwiRVBTSUxPTiIsIl9jb21tYXMiLCJ6ZXJvcyIsIndhcm4iLCJpbmRleE9mIiwicGFkRW5kIiwic3BsaXQiLCJyZWR1Y2UiLCJfcmFuZCIsIm1heCIsImZsb29yIiwicmFuZG9tIiwiX2ZsYXR0ZW4iLCJ2YWx1ZXMiLCJmbGF0IiwiSW5maW5pdHkiLCJfaGFzUHJvcCIsInByb3AiLCJvd24iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfaGFzUHJvcHMiLCJwcm9wcyIsImZpbHRlciIsImsiLCJfaGFzQW55UHJvcHMiLCJfYXN5bmNBbGwiLCJjYWxsYmFjayIsIlByb21pc2UiLCJyZXNvbHZlIiwiX2xlbiIsIl9yZXNvbHZlIiwiY291bnQiLCJmb3JFYWNoIiwiYSIsInRoZW4iLCJzdGF0dXMiLCJpbmRleCIsImNhdGNoIiwicmVhc29uIiwiZmluYWxseSIsIl9hc3luY1ZhbHVlcyIsInNpemUiLCJlYWNoIiwic2VsZiIsImNhbmNlbCIsIl9icmVhayIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0aGF0IiwiZG9uZSIsIl9zbGVlcCIsInRpbWVvdXQiLCJfcXVldWUiLCJpdGVtcyIsImhlYWQiLCJ0YWlsIiwiaXNFbXB0eSIsImVucXVldWUiLCJkZXF1ZXVlIiwiaXRlbSIsInBlZWsiLCJfc29ydFZhbHVlcyIsInNvcnQiLCJfY29tcGFyZSIsImIiLCJsb2NhbGVDb21wYXJlIiwiX2RpcmVjdGlvbiIsImluY2x1ZGVzIiwic3RhcnRzV2l0aCIsIl9lbnRyaWVzIiwiZW50cmllcyIsInJlc3VsdCIsIl9tZXRob2QiLCJfdWlkIiwidG9TdHJpbmciLCJidWZmZXIiLCJfc3RyaW5nIiwiX3N0cmluZ2FibGUiLCJmYWlsZWQiLCJfc3RyIiwiQXJyYXkiLCJpc0FycmF5IiwidG1wIiwiX3N0ck5vcm0iLCJub3JtYWxpemUiLCJfcmVnRXNjYXBlIiwiX3N0ckVzY2FwZSIsIm0iLCJzIiwiaCIsImVuY29kZVVSSUNvbXBvbmVudCIsImZyb21DaGFyQ29kZSIsIl90cmltIiwiY2hhcnMiLCJybCIsImQxIiwiZDIiLCJfY2hhcnMiLCJ1bnNoaWZ0IiwicGF0dGVybiIsIl9sdHJpbSIsIl9ydHJpbSIsIl90aXRsZUNhc2UiLCJrZWVwQ2FzZSIsInRvVXBwZXJDYXNlIiwidG9Mb3dlckNhc2UiLCJfc2VudGVuY2VDYXNlIiwibWFwIiwiZmlyc3QiLCJjaGFyQXQiLCJyZXN0IiwiX3NuYWtlQ2FzZSIsInRyaW1UcmFpbGluZyIsInJlcyIsIl9zbHVnQ2FzZSIsIl9zdHVkbHlDYXNlIiwid29yZCIsIl9jYW1lbENhc2UiLCJUZXJtIiwic3RhdGljIiwiZm9ybWF0cyIsIkZNIiwiRk9STUFUUyIsIlBGIiwiUFJFREVGSU5FRF9GT1JNQVRTIiwiX2FkZFBGIiwiX2Zvcm1hdHMiLCJnZXRGb3JtYXRzIiwiX2Zvcm1hdCIsIkRJU0FCTEVEIiwiZiIsInJlc2V0IiwiX2FyZ3MiLCJmb3JtYXQiLCJjb25jYXQiLCJkZWJ1ZyIsImVycm9yIiwiaW5mbyIsIl9jbGVhciIsIl92YWwiLCJ0eXBlIiwiaXRlcmF0b3IiLCJ0bXBfZW50cmllcyIsImNlbGxNYXhMZW5ndGgiLCJkaXZpZGVyIiwiZGF0YV9pdGVtcyIsImRhdGFfdHlwZSIsImxpc3QiLCJzdHJWYWwiLCJjb2xvciIsIl90eXBlIiwiZnJvbUVudHJpZXMiLCJfdmFsdWUiLCJ0ZXh0IiwibW9kZSIsInRhYmxlX2l0ZW1zIiwibWFwX2tleXMiLCJtYXBfaXRlbXMiLCJkYXRhX2l0ZW0iLCJyIiwibGlzdF9pdGVtcyIsImxpc3RfdHlwZSIsIm1hcF9pdGVtIiwidGFibGVfaXRlbSIsIndpZHRoX21hcCIsInN0cl9pdGVtcyIsInN0cl9pdGVtIiwicm93c19sZW4iLCJtYXhfbGluZXMiLCJzdHJfaXRlbV9saW5lcyIsIndpZHRoIiwibGluZXMiLCJsaW5lIiwiYyIsIl8iLCJsaW5lX3Jvd3MiLCJyb3dzIiwibGluZV9yb3ciLCJyb3ciLCJicmlnaHQiLCJkaW0iLCJ1bmRlcnNjb3JlIiwiYmxpbmsiLCJyZXZlcnNlIiwiaGlkZGVuIiwiZmdfYmxhY2siLCJmZ19yZWQiLCJmZ19ncmVlbiIsImZnX3llbGxvdyIsImZnX2JsdWUiLCJmZ19tYWdlbnRhIiwiZmdfY3lhbiIsImZnX3doaXRlIiwiZmdfZ3JheSIsImJnX2JsYWNrIiwiYmdfcmVkIiwiYmdfZ3JlZW4iLCJiZ195ZWxsb3ciLCJiZ19ibHVlIiwiYmdfbWFnZW50YSIsImJnX2N5YW4iLCJiZ193aGl0ZSIsImJnX2dyYXkiLCJzdWNjZXNzIiwiYmdfbG9nIiwiYmdfZGVidWciLCJiZ19lcnJvciIsImJnX3dhcm4iLCJiZ19pbmZvIiwiYmdfc3VjY2VzcyIsIl91dWlkIiwiRWxhcHNlZFRpbWUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==