!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.xutils=t():e.xutils=t()}(this,(()=>(()=>{"use strict";var e={713:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,i)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),i=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),i(r(377),t)},448:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ElapsedTime=void 0;const n=r(925),i=r(782);t.ElapsedTime=class{constructor(){this.start_time=new Date,this.stop_time=void 0,this._ms=void 0}start(){const e=new Date;return this.start_time=(0,n._isDate)(this.start_time)?this.start_time:e,this.stop_time=void 0,this._ms=void 0,this}now(e=!1){const t=new Date,r=(0,n._isDate)(this.start_time)?this.start_time:this.start_time=t;return this._ms=t.getTime()-r.getTime(),e&&(this.start_time=t),this}stop(){const e=new Date,t=((0,n._isDate)(this.start_time)?this.start_time:e).getTime(),r=this.stop_time,i=(0,n._isDate)(r)&&r.getTime()>=t?r:this.stop_time=e;return this._ms=i.getTime()-t,this}started(){return(0,n._isDate)(this.start_time)}stopped(){return(0,n._isDate)(this.stop_time)}ms(){return parseInt(this._ms)}sec(e=3){return(0,i._round)(this.ms()/1e3,e)}min(e=3){return(0,i._round)(this.ms()/6e4,e)}data(){return this.stop(),{start_time:(0,n._isDate)(this.start_time)?this.start_time:void 0,stop_time:(0,n._isDate)(this.stop_time)?this.stop_time:void 0,elapsed_ms:this.ms()}}}},586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._batchValues=void 0,t._batchValues=(e,t)=>{if(!(Number.isInteger(t)&&t>0))throw new Error("Invalid batch size.");const r=e.slice(0),n=[];for(;r.length;)n.push(r.splice(0,t));return n}},925:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._timestamp=t._datetime=t._getDate=t._isDate=void 0,t._isDate=e=>e instanceof Date&&!isNaN(e.getTime()),t._getDate=(e,r)=>((0,t._isDate)(e)||(0,t._isDate)(e=new Date(e))||(e=r instanceof Date?r:void 0===r?new Date:new Date(r)),e),t._datetime=(e,r)=>{const n=(0,t._getDate)(e,r),i=e=>`${e}`.padStart(2,"0");return(0,t._isDate)(n)?`${n.getFullYear()}-${i(n.getMonth()+1)}-${i(n.getDate())} ${i(n.getHours())}:${i(n.getMinutes())}:${i(n.getSeconds())}`:`${n}`},t._timestamp=(e,r)=>{const n=(0,t._getDate)(e,r);return(0,t._isDate)(n)?n.toISOString():`${n}`}},802:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._debouced=void 0,t._debouced=(e,t=200,r=0,n=!1)=>{let i,s,o,a;t=!isNaN(t=parseFloat(t))&&t>=0?t:200,r=!isNaN(r=parseFloat(r))&&r>=0&&r>t?r:0,n=!!n;const u=r=>{let u=a;a=void 0,o&&(clearTimeout(o),o=void 0),s&&!r&&(clearTimeout(s),s=void 0),(null==u?void 0:u.length)&&"function"==typeof e&&e.apply(...u),t&&n&&!r&&(i=setTimeout((()=>{clearTimeout(i),i=void 0}),t))},l=function(...e){if(a=[this,e],!t)return u();const l=(e=0)=>{clearTimeout(s),s=setTimeout((()=>u()),t),e||!r||o||(o=setTimeout((()=>u()),r))};if(!n||i||s)return l();l(1),u(1)};return Object.defineProperties(l,{length:{value:e.length},name:{value:`${e.name||"anonymous"}__debounced__${t}`}}),l}},597:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._sayHello=void 0,t._sayHello=e=>{const t=`[x] - Hello ${e=(null==e?void 0:e.length)?e:"Thuku"}!`;return console.log(t),t}},917:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._jsonClone=t._jsonParse=t._jsonStringify=void 0,t._jsonStringify=(e,t,r=null)=>{const n=null===t?void 0:t,i=[],s=["this"],o=new Map,a=function(e,t){if(null===t)return t;if(t instanceof Error&&(t={"[Error]":String(t)}),t instanceof Set&&(t={"[Set]":[...t]}),t instanceof Map&&(t={"[Map]":[...t]}),"object"==typeof t){e&&((e,t)=>{let r=i.length-1,n=i[r];if(n[e]===t||0===r)return s.push(e),void i.push(t);for(;r-- >=0;)if(n=i[r],(null==n?void 0:n[e])===t){r+=2,i.length=r,s.length=r,--r,i[r]=t,s[r]=e;break}})(e,t);const r=o.get(t);if(r)return"[Circular]"+r;o.set(t,s.join("."))}return t};try{return void 0===e&&(e=void 0!==r?r:r=null),i.push(e),JSON.stringify(e,a,n)}finally{o.clear(),i.length=0,s.length=1}},t._jsonParse=(e,t)=>{try{return JSON.parse(e)}catch(e){return t}},t._jsonClone=(e,r,n=null)=>{let i=(0,t._jsonStringify)(e,r,n);return void 0!==i&&(i=(0,t._jsonParse)(i)),i}},782:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._rand=t._commas=t._round=t._int=t._num=t._toNum=t._isNumeric=void 0,t._isNumeric=(e,t=!1,r=!1)=>{if("number"==typeof e)return!isNaN(e);if("boolean"==typeof e)return!!t;const n=String(e).trim();return""===n?!!r:/(^[+-]?[0-9]+([.][0-9]+)?([eE][+-]?[0-9]+)?$)|(^[+-]?\.[0-9]+$)|(^[+-]?[0-9]+\.$)/.test(n)},t._toNum=(e,t=NaN,r=!0)=>{let n,i,s=e;if("number"!=typeof e){if("string"==typeof e){let t=/^\s*([\+-])\s*/,r=e.match(t);r&&(e=e.replace(t,"")),(e=e.replace(/^\s*[\+-]/,"").trim()).match(/^\d{1,3}(,\d{3})*(\.|(\.\d+))?$/)&&(e=e.replace(/,/g,"").trim()),e.match(/^\d*(\.|(\.\d+))?$/)?r&&(e=r[1]+e):e="x"}s=isNaN(s=Number(e))?parseFloat(s):s}if(""===s||null===s||isNaN(s=Number(s)))return t;if(r&&new RegExp("\\.\\d*(0{3}\\d*)").test(n=String(s))&&(i=n.match(/\.(\d+)/))){let e=i[1],t=e.length,r=-1,o=-1;for(let n=t-1;n>=0;n--)if(Number(e[n])){if(o>-1){if(r=n,o-r>=5)break;o=r=-1}}else o<0&&(o=n);r>-1&&o>-1&&o-r>=5&&(s=+n.substring(0,n.length-t+o+1))}return s},t._num=(e,r=NaN)=>(0,t._toNum)(e,r),t._int=(e,r=NaN)=>parseInt(String((0,t._toNum)(e,r))),t._round=(e,r=2)=>{if(isNaN(e))return NaN;let n=Math.pow(10,Math.abs((0,t._int)(r,2)));return Math.round((e+Number.EPSILON)*n)/n},t._commas=(e,r=2,n=!1)=>{const i=(0,t._round)((0,t._num)(e),r=(0,t._int)(r,2));if(isNaN(i))return console.warn("[WARNING: `_commas`] NaN value:",e),"";let s=String(i).replace(/\B(?=(\d{3})+(?!\d))/g,",");return r&&n&&(-1===s.indexOf(".")?s+=".".padEnd(r+1,"0"):s=s.split(".").reduce(((e,t,n)=>(e.push(1===n&&t.length<r?t.padEnd(r,"0"):t),e)),[]).join(".")),s},t._rand=(e,t)=>Math.floor(Math.random()*(t-e+1))+e},962:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._hasAnyProps=t._hasProps=t._hasProp=t._flatten=void 0,t._flatten=e=>e.flat(1/0),t._hasProp=(e,t,r=!1)=>!("object"!=typeof e||!e)&&(Object.prototype.hasOwnProperty.call(e,t)||!r&&t in e),t._hasProps=(e,...r)=>!!r.length&&!r.filter((r=>!(0,t._hasProp)(e,r))).length,t._hasAnyProps=(e,...r)=>!!r.length&&!!r.filter((r=>(0,t._hasProp)(e,r))).length},16:function(e,t){var r=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(i,s){function o(e){try{u(n.next(e))}catch(e){s(e)}}function a(e){try{u(n.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,a)}u((n=n.apply(e,t||[])).next())}))},n=this&&this.__asyncValues||function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e="function"==typeof __values?__values(e):e[Symbol.iterator](),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}};Object.defineProperty(t,"__esModule",{value:!0}),t._sleep=t._asyncValues=t._asyncAll=void 0,t._asyncAll=(e,t)=>r(void 0,void 0,void 0,(function*(){return new Promise((n=>{const i=[],s=e.length,o=()=>n(i);if(!s)return o();let a=0;e.forEach(((e,n,u)=>{r(void 0,void 0,void 0,(function*(){return Promise.resolve(t?t(e,n,u):e)})).then((e=>i.push({status:"resolved",index:n,value:e}))).catch((e=>i.push({status:"rejected",index:n,reason:e}))).finally((()=>++a===s?o():void 0))}))}))})),t._asyncValues=e=>({values:()=>e,size:()=>e.length,each(e){var t,i,s,o;return r(this,void 0,void 0,(function*(){let r=this,a=!1,u=-1,l=()=>{a=!0};try{for(var c,_=!0,f=n(r);c=yield f.next(),!(t=c.done);_=!0){o=c.value,_=!1;const t=o;if(u++,a)break;yield e(t,u,r.size(),l)}}catch(e){i={error:e}}finally{try{_||t||!(s=f.return)||(yield s.call(f))}finally{if(i)throw i.error}}}))},[Symbol.asyncIterator](){let t=0;const n=this;return{next(){return r(this,void 0,void 0,(function*(){let r,i=n.size();return t>=i?{done:!0,value:r}:(r=yield Promise.resolve(e[t]),t++,{done:!1,value:r})}))}}}}),t._sleep=e=>r(void 0,void 0,void 0,(function*(){return e=!isNaN(e)&&e>=0?e:0,new Promise((t=>setTimeout((()=>t(e)),e)))}))},78:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._queue=void 0,t._queue=()=>{const e={};let t=0,r=0;return{get count(){return r},get length(){return r-t},get isEmpty(){return 0===this.length},enqueue(t){e[r]=t,r++},dequeue(){const r=e[t];return delete e[t],t++,r},peek:()=>e[t],values:()=>Object.values(e)}}},172:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._sortValues=void 0,t._sortValues=(e,t)=>{const r=(e,t)=>"string"==typeof e&&"string"==typeof t&&"function"==typeof(null==e?void 0:e.localeCompare)?e.localeCompare(t):e>t?1:e<t?-1:0,n=e=>{if("number"==typeof e&&[1,-1].includes(e))return e;if("string"==typeof e){if(e.startsWith("asc"))return 1;if(e.startsWith("desc"))return-1}return 1};return e.sort((()=>{if(Object(t)===t){const e=Object.entries(t);if(e.length)return(t,i)=>{let s,o;for(o=0,s=0;0===o||s<e.length;s++){const[a,u]=e[s];o=r(null==t?void 0:t[a],null==i?void 0:i[a])*n(u)}return o}}return(e,i)=>r(e,i)*n(t)})())}},301:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._trim=t._strEscape=t._regEscape=t._str=t._strNorm=t._stringable=t._string=t._uuid=void 0;const n=r(917);t._uuid=function(e){const t=()=>Math.random().toString(36).substring(2)+(new Date).getTime().toString(36);if(!(void 0!==e&&Number.isInteger(e)&&e>0&&e<=64))return t();let r="";for(;r.length<e;)r+=t();return r.substring(0,e)},t._string=(e,t="")=>{let r="";try{r=e instanceof Date&&!isNaN(e.getTime())?e.toISOString():String(e)}catch(e){r=t}return r},t._stringable=e=>{const r=`!${Date.now()}!`,n=(0,t._string)(e,r);return n!==r&&!/\[object \w+\]/.test(n)&&n},t._strNorm=e=>e.normalize("NFD").replace(/[\u0300-\u036f]/g,""),t._str=(e,r=!1,i=!1)=>{if("string"!=typeof e){if(null==e)return"";if("object"==typeof e){if(Array.isArray(e))return i?(0,n._jsonStringify)(e):"";const r=(0,t._stringable)(e);if(!1===r)return i?(0,n._jsonStringify)(e):"";e=r}else e=(0,t._string)(e)}return r?e.trim():e},t._regEscape=e=>(0,t._str)(e).replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),t._strEscape=e=>JSON.stringify((0,t._str)(e)).replace(/^"|"$/g,"").replace(/\\"/g,'"').replace(/\\u000b\\u0000/g,"\\x00"),t._trim=(e,r="",n=" \n\r\t\v\0")=>{r=["","r","l","right","left"].includes(r)?r:"";let i=`[${(0,t._regEscape)(n)}]*`,s=`^${i}|${i}$`;return["l","left"].includes(r)?s=`^${i}`:["r","right"].includes(r)&&(s=`${i}$`),e.replace(new RegExp(s,"g"),"")}},692:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Term=void 0;const n=r(301),i=r(917);class s{static getFormats(e){const t=this.FORMATS,r=this.PREDEFINED_FORMATS;return(Array.isArray(e)?e:"string"==typeof e?[e]:[]).reduce(((e,n)=>{if((n=n.trim().toLowerCase())&&"reset"!==n){let i=n=n.replace(/[^a-z0-9]/gi,"_").replace("grey","gray");const s=t=>{const n=r[t];Array.isArray(n)?e.push(...n):"string"==typeof n&&e.push(n)};t.hasOwnProperty(n)?e.push(n):t.hasOwnProperty(i=`fg_${n}`)?e.push(i):r.hasOwnProperty(n)?s(n):r.hasOwnProperty(i=`bg_${n}`)&&s(i)}return e}),[])}static format(e,...t){let r;const i=this.getFormats(e),s=t=>{if(this.DISABLED||!e.length)return t;if("object"==typeof t&&t){if(Array.isArray(t))return t;if(new RegExp("\\[object \\w+\\]").test(r=(0,n._string)(t)))return t;t=r}return"string"==typeof t&&t.length?i.reduce(((e,t)=>this.FORMATS[t]+e+this.FORMATS.reset),t):t},o=this,a=t;return{format(e,...t){return a.push(o.format(e,...t).values()),this},values:(...e)=>a.concat(e).map((e=>s(e))),clear(...e){return o.clear(...this.values(...e))},log(...e){console.log(...this.values(...e))},debug(...e){console.debug(...this.values(...e))},warn(...e){console.warn(...this.values(...e))},error(...e){console.error(...this.values(...e))},info(...e){console.info(...this.values(...e))}}}static clear(...e){const t=e=>Object.values(this.FORMATS).reduce(((e,t)=>e.replace(new RegExp(String(t).replace(/\x1B/,"\\x1B").replace(/\[/,"\\["),"g"),"")),e);return e.map((e=>"string"==typeof e&&e.trim().length?t(e):e))}static text(e,t){const r=(0,n._string)(e),i=(Array.isArray(t)?t:"string"==typeof t?[t]:[]).filter((e=>"string"==typeof e&&!!e.trim()));return i.length&&r.trim().length?this.format(i,r).values()[0]:r}static log(...e){this.format("log",...e).log()}static debug(...e){this.format("debug",...e).debug()}static error(...e){this.format("error",...e).error()}static warn(...e){this.format("warn",...e).warn()}static info(...e){this.format("info",...e).info()}static success(...e){this.format("success",...e).log()}static list(e,t=!1){var r;let s=[e],o="values";if("object"==typeof e&&e)if(o=null===(r=e[Symbol.iterator])||void 0===r?void 0:r.name)s="entries"===o?t?[...e]:[e]:[...e];else if(o="values",s=[e],t&&!1===(0,n._stringable)(e)){let t=(0,i._jsonClone)(e),r=[];"object"==typeof t&&t&&(r=Object.entries(t)).length||(r=Object.entries(e)),r.length&&(o="entries",s=r)}return[s,o]}static table(e,t=248,r=!1){const s=this,[o,a]=s.list(e,"object"==typeof e&&e&&!(0,n._stringable)(e)),u=e=>{let t,r;if(Array.isArray(e)||!1===(r=(0,n._stringable)(e))){if("object"==typeof e&&e){const t=e[Symbol.iterator];t?(e=[...e],"entries"===t&&(e=Object.fromEntries(e))):e=(0,i._jsonClone)(e)}e=(0,i._jsonStringify)(e),t="magenta"}else t="green","number"==typeof e?t="yellow":null==e?t="gray":!0===e?t="cyan":!1===e?t="red":/^\d{4}-(?:0[1-9]|1[0-2])-(?:[0-2][1-9]|[1-3]0|3[01])T(?:[0-1][0-9]|2[0-3])(?::[0-6]\d)(?::[0-6]\d)?(?:\.\d{3})?(?:[+-][0-2]\d:[0-5]\d|Z)?$/.test(r)&&(t="magenta"),e=r;return[e,t]};if("values"===a&&o.length<2){const[t,r]=u(e);return void console.log(s.text(t,r))}let l;const c=[];if("entries"===a)c.push(["(index)","Values"]),c.push(...o);else{let e=[],t=[];o.forEach(((r,i)=>{let[o,a]=s.list(r,!i||"entries"===l);i||(l=a);const u={};o.forEach(((t,r)=>{let i,s;"entries"===a?(i=(0,n._str)(t[0],!0,!0),s=t[1]):(i=`${r}`,s=t),e.includes(i)||e.push(i),u[i]=s})),t.push(u)})),c.push(["(index)",...e]),t.forEach(((t,r)=>{const n=[];for(const r of e)n.push(t[r]);c.push([r,...n])}))}const _={},f=[];c.forEach((e=>{const r=[];e.forEach(((e,n)=>{const[i,s]=u(e);_.hasOwnProperty(n)||(_[n]=0);let o=i.length;o>t&&(o=t),o>_[n]&&(_[n]=o),r.push([i,s])})),f.push(r)}));const g=f.length;f.forEach(((e,t)=>{let n=0,i=[];e.forEach(((e,r)=>{let[o,a]=e;r&&t||(a=!r&&t&&"values"===l?"gray":"white");const u=_[r],c=[];if(o.length>u){for(;o.length>u;){const e=o.substring(0,u).padEnd(u);o=o.slice(u),c.push(s.text(e,a))}o.length&&c.push(s.text(o.padEnd(u),a))}else c.push(s.text(o.padEnd(u),a));i.push(c),n<c.length&&(n=c.length)})),i=i.map(((e,t)=>{const r=_[t];return[...Array(n)].map(((t,n)=>n<e.length?e[n]:"".padEnd(r)))}));const o=[...Array(n)].map((()=>[]));i.forEach(((e,t)=>{e.forEach(((e,r)=>o[r][t]=e))}));const a=[],u=o.length;o.forEach(((e,n)=>{n||t||a.push("┌─"+e.map(((e,t)=>"".padEnd(_[t],"─"))).join("─┬─")+"─┐"),a.push("│ "+e.join(" │ ")+" │"),(!t||r)&&n+1===u&&t+1<g&&a.push("├─"+e.map(((e,t)=>"".padEnd(_[t],"─"))).join("─┼─")+"─┤"),n+1===u&&t+1===g&&a.push("└─"+e.map(((e,t)=>"".padEnd(_[t],"─"))).join("─┴─")+"─┘")})),a.forEach((e=>console.log(e)))}))}}t.Term=s,s.DISABLED=!1,s.FORMATS={reset:"[0m",bright:"[1m",dim:"[2m",underscore:"[4m",blink:"[5m",reverse:"[7m",hidden:"[8m",fg_black:"[30m",fg_red:"[31m",fg_green:"[32m",fg_yellow:"[33m",fg_blue:"[34m",fg_magenta:"[35m",fg_cyan:"[36m",fg_white:"[37m",fg_gray:"[90m",bg_black:"[40m",bg_red:"[41m",bg_green:"[42m",bg_yellow:"[43m",bg_blue:"[44m",bg_magenta:"[45m",bg_cyan:"[46m",bg_white:"[47m",bg_gray:"[100m"},s.PREDEFINED_FORMATS={log:"fg_white",debug:"fg_gray",error:"fg_red",warn:"fg_yellow",info:"fg_cyan",success:"fg_green",bg_log:["bg_blue","fg_white"],bg_debug:["bg_gray","fg_black"],bg_error:["bg_red","fg_white"],bg_warn:["bg_yellow","fg_black"],bg_info:["bg_cyan","fg_black"],bg_success:["bg_green","fg_white"]}},377:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t._debouced=t._hasAnyProps=t._hasProps=t._hasProp=t._flatten=t.ElapsedTime=t.Term=t._sortValues=t._queue=t._sleep=t._asyncValues=t._asyncAll=t._rand=t._commas=t._round=t._int=t._num=t._toNum=t._isNumeric=t._timestamp=t._datetime=t._getDate=t._isDate=t._batchValues=t._strEscape=t._regEscape=t._str=t._strNorm=t._stringable=t._string=t._uuid=t._jsonClone=t._jsonParse=t._jsonStringify=t._sayHello=void 0;var n=r(597);Object.defineProperty(t,"_sayHello",{enumerable:!0,get:function(){return n._sayHello}});var i=r(917);Object.defineProperty(t,"_jsonStringify",{enumerable:!0,get:function(){return i._jsonStringify}}),Object.defineProperty(t,"_jsonParse",{enumerable:!0,get:function(){return i._jsonParse}}),Object.defineProperty(t,"_jsonClone",{enumerable:!0,get:function(){return i._jsonClone}});var s=r(301);Object.defineProperty(t,"_uuid",{enumerable:!0,get:function(){return s._uuid}}),Object.defineProperty(t,"_string",{enumerable:!0,get:function(){return s._string}}),Object.defineProperty(t,"_stringable",{enumerable:!0,get:function(){return s._stringable}}),Object.defineProperty(t,"_strNorm",{enumerable:!0,get:function(){return s._strNorm}}),Object.defineProperty(t,"_str",{enumerable:!0,get:function(){return s._str}}),Object.defineProperty(t,"_regEscape",{enumerable:!0,get:function(){return s._regEscape}}),Object.defineProperty(t,"_strEscape",{enumerable:!0,get:function(){return s._strEscape}});var o=r(586);Object.defineProperty(t,"_batchValues",{enumerable:!0,get:function(){return o._batchValues}});var a=r(925);Object.defineProperty(t,"_isDate",{enumerable:!0,get:function(){return a._isDate}}),Object.defineProperty(t,"_getDate",{enumerable:!0,get:function(){return a._getDate}}),Object.defineProperty(t,"_datetime",{enumerable:!0,get:function(){return a._datetime}}),Object.defineProperty(t,"_timestamp",{enumerable:!0,get:function(){return a._timestamp}});var u=r(782);Object.defineProperty(t,"_isNumeric",{enumerable:!0,get:function(){return u._isNumeric}}),Object.defineProperty(t,"_toNum",{enumerable:!0,get:function(){return u._toNum}}),Object.defineProperty(t,"_num",{enumerable:!0,get:function(){return u._num}}),Object.defineProperty(t,"_int",{enumerable:!0,get:function(){return u._int}}),Object.defineProperty(t,"_round",{enumerable:!0,get:function(){return u._round}}),Object.defineProperty(t,"_commas",{enumerable:!0,get:function(){return u._commas}}),Object.defineProperty(t,"_rand",{enumerable:!0,get:function(){return u._rand}});var l=r(16);Object.defineProperty(t,"_asyncAll",{enumerable:!0,get:function(){return l._asyncAll}}),Object.defineProperty(t,"_asyncValues",{enumerable:!0,get:function(){return l._asyncValues}}),Object.defineProperty(t,"_sleep",{enumerable:!0,get:function(){return l._sleep}});var c=r(78);Object.defineProperty(t,"_queue",{enumerable:!0,get:function(){return c._queue}});var _=r(172);Object.defineProperty(t,"_sortValues",{enumerable:!0,get:function(){return _._sortValues}});var f=r(692);Object.defineProperty(t,"Term",{enumerable:!0,get:function(){return f.Term}});var g=r(448);Object.defineProperty(t,"ElapsedTime",{enumerable:!0,get:function(){return g.ElapsedTime}});var d=r(962);Object.defineProperty(t,"_flatten",{enumerable:!0,get:function(){return d._flatten}}),Object.defineProperty(t,"_hasProp",{enumerable:!0,get:function(){return d._hasProp}}),Object.defineProperty(t,"_hasProps",{enumerable:!0,get:function(){return d._hasProps}}),Object.defineProperty(t,"_hasAnyProps",{enumerable:!0,get:function(){return d._hasAnyProps}});var p=r(802);Object.defineProperty(t,"_debouced",{enumerable:!0,get:function(){return p._debouced}})}},t={};return function r(n){var i=t[n];if(void 0!==i)return i.exports;var s=t[n]={exports:{}};return e[n].call(s.exports,s,s.exports,r),s.exports}(713)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLaEssRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBUzBVLEdBR3BFelUsRUFBT0QsT0FDZixDQ25CMEIwVSxDQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8veHV0aWxzL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19FbGFwc2VkVGltZS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2JhdGNoLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fZGF0ZXRpbWUudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19kZWJvdWNlZC50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX2hlbGxvLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fanNvbi50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX251bWJlci50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvX29iamVjdHMudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19wcm9taXNlLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fcXVldWUudHMiLCJ3ZWJwYWNrOi8veHV0aWxzLy4vbGliL3V0aWxzL19zb3J0LnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fc3RyaW5nLnRzIiwid2VicGFjazovL3h1dGlscy8uL2xpYi91dGlscy9fdGVybS50cyIsIndlYnBhY2s6Ly94dXRpbHMvLi9saWIvdXRpbHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8veHV0aWxzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3h1dGlscy93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW10sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wieHV0aWxzXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInh1dGlsc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHRoaXMsICgpID0+IHtcbnJldHVybiAiLCJleHBvcnQgKiBmcm9tICcuL3V0aWxzJzsiLCJpbXBvcnQgeyBfaXNEYXRlIH0gZnJvbSAnLi9fZGF0ZXRpbWUnO1xyXG5pbXBvcnQgeyBfcm91bmQgfSBmcm9tICcuL19udW1iZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVsYXBzZWRUaW1lXHJcbntcclxuXHQvL3Byb3BzXHJcblx0c3RhcnRfdGltZTogRGF0ZXx1bmRlZmluZWQ7XHJcblx0c3RvcF90aW1lOiBEYXRlfHVuZGVmaW5lZDtcclxuXHRfbXM6IG51bWJlcnx1bmRlZmluZWQ7XHJcblx0XHJcblx0LyoqXHJcblx0ICogTmV3IGluc3RhbmNlXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoKXtcclxuXHRcdHRoaXMuc3RhcnRfdGltZSA9IG5ldyBEYXRlKCk7XHJcblx0XHR0aGlzLnN0b3BfdGltZSA9IHVuZGVmaW5lZDtcclxuXHRcdHRoaXMuX21zID0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU3RhcnQgdGltZSB0cmFja2luZyAoc2V0cyBzdGFydF90aW1lIHRvIG5vdyBhbmQgcmVzZXRzIG90aGVyIHByb3BlcnRpZXMpXHJcblx0ICovXHJcblx0c3RhcnQoKTogRWxhcHNlZFRpbWUge1xyXG5cdFx0Y29uc3QgX25vdyA9IG5ldyBEYXRlKCk7XHJcblx0XHR0aGlzLnN0YXJ0X3RpbWUgPSBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSkgPyB0aGlzLnN0YXJ0X3RpbWUgOiBfbm93O1xyXG5cdFx0dGhpcy5zdG9wX3RpbWUgPSB1bmRlZmluZWQ7XHJcblx0XHR0aGlzLl9tcyA9IHVuZGVmaW5lZDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVHJhY2sgY3VycmVudCB0aW1lIChzZXRzIHRoaXMuX21zIHRvIHRpbWUgZGlmZmVyZW5jZSBiZXR3ZWVuIGxhc3Qgc3RhcnQgYW5kIG5vdylcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdXBkYXRlU3RhcnQgIFNldCBzdGFydCB0byBub3dcclxuXHQgKi9cclxuXHRub3codXBkYXRlU3RhcnQ6IGJvb2xlYW4gPSBmYWxzZSk6IEVsYXBzZWRUaW1lIHtcclxuXHRcdGNvbnN0IF9ub3cgPSBuZXcgRGF0ZSgpO1xyXG5cdFx0Y29uc3QgX3N0YXJ0OiBhbnkgPSBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSkgPyB0aGlzLnN0YXJ0X3RpbWUgOiB0aGlzLnN0YXJ0X3RpbWUgPSBfbm93O1xyXG5cdFx0dGhpcy5fbXMgPSBfbm93LmdldFRpbWUoKSAtIF9zdGFydC5nZXRUaW1lKCk7XHJcblx0XHRpZiAodXBkYXRlU3RhcnQpIHRoaXMuc3RhcnRfdGltZSA9IF9ub3c7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3AgdGltZSB0cmFja2luZyAoc2V0cyB0aGlzLl9tcyB0byB0aW1lIGRpZmZlcmVuY2UgYmV0d2VlbiBsYXN0IHN0YXJ0IGFuZCBsYXN0IHN0b3ApXHJcblx0ICogSWYgbGFzdCBzdG9wIGlzIGxlc3MgdGhhbiBzdGFydCB0aW1lLCBzdG9wIHRpbWUgaXMgdXBkYXRlZCB0byBub3cuXHJcblx0ICovXHJcblx0c3RvcCgpOiBFbGFwc2VkVGltZSB7XHJcblx0XHRjb25zdCBfbm93ID0gbmV3IERhdGUoKTtcclxuXHRcdGNvbnN0IF9zdGFydDogYW55ID0gX2lzRGF0ZSh0aGlzLnN0YXJ0X3RpbWUpID8gdGhpcy5zdGFydF90aW1lIDogX25vdywgdCA9IF9zdGFydC5nZXRUaW1lKCk7XHJcblx0XHRjb25zdCBfc3RvcF90aW1lOiBhbnkgPSB0aGlzLnN0b3BfdGltZTtcclxuXHRcdGNvbnN0IF9zdG9wID0gX2lzRGF0ZShfc3RvcF90aW1lKSAmJiBfc3RvcF90aW1lLmdldFRpbWUoKSA+PSB0ID8gX3N0b3BfdGltZSA6IHRoaXMuc3RvcF90aW1lID0gX25vdztcclxuXHRcdHRoaXMuX21zID0gX3N0b3AuZ2V0VGltZSgpIC0gdDtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogV2hldGhlciB0aW1lIHRyYWNraW5nIHdhcyBzdGFydGVkXHJcblx0ICovXHJcblx0c3RhcnRlZCgpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBXaGV0aGVyIHRpbWUgdHJhY2tpbmcgd2FzIHN0b3BwZWRcclxuXHQgKi9cclxuXHRzdG9wcGVkKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIF9pc0RhdGUodGhpcy5zdG9wX3RpbWUpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHRyYWNrZWQgZWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xyXG5cdCAqIFxyXG5cdCAqIEByZXR1cm5zIG1pbGxpc2Vjb25kc1xyXG5cdCAqL1xyXG5cdG1zKCk6IG51bWJlciB7XHJcblx0XHRyZXR1cm4gcGFyc2VJbnQodGhpcy5fbXMgYXMgYW55KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0cmFja2VkIGVsYXBzZWQgdGltZSBpbiBzZWNvbmRzXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGRlY2ltYWxQbGFjZXNcclxuXHQgKiBAcmV0dXJucyBzZWNvbmRzXHJcblx0ICovXHJcblx0c2VjKGRlY2ltYWxQbGFjZXM6IG51bWJlciA9IDMpOiBudW1iZXIge1xyXG5cdFx0cmV0dXJuIF9yb3VuZCh0aGlzLm1zKCkvMTAwMCwgZGVjaW1hbFBsYWNlcyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgdHJhY2tlZCBlbGFwc2VkIHRpbWUgaW4gbWludXRlc1xyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBkZWNpbWFsUGxhY2VzXHJcblx0ICogQHJldHVybnMgbWludXRlc1xyXG5cdCAqL1xyXG5cdG1pbihkZWNpbWFsUGxhY2VzOiBudW1iZXIgPSAzKTogbnVtYmVyIHtcclxuXHRcdHJldHVybiBfcm91bmQodGhpcy5tcygpLzYwMDAwLCBkZWNpbWFsUGxhY2VzKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB0cmFja2luZyBkYXRhICh0aGlzIHdpbGwgc3RvcCB0cmFja2luZylcclxuXHQgKi9cclxuXHRkYXRhKCk6IHtzdGFydF90aW1lOiBEYXRlfHVuZGVmaW5lZDsgc3RvcF90aW1lOiBEYXRlfHVuZGVmaW5lZDsgZWxhcHNlZF9tczogbnVtYmVyO317XHJcblx0XHR0aGlzLnN0b3AoKTtcclxuXHRcdGNvbnN0IHN0YXJ0X3RpbWUgPSBfaXNEYXRlKHRoaXMuc3RhcnRfdGltZSkgPyB0aGlzLnN0YXJ0X3RpbWUgOiB1bmRlZmluZWQ7XHJcblx0XHRjb25zdCBzdG9wX3RpbWUgPSBfaXNEYXRlKHRoaXMuc3RvcF90aW1lKSA/IHRoaXMuc3RvcF90aW1lIDogdW5kZWZpbmVkO1xyXG5cdFx0Y29uc3QgZWxhcHNlZF9tcyA9IHRoaXMubXMoKTtcclxuXHRcdHJldHVybiB7c3RhcnRfdGltZSwgc3RvcF90aW1lLCBlbGFwc2VkX21zfTtcclxuXHR9XHJcbn0iLCIvKipcclxuICogU3BsaXQgYGFycmF5YCBpbnRvIGJhdGNoZXMgYFRbXVtdYCBvZiBzcGVjaWZpZWQgc2l6ZS5cclxuICogLSBpLmUuIGBfYmF0Y2hWYWx1ZXM8bnVtYmVyPihbMSwyLDMsNCw1LDYsNyw4XSwgMylgID0+IGBbWzEsMiwzXSxbNCw1LDZdLFs3LDhdXWBcclxuICogXHJcbiAqIEBwYXJhbSBhcnJheSAgQmF0Y2ggdmFsdWVzXHJcbiAqIEBwYXJhbSBiYXRjaFNpemUgIEJhdGNoIHNpemUgYHggPiAwYC5cclxuICogQHJldHVybnMgIGBUW11bXWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfYmF0Y2hWYWx1ZXMgPSA8VCBleHRlbmRzIGFueT4oYXJyYXk6IFRbXSwgYmF0Y2hTaXplOiBudW1iZXIpOiBUW11bXSA9PiB7XHJcblx0aWYgKCEoTnVtYmVyLmlzSW50ZWdlcihiYXRjaFNpemUpICYmIGJhdGNoU2l6ZSA+IDApKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYmF0Y2ggc2l6ZS4nKTtcclxuXHRjb25zdCBfYXJyYXkgPSBhcnJheS5zbGljZSgwKSwgX2J1ZmZlcjogVFtdW10gPSBbXTtcclxuXHR3aGlsZSAoX2FycmF5Lmxlbmd0aCkgX2J1ZmZlci5wdXNoKF9hcnJheS5zcGxpY2UoMCwgYmF0Y2hTaXplKSk7XHJcblx0cmV0dXJuIF9idWZmZXI7XHJcbn07IiwiLyoqXHJcbiAqIFZhbGlkYXRlIGBEYXRlYCBpbnN0YW5jZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2lzRGF0ZSA9ICh2YWx1ZTogYW55KTogYm9vbGVhbiA9PiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSk7XHJcblxyXG4vKipcclxuICogR2V0L2NyZWF0ZSBgRGF0ZWAgaW5zdGFuY2VcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWUgfiBgdmFsdWUgaW5zdGFuY2VPZiBEYXRlID8gdmFsdWUgOiBuZXcgRGF0ZSh2YWx1ZSlgXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgUGFyc2UgZGVmYXVsdCBvbiBmYWlsdXJlIFtkZWZhdWx0OiBgdW5kZWZpbmVkYCA9PiBgbmV3IERhdGUoKWBdXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2dldERhdGUgPSAodmFsdWU/OiBhbnksIF9kZWZhdWx0PzogRGF0ZXxzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkKTogRGF0ZSA9PiB7XHJcblx0aWYgKCFfaXNEYXRlKHZhbHVlKSAmJiAhX2lzRGF0ZSh2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKSkpe1xyXG5cdFx0aWYgKF9kZWZhdWx0IGluc3RhbmNlb2YgRGF0ZSkgdmFsdWUgPSBfZGVmYXVsdDtcclxuXHRcdGVsc2UgaWYgKF9kZWZhdWx0ID09PSB1bmRlZmluZWQpIHZhbHVlID0gbmV3IERhdGUoKTtcclxuXHRcdGVsc2UgdmFsdWUgPSBuZXcgRGF0ZShfZGVmYXVsdCBhcyBhbnkpO1xyXG5cdH1cclxuXHRyZXR1cm4gdmFsdWU7XHJcbn07XHJcblxyXG4vKipcclxuICogQ29udmVydCBgRGF0ZWAgdmFsdWUgdG8gZGF0ZXRpbWUgZm9ybWF0IChpLmUuIGAyMDIzLTA1LTI3IDIyOjExOjU3YCB+IGBZWVlZLU1NLUREIEhIOm1tOnNzYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWUgfiBgdmFsdWUgaW5zdGFuY2VPZiBEYXRlID8gdmFsdWUgOiBuZXcgRGF0ZSh2YWx1ZSlgXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgUGFyc2UgZGVmYXVsdCBvbiBmYWlsdXJlIFtkZWZhdWx0OiBgdW5kZWZpbmVkYCA9PiBgbmV3IERhdGUoKWBdXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2RhdGV0aW1lID0gKHZhbHVlPzogYW55LCBfZGVmYXVsdD86IERhdGV8c3RyaW5nfG51bWJlcnxudWxsfHVuZGVmaW5lZCk6IHN0cmluZyA9PiB7XHJcblx0Y29uc3QgZGF0ZSA9IF9nZXREYXRlKHZhbHVlLCBfZGVmYXVsdCksIF9wYWQgPSAodjogbnVtYmVyKSA9PiBgJHt2fWAucGFkU3RhcnQoMiwgJzAnKTtcclxuXHRyZXR1cm4gIV9pc0RhdGUoZGF0ZSkgPyBgJHtkYXRlfWAgOiBgJHtkYXRlLmdldEZ1bGxZZWFyKCl9LSR7X3BhZChkYXRlLmdldE1vbnRoKCkgKyAxKX0tJHtfcGFkKGRhdGUuZ2V0RGF0ZSgpKX0gJHtfcGFkKGRhdGUuZ2V0SG91cnMoKSl9OiR7X3BhZChkYXRlLmdldE1pbnV0ZXMoKSl9OiR7X3BhZChkYXRlLmdldFNlY29uZHMoKSl9YDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IGBEYXRlYCB2YWx1ZSB0byBJU08gZm9ybWF0IChpLmUuIGBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKClgIH4gYDIwMjMtMDUtMjdUMTk6MzA6NDQuNTc1WmApXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlIH4gYHZhbHVlIGluc3RhbmNlT2YgRGF0ZSA/IHZhbHVlIDogbmV3IERhdGUodmFsdWUpYFxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgIFBhcnNlIGRlZmF1bHQgb24gZmFpbHVyZSBbZGVmYXVsdDogYHVuZGVmaW5lZGAgPT4gYG5ldyBEYXRlKClgXVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90aW1lc3RhbXAgPSAodmFsdWU/OiBhbnksIF9kZWZhdWx0PzogRGF0ZXxzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkKTogc3RyaW5nID0+IHtcclxuXHRjb25zdCBkYXRlID0gX2dldERhdGUodmFsdWUsIF9kZWZhdWx0KTtcclxuXHRyZXR1cm4gIV9pc0RhdGUoZGF0ZSkgPyBgJHtkYXRlfWAgOiBkYXRlLnRvSVNPU3RyaW5nKCk7XHJcbn07XHJcblxyXG4vLy4uXHJcblxyXG4vKlxyXG4vL1RFU1RTOlxyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoKSA9PiBuZXcgRGF0ZSgpID0+YCwgX2dldERhdGUoKSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZSgnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykgPT5gLCBfZ2V0RGF0ZSgnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoMTY4NTIxNTg0NDU3NSkgPT5gLCBfZ2V0RGF0ZSgxNjg1MjE1ODQ0NTc1KSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZShOYU4pID0+IG5ldyBEYXRlKCkgPT5gLCBfZ2V0RGF0ZShOYU4pKTtcclxuY29uc29sZS5sb2coYF9nZXREYXRlKE5hTiwgbnVsbCkgPT4gYCwgX2dldERhdGUoTmFOLCBudWxsKSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZShOYU4sIG5ldyBEYXRlKCkpID0+IGAsIF9nZXREYXRlKE5hTiwgbmV3IERhdGUoKSkpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoTmFOLCBOYU4pID0+IGAsIF9nZXREYXRlKE5hTiwgTmFOKSk7XHJcbmNvbnNvbGUubG9nKGBfZ2V0RGF0ZShOYU4sIDE2ODUyMTU4NDQ1NzUpID0+IGAsIF9nZXREYXRlKE5hTiwgMTY4NTIxNTg0NDU3NSkpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoTmFOLCAnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykgPT4gYCwgX2dldERhdGUoTmFOLCAnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykpO1xyXG5jb25zb2xlLmxvZyhgX2dldERhdGUoTmFOLCAnbWlkbmlnaHQnKSA9PiBgLCBfZ2V0RGF0ZShOYU4sICdtaWRuaWdodCcpKTtcclxuXHJcbi8vUkVTVUxUUzpcclxuLy8gX2dldERhdGUoKSA9PiBuZXcgRGF0ZSgpID0+IDIwMjMtMDUtMjdUMjA6Mzk6MTkuODIxWlxyXG4vLyBfZ2V0RGF0ZSgnMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaJykgPT4gMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaXHJcbi8vIF9nZXREYXRlKDE2ODUyMTU4NDQ1NzUpID0+IDIwMjMtMDUtMjdUMTk6MzA6NDQuNTc1WlxyXG4vLyBfZ2V0RGF0ZShOYU4pID0+IG5ldyBEYXRlKCkgPT4gMjAyMy0wNS0yN1QyMDozOToxOS44MjNaXHJcbi8vIF9nZXREYXRlKE5hTiwgbnVsbCkgPT4gIDE5NzAtMDEtMDFUMDA6MDA6MDAuMDAwWlxyXG4vLyBfZ2V0RGF0ZShOYU4sIG5ldyBEYXRlKCkpID0+ICAyMDIzLTA1LTI3VDIwOjM5OjE5LjgyNFpcclxuLy8gX2dldERhdGUoTmFOLCBOYU4pID0+ICBJbnZhbGlkIERhdGVcclxuLy8gX2dldERhdGUoTmFOLCAxNjg1MjE1ODQ0NTc1KSA9PiAgMjAyMy0wNS0yN1QxOTozMDo0NC41NzVaXHJcbi8vIF9nZXREYXRlKE5hTiwgJzIwMjMtMDUtMjdUMTk6MzA6NDQuNTc1WicpID0+ICAyMDIzLTA1LTI3VDE5OjMwOjQ0LjU3NVpcclxuLy8gX2dldERhdGUoTmFOLCAnbWlkbmlnaHQnKSA9PiAgSW52YWxpZCBEYXRlXHJcbiovIiwiaW1wb3J0IHsgYm9vbCB9IGZyb20gJy4vX2NvbW1vbic7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGRlYm91bmNlZCBjYWxsYmFjayBmdW5jdGlvblxyXG4gKiBcclxuICogQHBhcmFtIGhhbmRsZXIgIFRocm90dGxlZCBjYWxsYmFjayBoYW5kbGVyXHJcbiAqIEBwYXJhbSBkZWxheSAgQ2FsbGJhY2sgZGVsYXkgbWlsbGlzZWNvbmRzXHJcbiAqIEBwYXJhbSBtYXhXYWl0ICBNYXhpbXVtIGNhbGxiYWNrIGRlbGF5IG1pbGxpc2Vjb25kc1xyXG4gKiBAcGFyYW0gaW1tZWRpYXRlICBFeGVjdXRlIGNhbGxiYWNrIGJlZm9yZSBkZWxheVxyXG4gKiBAcmV0dXJucyBUaHJvdHRsZWQgY2FsbGJhY2sgZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBjb25zdCBfZGVib3VjZWQgPSAoaGFuZGxlcjogKC4uLmFyZ3M6IGFueSk9PnZvaWQsIGRlbGF5OiBudW1iZXIgPSAyMDAsIG1heFdhaXQ6IG51bWJlciA9IDAsIGltbWVkaWF0ZTogYm9vbCA9IGZhbHNlKTogKCguLi5hcmdzOiBhbnkpPT52b2lkKSA9PiB7XHJcblx0ZGVsYXkgPSAhaXNOYU4oZGVsYXkgPSBwYXJzZUZsb2F0KGRlbGF5IGFzIGFueSkpICYmIGRlbGF5ID49IDAgPyBkZWxheSA6IDIwMDtcclxuXHRtYXhXYWl0ID0gIWlzTmFOKG1heFdhaXQgPSBwYXJzZUZsb2F0KG1heFdhaXQgYXMgYW55KSkgJiYgbWF4V2FpdCA+PSAwICYmIG1heFdhaXQgPiBkZWxheSA/IG1heFdhaXQgOiAwO1xyXG5cdGltbWVkaWF0ZSA9ICEhaW1tZWRpYXRlO1xyXG5cdGxldCBpbW1lZGlhdGVUaW1lcjogYW55LCBjYWxsVGltZXI6IGFueSwgd2FpdFRpbWVyOiBhbnksIG5leHRDYWxsOiBbY29udGV4dDogYW55LCBhcmdzOiBhbnlbXV0gfCB1bmRlZmluZWQ7XHJcblx0Y29uc3QgZXhlY3V0ZSA9IChpc19pbW1lZGlhdGU/OmJvb2wpID0+IHtcclxuXHRcdGxldCBuZXh0ID0gbmV4dENhbGw7XHJcblx0XHRuZXh0Q2FsbCA9IHVuZGVmaW5lZDtcclxuXHRcdGlmICh3YWl0VGltZXIpe1xyXG5cdFx0XHRjbGVhclRpbWVvdXQod2FpdFRpbWVyKTtcclxuXHRcdFx0d2FpdFRpbWVyID0gdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGNhbGxUaW1lciAmJiAhaXNfaW1tZWRpYXRlKXtcclxuXHRcdFx0Y2xlYXJUaW1lb3V0KGNhbGxUaW1lcik7XHJcblx0XHRcdGNhbGxUaW1lciA9IHVuZGVmaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmIChuZXh0Py5sZW5ndGggJiYgJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGhhbmRsZXIpIGhhbmRsZXIuYXBwbHkoLi4ubmV4dCk7XHJcblx0XHRpZiAoZGVsYXkgJiYgaW1tZWRpYXRlICYmICFpc19pbW1lZGlhdGUpe1xyXG5cdFx0XHRpbW1lZGlhdGVUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdGNsZWFyVGltZW91dChpbW1lZGlhdGVUaW1lcik7XHJcblx0XHRcdFx0aW1tZWRpYXRlVGltZXIgPSB1bmRlZmluZWQ7XHJcblx0XHRcdH0sIGRlbGF5KTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdGNvbnN0IHdyYXBwZXIgPSBmdW5jdGlvbih0aGlzOiBhbnksIC4uLmFyZ3M6IGFueVtdKXtcclxuXHRcdG5leHRDYWxsID0gW3RoaXMsIGFyZ3NdO1xyXG5cdFx0aWYgKCFkZWxheSkgcmV0dXJuIGV4ZWN1dGUoKTtcclxuXHRcdGNvbnN0IF9uZXh0ID0gKG5vX3dhaXQ9MCkgPT4ge1xyXG5cdFx0XHRjbGVhclRpbWVvdXQoY2FsbFRpbWVyKTtcclxuXHRcdFx0Y2FsbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiBleGVjdXRlKCksIGRlbGF5KTtcclxuXHRcdFx0aWYgKCFub193YWl0ICYmIG1heFdhaXQgJiYgIXdhaXRUaW1lcikgd2FpdFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiBleGVjdXRlKCksIG1heFdhaXQpO1xyXG5cdFx0fTtcclxuXHRcdGlmICghKGltbWVkaWF0ZSAmJiAhaW1tZWRpYXRlVGltZXIgJiYgIWNhbGxUaW1lcikpIHJldHVybiBfbmV4dCgpO1xyXG5cdFx0X25leHQoMSlcclxuXHRcdGV4ZWN1dGUoMSk7XHJcblx0fTtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyh3cmFwcGVyLCB7XHJcblx0XHRsZW5ndGg6IHt2YWx1ZTogaGFuZGxlci5sZW5ndGh9LFxyXG5cdFx0bmFtZToge3ZhbHVlOiBgJHtoYW5kbGVyLm5hbWV8fCdhbm9ueW1vdXMnfV9fZGVib3VuY2VkX18ke2RlbGF5fWB9LFxyXG5cdH0pO1xyXG5cdHJldHVybiB3cmFwcGVyO1xyXG59OyIsIi8qKlxyXG4gKiBTYXkgSGVsbG8hXHJcbiAqIFxyXG4gKiBAcGFyYW0gbmFtZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zYXlIZWxsbyA9IChuYW1lPzogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuXHRuYW1lID0gbmFtZT8ubGVuZ3RoID8gbmFtZSA6ICdUaHVrdSc7XHJcblx0Y29uc3QgaGVsbG8gPSBgW3hdIC0gSGVsbG8gJHtuYW1lfSFgO1xyXG5cdGNvbnNvbGUubG9nKGhlbGxvKTtcclxuXHRyZXR1cm4gaGVsbG87XHJcbn0iLCIvKipcclxuICogQ3VzdG9tIGBKU09OLnN0cmluZ2lmeWAgd2l0aCBleHRlbmRlZCBjdXN0b20gcmVwbGFjZXJcclxuICogLSBEZWZhdWx0IHZhbHVlIGZvciBgdW5kZWZpbmVkYCB2YWx1ZSBhcmd1bWVudFxyXG4gKiAtIEZpeCBgRXJyb3JgLCBgU2V0YCwgYE1hcGAgc3RyaW5naWZ5XHJcbiAqIC0gQ2lyY3VsYXIgcmVmZXJlbmNlIGZpeGVzXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlIChgdW5kZWZpbmVkYCB2YWx1ZSBpcyByZXBsYWNlZCB3aXRoIGBfdW5kZWZpbmVkYCBhcmd1bWVudCBzdWJzdGl0dXRlIHZhbHVlKVxyXG4gKiBAcGFyYW0gc3BhY2UgIEluZGVudGF0aW9uIHNwYWNlXHJcbiAqIEBwYXJhbSBfdW5kZWZpbmVkICBEZWZhdWx0IGB1bmRlZmluZWRgIGFyZ3VtZW50IGB2YWx1ZWAgc3Vic3RpdHV0ZSAoZGVmYXVsdCBgbnVsbGApXHJcbiAqIEByZXR1cm5zXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2pzb25TdHJpbmdpZnkgPSAodmFsdWU6IGFueSwgc3BhY2U/OiBzdHJpbmd8bnVtYmVyfG51bGx8dW5kZWZpbmVkLCBfdW5kZWZpbmVkOiBhbnkgPSBudWxsKTogc3RyaW5nID0+IHtcclxuXHRjb25zdCBfc3BhY2U6IHN0cmluZ3xudW1iZXJ8dW5kZWZpbmVkID0gc3BhY2UgPT09IG51bGwgPyB1bmRlZmluZWQgOiBzcGFjZTtcclxuXHRjb25zdCBwYXJlbnRzOiBhbnkgPSBbXTtcclxuXHRjb25zdCBwYXRoOiBhbnlbXSA9IFsndGhpcyddO1xyXG5cdGNvbnN0IHJlZnMgPSBuZXcgTWFwPGFueSwgYW55PigpO1xyXG5cdGNvbnN0IF9jbGVhciA9ICgpOiB2b2lkID0+IHtcclxuXHRcdHJlZnMuY2xlYXIoKTtcclxuXHRcdHBhcmVudHMubGVuZ3RoID0gMDtcclxuXHRcdHBhdGgubGVuZ3RoID0gMTtcclxuXHR9O1xyXG5cdGNvbnN0IF9wYXJlbnRzID0gKGtleTogYW55LCB2YWx1ZTogYW55KTogdm9pZCA9PiB7XHJcblx0XHRsZXQgaSA9IHBhcmVudHMubGVuZ3RoIC0gMSwgcHJldiA9IHBhcmVudHNbaV07XHJcblx0XHRpZiAocHJldltrZXldID09PSB2YWx1ZSB8fCBpID09PSAwKXtcclxuXHRcdFx0cGF0aC5wdXNoKGtleSk7XHJcblx0XHRcdHBhcmVudHMucHVzaCh2YWx1ZSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHdoaWxlIChpLS0gPj0gMCkge1xyXG5cdFx0XHRwcmV2ID0gcGFyZW50c1tpXTtcclxuXHRcdFx0aWYgKHByZXY/LltrZXldID09PSB2YWx1ZSl7XHJcblx0XHRcdFx0aSArPSAyO1xyXG5cdFx0XHRcdHBhcmVudHMubGVuZ3RoID0gaTtcclxuXHRcdFx0XHRwYXRoLmxlbmd0aCA9IGk7XHJcblx0XHRcdFx0LS1pO1xyXG5cdFx0XHRcdHBhcmVudHNbaV0gPSB2YWx1ZTtcclxuXHRcdFx0XHRwYXRoW2ldID0ga2V5O1xyXG5cdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fTtcclxuXHRjb25zdCBfcmVwbGFjZXIgPSBmdW5jdGlvbih0aGlzIDphbnksIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogYW55IHtcclxuXHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuIHZhbHVlO1xyXG5cdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgRXJyb3IpIHZhbHVlID0ge1tgW0Vycm9yXWBdOiBTdHJpbmcodmFsdWUpfTtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFNldCkgdmFsdWUgPSB7J1tTZXRdJzogWy4uLnZhbHVlXX07XHJcblx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBNYXApIHZhbHVlID0geydbTWFwXSc6IFsuLi52YWx1ZV19O1xyXG5cdFx0aWYgKCdvYmplY3QnID09PSB0eXBlb2YgdmFsdWUpe1xyXG5cdFx0XHRpZiAoa2V5KSBfcGFyZW50cyhrZXksIHZhbHVlKTtcclxuXHRcdFx0Y29uc3Qgb3RoZXIgPSByZWZzLmdldCh2YWx1ZSk7XHJcblx0XHRcdGlmIChvdGhlcikgcmV0dXJuICdbQ2lyY3VsYXJdJyArIG90aGVyO1xyXG5cdFx0XHRlbHNlIHJlZnMuc2V0KHZhbHVlLCBwYXRoLmpvaW4oJy4nKSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fTtcclxuXHR0cnkge1xyXG5cdFx0aWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gX3VuZGVmaW5lZCAhPT0gdW5kZWZpbmVkID8gX3VuZGVmaW5lZCA6IF91bmRlZmluZWQgPSBudWxsO1xyXG5cdFx0cGFyZW50cy5wdXNoKHZhbHVlKTtcclxuXHRcdHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSwgX3JlcGxhY2VyLCBfc3BhY2UpO1xyXG5cdH1cclxuXHRmaW5hbGx5IHtcclxuXHRcdF9jbGVhcigpO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBDdXN0b20gYEpTT04ucGFyc2VgIHdpdGggZXJyb3IgY2F0Y2ggYW5kIGRlZmF1bHQgcmVzdWx0IG9uIHBhcnNlIGZhaWx1cmVcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKiBAcGFyYW0gX2RlZmF1bHRcclxuICogQHJldHVybnNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfanNvblBhcnNlID0gKHZhbHVlOiBzdHJpbmcsIF9kZWZhdWx0PzogYW55KTogYW55ID0+IHtcclxuXHR0cnkge1xyXG5cdFx0cmV0dXJuIEpTT04ucGFyc2UodmFsdWUpO1xyXG5cdH1cclxuXHRjYXRjaCAoZSl7XHJcblx0XHRyZXR1cm4gX2RlZmF1bHQ7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIENsb25lIHZhbHVlIHZpYSBqc29uIHN0cmluZ2lmeSBhbmQgcGFyc2VcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWVcclxuICogQHBhcmFtIHNwYWNlICBJbmRlbnRhdGlvbiBzcGFjZVxyXG4gKiBAcGFyYW0gX3VuZGVmaW5lZCAgRGVmYXVsdCBgdW5kZWZpbmVkYCBhcmd1bWVudCBgdmFsdWVgIHN1YnN0aXR1dGUgKGRlZmF1bHQgYG51bGxgKVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9qc29uQ2xvbmUgPSA8VFJldHVybiBleHRlbmRzIGFueT4odmFsdWU6IGFueSwgc3BhY2U/OiBzdHJpbmd8bnVtYmVyfHVuZGVmaW5lZCwgX3VuZGVmaW5lZDogYW55ID0gbnVsbCk6IFRSZXR1cm4gPT4ge1xyXG5cdGxldCB2YWw6IGFueSA9IF9qc29uU3RyaW5naWZ5KHZhbHVlLCBzcGFjZSwgX3VuZGVmaW5lZCk7XHJcblx0aWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB2YWwgPSBfanNvblBhcnNlKHZhbCk7XHJcblx0cmV0dXJuIHZhbCBhcyBUUmV0dXJuO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBib29sIH0gZnJvbSAnLi9fY29tbW9uJztcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBudW1lcmljXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlXHJcbiAqIEBwYXJhbSBib29sZWFucyAgUGFzcyBgYm9vbGVhbmAgdmFsdWVzIGFzIG51bWVyaWNcclxuICogQHBhcmFtIGJsYW5rcyAgUGFzcyBlbXB0eSBgc3RyaW5nYCB2YWx1ZXMgKGJlY2F1c2UgYCFpc05hTignJykgPT09IHRydWVgKVxyXG4gKiBAcmV0dXJucyBgYm9vbGVhbmAgaXMgbnVtZXJpY1xyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9pc051bWVyaWMgPSAodmFsdWU6IGFueSwgYm9vbGVhbnM6IGJvb2wgPSBmYWxzZSwgYmxhbmtzOiBib29sID0gZmFsc2UpOiBib29sZWFuID0+IHtcclxuXHRpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWx1ZSkgcmV0dXJuICFpc05hTih2YWx1ZSk7XHJcblx0aWYgKCdib29sZWFuJyA9PT0gdHlwZW9mIHZhbHVlKSByZXR1cm4gISFib29sZWFucztcclxuXHRjb25zdCB2ID0gU3RyaW5nKHZhbHVlKS50cmltKCk7XHJcblx0aWYgKHYgPT09ICcnKSByZXR1cm4gISFibGFua3M7XHJcblx0cmV0dXJuIC8oXlsrLV0/WzAtOV0rKFsuXVswLTldKyk/KFtlRV1bKy1dP1swLTldKyk/JCl8KF5bKy1dP1xcLlswLTldKyQpfCheWystXT9bMC05XStcXC4kKS8udGVzdCh2KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHZhbHVlIHRvIG5vcm1hbGl6ZWQgbnVtYmVyXHJcbiAqIFxyXG4gKiAtIEJsYW5rIHRyaW1tZWQgYHN0cmluZ2AgdmFsdWUgaXMgY29uc2lkZXJlZCBgTmFOYCAoaS5lLiBcIlwiKVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gX2RlZmF1bHQgIFtkZWZhdWx0OiBgTmFOYF0gRGVmYXVsdCByZXN1bHQgd2hlbiBwYXJzZSByZXN1bHQgaXMgYE5hTmBcclxuICogQHBhcmFtIGZpeEZsb2F0ICBbZGVmYXVsdDogYHRydWVgXSBXaGV0aGVyIHRvIGZpeCBmbG9hdCB6ZXJvcyAoaS5lLiBgMS4xLzEwMGAgPSBgMC4wMTEwMDAwMDAwMDAwMDAwMDFgID0+IGAwLjAxMWApXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIHBhcnNlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF90b051bSA9ICh2YWx1ZTogYW55LCBfZGVmYXVsdDogbnVtYmVyID0gTmFOLCBmaXhGbG9hdDogYm9vbCA9IHRydWUpOiBudW1iZXIgPT4ge1xyXG5cdGxldCBudW0gPSB2YWx1ZTtcclxuXHRpZiAoJ251bWJlcicgIT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRcdGxldCBwID0gL15cXHMqKFtcXCstXSlcXHMqLywgbWF0Y2hlcyA9IHZhbHVlLm1hdGNoKHApOyAvL21hdGNoIHByZWZpeCArLy1cclxuXHRcdFx0aWYgKG1hdGNoZXMpIHZhbHVlID0gdmFsdWUucmVwbGFjZShwLCAnJyk7IC8vcmVtb3ZlIHByZWZpeCArLy1cclxuXHRcdFx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9eXFxzKltcXCstXS8sICcnKS50cmltKCk7IC8vcmVtb3ZlIHByZWZpeCArLy1cclxuXHRcdFx0aWYgKHZhbHVlLm1hdGNoKC9eXFxkezEsM30oLFxcZHszfSkqKFxcLnwoXFwuXFxkKykpPyQvKSkgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8sL2csICcnKS50cmltKCk7IC8vbWF0Y2ggYW5kIHJlbW92ZSBcIixcIiB0aG91c2FuZCBzZXBhcmF0b3JcclxuXHRcdFx0aWYgKCF2YWx1ZS5tYXRjaCgvXlxcZCooXFwufChcXC5cXGQrKSk/JC8pKSB2YWx1ZSA9ICd4JzsgLy9pbnZhbGlkYXRlIGludmFsaWQgbGVhZGluZyBkZWNpbWFsIChpLmUuICcuMTAnKVxyXG5cdFx0XHRlbHNlIGlmIChtYXRjaGVzKSB2YWx1ZSA9IG1hdGNoZXNbMV0gKyB2YWx1ZTsgLy9yZXN0b3JlIHByZWZpeCArLy1cclxuXHRcdH1cclxuXHRcdG51bSA9ICFpc05hTihudW0gPSBOdW1iZXIodmFsdWUpKSA/IG51bSA6IHBhcnNlRmxvYXQobnVtKTsgLy9wYXJzZSBudW1iZXJcclxuXHR9XHJcblx0aWYgKCEobnVtICE9PSAnJyAmJiBudW0gIT09IG51bGwgJiYgIWlzTmFOKG51bSA9IE51bWJlcihudW0pKSkpIHJldHVybiBfZGVmYXVsdDsgLy9yZXR1cm4gZGVmYXVsdCB3aGVuIHZhbHVlIGlzIG5vdCBub3QgbnVtZXJpY1xyXG5cdGxldCB2YWwsIG1hdGNoZXMsIHBsYWNlcyA9IDU7IC8vZml4IGZsb2F0IC0gbWF4IDUgZGVjaW1hbCBwbGFjZXNcclxuXHRpZiAoZml4RmxvYXQgJiYgbmV3IFJlZ0V4cChgXFxcXC5cXFxcZCooMHskezN9fVxcXFxkKilgKS50ZXN0KHZhbCA9IFN0cmluZyhudW0pKSAmJiAobWF0Y2hlcyA9IHZhbC5tYXRjaCgvXFwuKFxcZCspLykpKXsgXHJcblx0XHRsZXQgZmxvYXRzID0gbWF0Y2hlc1sxXSwgbGVuID0gZmxvYXRzLmxlbmd0aCwgbiA9IC0xLCB4ID0gLTE7XHJcblx0XHRmb3IgKGxldCBpID0gbGVuIC0gMTsgaSA+PSAwOyBpLS0pe1xyXG5cdFx0XHRpZiAoIU51bWJlcihmbG9hdHNbaV0pKXtcclxuXHRcdFx0XHRpZiAoeCA8IDApIHggPSBpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYgKHggPiAtMSl7XHJcblx0XHRcdFx0biA9IGk7XHJcblx0XHRcdFx0aWYgKHggLSBuID49IHBsYWNlcykgYnJlYWs7XHJcblx0XHRcdFx0ZWxzZSB4ID0gbiA9IC0xO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAobiA+IC0xICYmIHggPiAtMSAmJiAoeCAtIG4gPj0gcGxhY2VzKSkgbnVtID0gK3ZhbC5zdWJzdHJpbmcoMCwgdmFsLmxlbmd0aCAtIGxlbiArIHggKyAxKTtcclxuXHR9XHJcblx0cmV0dXJuIG51bTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSB2YWx1ZSB0byBudW1iZXIgKHNob3J0aGFuZClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWVcclxuICogQHBhcmFtIF9kZWZhdWx0ICBbZGVmYXVsdDogYE5hTmBdIERlZmF1bHQgcmVzdWx0IHdoZW4gcGFyc2UgcmVzdWx0IGlzIGBOYU5gXHJcbiAqIEByZXR1cm5zIGBudW1iZXJgIHBhcnNlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9udW0gPSAodmFsdWU6IGFueSwgX2RlZmF1bHQ6IG51bWJlciA9IE5hTik6IG51bWJlciA9PiBfdG9OdW0odmFsdWUsIF9kZWZhdWx0KTtcclxuXHJcbi8qKlxyXG4gKiBQYXJzZSB2YWx1ZSB0byBpbnRlZ2VyXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgW2RlZmF1bHQ6IGBOYU5gXSBEZWZhdWx0IHJlc3VsdCB3aGVuIHBhcnNlIHJlc3VsdCBpcyBgTmFOYFxyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCBpbnRlZ2VyXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2ludCA9ICh2YWx1ZTogYW55LCBfZGVmYXVsdDogbnVtYmVyID0gTmFOKTogbnVtYmVyID0+IHBhcnNlSW50KFN0cmluZyhfdG9OdW0odmFsdWUsIF9kZWZhdWx0KSkpO1xyXG5cclxuLyoqXHJcbiAqIFJvdW5kIG51bWJlciB0byBkZWNpbWFsIHBsYWNlc1xyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBQYXJzZSB2YWx1ZVxyXG4gKiBAcGFyYW0gcGxhY2VzICBbZGVmYXVsdDogYDJgXSBEZWNpbWFsIHBsYWNlc1xyXG4gKiBAcmV0dXJucyBgbnVtYmVyYCByb3VuZGVkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3JvdW5kID0gKHZhbHVlOiBudW1iZXIsIHBsYWNlczogbnVtYmVyID0gMik6IG51bWJlciA9PiB7XHJcblx0aWYgKGlzTmFOKHZhbHVlKSkgcmV0dXJuIE5hTjtcclxuXHRsZXQgcCA9IDEwICoqIE1hdGguYWJzKF9pbnQocGxhY2VzLCAyKSk7XHJcblx0cmV0dXJuIE1hdGgucm91bmQoKHZhbHVlICsgTnVtYmVyLkVQU0lMT04pICogcCkgLyBwO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgbnVtZXJpYyB2YWx1ZSB0byBjb21tYSB0aG91c2FuZCBkZWxpbWl0ZWQgc3RyaW5nIChpLmUuIGAxMDAwLjQ1NjdgID0+IGAnMSwwMDAuNDUnYClcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgUGFyc2UgdmFsdWVcclxuICogQHBhcmFtIHBsYWNlcyAgW2RlZmF1bHQ6IGAyYF0gUm91bmQgZGVjaW1hbCBwbGFjZXNcclxuICogQHBhcmFtIHplcm9zICBFbmFibGUgdHJhaWxpbmcgYCcwJ2AgZGVjaW1hbCBwbGFjZXMgKGkuZS4gYDEwMDBgID0+IGAnMSwwMDAuMDAnYClcclxuICogQHJldHVybnMgYHN0cmluZ2AgQ29tbWEgdGhvdXNhbmQgZGVsaW1pdGVkIG51bWJlciAocmV0dXJucyBgXCJcImAgaWYgcGFyc2VkIGB2YWx1ZWAgaXMgYE5hTmApXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2NvbW1hcyA9ICh2YWx1ZTogYW55LCBwbGFjZXM6IG51bWJlciA9IDIsIHplcm9zOiBib29sID0gZmFsc2UpOiBzdHJpbmcgPT4ge1xyXG5cdGNvbnN0IG51bSA9IF9yb3VuZChfbnVtKHZhbHVlKSwgcGxhY2VzID0gX2ludChwbGFjZXMsIDIpKTtcclxuXHRpZiAoaXNOYU4obnVtKSl7XHJcblx0XHRjb25zb2xlLndhcm4oJ1tXQVJOSU5HOiBgX2NvbW1hc2BdIE5hTiB2YWx1ZTonLCB2YWx1ZSk7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cdGxldCB2YWwgPSBTdHJpbmcobnVtKS5yZXBsYWNlKC9cXEIoPz0oXFxkezN9KSsoPyFcXGQpKS9nLCAnLCcpO1xyXG5cdGlmIChwbGFjZXMgJiYgemVyb3Mpe1xyXG5cdFx0aWYgKHZhbC5pbmRleE9mKCcuJykgPT09IC0xKSB2YWwgKz0gJy4nLnBhZEVuZChwbGFjZXMgKyAxLCAnMCcpO1xyXG5cdFx0ZWxzZSB2YWwgPSB2YWwuc3BsaXQoJy4nKS5yZWR1Y2U8c3RyaW5nW10+KChwcmV2LCB2LCBpKSA9PiB7XHJcblx0XHRcdHByZXYucHVzaChpID09PSAxICYmIHYubGVuZ3RoIDwgcGxhY2VzID8gdi5wYWRFbmQocGxhY2VzLCAnMCcpIDogdik7XHJcblx0XHRcdHJldHVybiBwcmV2O1xyXG5cdFx0fSwgW10pLmpvaW4oJy4nKTtcclxuXHR9XHJcblx0cmV0dXJuIHZhbDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZSByYW5kb20gYGludGVnZXJgIG51bWJlci5cclxuICogXHJcbiAqIEBwYXJhbSBtaW4gIE1pbiBgaW50ZWdlcmBcclxuICogQHBhcmFtIG1heCAgTWF4IGBpbnRlZ2VyYFxyXG4gKiBAcmV0dXJucyAgYG51bWJlcmAgUmFuZG9tIGBpbnRlZ2VyYFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9yYW5kID0gKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluOyIsImltcG9ydCB7IGJvb2wgfSBmcm9tICcuL19jb21tb24nO1xyXG5cclxuLyoqXHJcbiAqIEZsYXR0ZW4gYXJyYXkgcmVjdXJzaXZlbHlcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZXNcclxuICovXHJcbmV4cG9ydCBjb25zdCBfZmxhdHRlbiA9ICh2YWx1ZXM6IGFueVtdKTogYW55W10gPT4gdmFsdWVzLmZsYXQoSW5maW5pdHkpO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHZhbHVlIGhhcyBwcm9wZXJ0eVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBTZWFyY2ggYG9iamVjdGAgdmFsdWVcclxuICogQHBhcmFtIHByb3AgIEZpbmQgcHJvcGVydHlcclxuICogQHBhcmFtIG93biAgW2RlZmF1bHQ6IGBmYWxzZWBdIEFzIG93biBwcm9wZXJ0eVxyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzUHJvcCA9ICh2YWx1ZTogYW55LCBwcm9wOiBhbnksIG93bjogYm9vbCA9IGZhbHNlKTogYm9vbGVhbiA9PiB7XHJcblx0aWYgKCEoJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSAmJiB2YWx1ZSkpIHJldHVybiBmYWxzZTtcclxuXHRyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBwcm9wKSB8fCAob3duID8gZmFsc2UgOiBwcm9wIGluIHZhbHVlKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiBvYmplY3QgaGFzIHByb3BlcnRpZXNcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgU2VhcmNoIGBvYmplY3RgIHZhbHVlXHJcbiAqIEBwYXJhbSBwcm9wcyAgU3ByZWFkIGZpbmQgcHJvcGVydGllc1xyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzUHJvcHMgPSAodmFsdWU6IGFueSwgLi4ucHJvcHM6IGFueSk6IGJvb2xlYW4gPT4gIXByb3BzLmxlbmd0aCA/IGZhbHNlIDogIXByb3BzLmZpbHRlcigoazogYW55KSA9PiAhX2hhc1Byb3AodmFsdWUsIGspKS5sZW5ndGg7XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgb2JqZWN0IGhhcyBhbnkgb2YgdGhlIHByb3BlcnRpZXNcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSAgU2VhcmNoIGBvYmplY3RgIHZhbHVlXHJcbiAqIEBwYXJhbSBwcm9wcyAgU3ByZWFkIGZpbmQgcHJvcGVydGllc1xyXG4gKiBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfaGFzQW55UHJvcHMgPSAodmFsdWU6IGFueSwgLi4ucHJvcHM6IGFueSk6IGJvb2xlYW4gPT4gIXByb3BzLmxlbmd0aCA/IGZhbHNlIDogISFwcm9wcy5maWx0ZXIoKGs6IGFueSkgPT4gX2hhc1Byb3AodmFsdWUsIGspKS5sZW5ndGg7IiwiaW1wb3J0IHsgX3N0ciB9IGZyb20gJy4vX3N0cmluZyc7XHJcblxyXG4vKipcclxuICogUHJvbWlzZSByZXN1bHQgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElQcm9taXNlUmVzdWx0PFRSZXN1bHQ+IHtcclxuXHRzdGF0dXM6ICdyZXNvbHZlZCd8J3JlamVjdGVkJztcclxuXHRpbmRleDogbnVtYmVyO1xyXG5cdHZhbHVlPzogVFJlc3VsdDtcclxuXHRyZWFzb24/OiBhbnk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQYXJhbGxlbCByZXNvbHZlIGBhcnJheWAgdmFsdWVzIGNhbGxiYWNrIHByb21pc2VzXHJcbiAqIC0gaS5lLiBhd2FpdCBfYXN5bmNBbGw8bnVtYmVyLCBudW1iZXI+KFsxLCAyXSwgYXN5bmMgKG51bSkgPT4gbnVtICogMikgLS0+IFt7c3RhdHVzOiAncmVzb2x2ZWQnLCBpbmRleDogMCwgdmFsdWU6IDJ9LCB7c3RhdHVzOiAncmVzb2x2ZWQnLCBpbmRleDogMSwgdmFsdWU6IDR9XVxyXG4gKiBcclxuICogQHBhcmFtIGFycmF5ICBFbnRyaWVzXHJcbiAqIEBwYXJhbSBjYWxsYmFjayAgRW50cnkgY2FsbGJhY2tcclxuICogQHJldHVybnMgYFByb21pc2U8SVByb21pc2VSZXN1bHQ8VFJlc3VsdD5bXT5gXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2FzeW5jQWxsID0gYXN5bmM8VCBleHRlbmRzIGFueSwgVFJlc3VsdCBleHRlbmRzIGFueT4oYXJyYXk6IFRbXSwgY2FsbGJhY2s/OiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycmF5OiBUW10pID0+IFByb21pc2U8VFJlc3VsdD4pOiBQcm9taXNlPElQcm9taXNlUmVzdWx0PFRSZXN1bHQ+W10+ID0+IHtcclxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuXHRcdGNvbnN0IF9idWZmZXI6IElQcm9taXNlUmVzdWx0PFRSZXN1bHQ+W10gPSBbXSwgX2xlbiA9IGFycmF5Lmxlbmd0aDtcclxuXHRcdGNvbnN0IF9yZXNvbHZlID0gKCkgPT4gcmVzb2x2ZShfYnVmZmVyKTtcclxuXHRcdGlmICghX2xlbikgcmV0dXJuIF9yZXNvbHZlKCk7XHJcblx0XHRsZXQgY291bnQgPSAwO1xyXG5cdFx0YXJyYXkuZm9yRWFjaCgodiwgaSwgYSkgPT4ge1xyXG5cdFx0XHQoYXN5bmMoKT0+UHJvbWlzZS5yZXNvbHZlKGNhbGxiYWNrID8gY2FsbGJhY2sodiwgaSwgYSkgOiB2KSBhcyBQcm9taXNlPFRSZXN1bHQ+KSgpXHJcblx0XHRcdC50aGVuKHZhbHVlID0+IF9idWZmZXIucHVzaCh7c3RhdHVzOiAncmVzb2x2ZWQnLCBpbmRleDogaSwgdmFsdWV9KSlcclxuXHRcdFx0LmNhdGNoKHJlYXNvbiA9PiBfYnVmZmVyLnB1c2goe3N0YXR1czogJ3JlamVjdGVkJywgaW5kZXg6IGksIHJlYXNvbn0pKVxyXG5cdFx0XHQuZmluYWxseSgoKSA9PiArK2NvdW50ID09PSBfbGVuID8gX3Jlc29sdmUoKSA6IHVuZGVmaW5lZCk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBHZXQgYXN5bmMgaXRlcmFibGUgdmFsdWVzIChpLmUuIGBmb3IgYXdhaXQgKGNvbnN0IHZhbHVlIG9mIF9hc3luY1ZhbHVlcyhhcnJheSkpey4uLn1gKVxyXG4gKiBcclxuICogQHBhcmFtIGFycmF5ICBWYWx1ZXNcclxuICogQHJldHVybnMgQXN5bmMgaXRlcmFibGUgb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX2FzeW5jVmFsdWVzID0gPFQgZXh0ZW5kcyBhbnk+KGFycmF5OiBUW10pOiB7XHJcblx0dmFsdWVzOiAoKSA9PiBUW10sXHJcblx0c2l6ZTogKCkgPT4gbnVtYmVyO1xyXG5cdGVhY2g6IChjYWxsYmFjazogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgX2JyZWFrOiAoKT0+dm9pZCk9PlByb21pc2U8YW55PikgPT4gUHJvbWlzZTx2b2lkPjtcclxuXHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiAoKSA9PiB7XHJcblx0XHRuZXh0OiAoKSA9PiBQcm9taXNlPHtkb25lOiBib29sZWFuOyB2YWx1ZTogVH0+O1xyXG5cdH1cclxufSA9PiAoe1xyXG5cdHZhbHVlczogKCkgPT4gYXJyYXksXHJcblx0c2l6ZTogKCkgPT4gYXJyYXkubGVuZ3RoLFxyXG5cdGFzeW5jIGVhY2goY2FsbGJhY2s6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIF9icmVhazogKCk9PnZvaWQpPT5Qcm9taXNlPGFueT4pOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGxldCBzZWxmID0gdGhpcywgY2FuY2VsID0gZmFsc2UsIGluZGV4ID0gLTEsIF9icmVhayA9ICgpID0+IHtcclxuXHRcdFx0Y2FuY2VsID0gdHJ1ZTtcclxuXHRcdH07XHJcblx0XHRmb3IgYXdhaXQgKGNvbnN0IHZhbHVlIG9mIHNlbGYpe1xyXG5cdFx0XHRpbmRleCArKztcclxuXHRcdFx0aWYgKGNhbmNlbCkgYnJlYWs7XHJcblx0XHRcdGF3YWl0IGNhbGxiYWNrKHZhbHVlLCBpbmRleCwgc2VsZi5zaXplKCksIF9icmVhayk7XHJcblx0XHR9XHJcblx0fSxcclxuXHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCl7XHJcblx0XHRsZXQgaW5kZXggPSAwO1xyXG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHRhc3luYyBuZXh0KCk6IFByb21pc2U8e2RvbmU6IGJvb2xlYW47IHZhbHVlOiBUfT4ge1xyXG5cdFx0XHRcdGxldCB2YWx1ZTogVCA9IHVuZGVmaW5lZCBhcyBULCBsZW5ndGggPSB0aGF0LnNpemUoKTtcclxuXHRcdFx0XHRpZiAoaW5kZXggPj0gbGVuZ3RoKSByZXR1cm4ge2RvbmU6IHRydWUsIHZhbHVlfTtcclxuXHRcdFx0XHR2YWx1ZSA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShhcnJheVtpbmRleF0pO1xyXG5cdFx0XHRcdGluZGV4ICsrO1xyXG5cdFx0XHRcdHJldHVybiB7ZG9uZTogZmFsc2UsIHZhbHVlfTtcclxuXHRcdFx0fSxcclxuXHRcdH07XHJcblx0fSxcclxufSk7XHJcblxyXG4vKipcclxuICogRGVsYXkgcHJvbWlzZVxyXG4gKiBcclxuICogQHBhcmFtIHRpbWVvdXQgIERlbGF5IG1pbGxpc2Vjb25kc1xyXG4gKiBAcmV0dXJucyBgUHJvbWlzZTxudW1iZXI+YCB0aW1lb3V0XHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3NsZWVwID0gYXN5bmMgKHRpbWVvdXQ6IG51bWJlcik6IFByb21pc2U8bnVtYmVyPiA9PiB7XHJcblx0dGltZW91dCA9ICFpc05hTih0aW1lb3V0KSAmJiB0aW1lb3V0ID49IDAgPyB0aW1lb3V0IDogMFxyXG5cdHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQoKCkgPT4gcmVzb2x2ZSh0aW1lb3V0KSwgdGltZW91dCkpO1xyXG59OyIsIi8qKlxyXG4gKiBRdWV1ZSBvYmplY3QgaW50ZXJmYWNlXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElRdWV1ZTxUPiB7XHJcblx0Y291bnQ6IG51bWJlcjtcclxuXHRsZW5ndGg6IG51bWJlcjtcclxuXHRpc0VtcHR5OiBib29sZWFuO1xyXG5cdGVucXVldWUodmFsdWU6IFQpOiB2b2lkO1xyXG5cdGRlcXVldWUoKTogVHx1bmRlZmluZWQ7XHJcblx0cGVlaygpOiBUfHVuZGVmaW5lZDtcclxuXHR2YWx1ZXMoKTogVFtdO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIHF1ZXVlIG9iamVjdFxyXG4gKiBcclxuICogQHJldHVybnMgYElRdWV1ZWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfcXVldWUgPSA8VCBleHRlbmRzIGFueT4oKTogSVF1ZXVlPFQ+ID0+IHtcclxuXHRjb25zdCBpdGVtczoge1trZXk6IG51bWJlcl06IFR9ID0ge307XHJcblx0bGV0IGhlYWQ6IG51bWJlciA9IDA7XHJcblx0bGV0IHRhaWw6IG51bWJlciA9IDA7XHJcblx0cmV0dXJuIHtcclxuXHRcdGdldCBjb3VudCgpOiBudW1iZXIge1xyXG5cdFx0XHRyZXR1cm4gdGFpbDtcclxuXHRcdH0sXHJcblx0XHRnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcblx0XHRcdHJldHVybiB0YWlsIC0gaGVhZDtcclxuXHRcdH0sXHJcblx0XHRnZXQgaXNFbXB0eSgpOiBib29sZWFuIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMubGVuZ3RoID09PSAwO1xyXG5cdFx0fSxcclxuXHRcdGVucXVldWUodmFsdWU6IFQpOiB2b2lkIHtcclxuXHRcdFx0aXRlbXNbdGFpbF0gPSB2YWx1ZTtcclxuXHRcdFx0dGFpbCArKztcclxuXHRcdH0sXHJcblx0XHRkZXF1ZXVlKCk6IFR8dW5kZWZpbmVkIHtcclxuXHRcdFx0Y29uc3QgaXRlbSA9IGl0ZW1zW2hlYWRdO1xyXG5cdFx0XHRkZWxldGUgaXRlbXNbaGVhZF07XHJcblx0XHRcdGhlYWQgKys7XHJcblx0XHRcdHJldHVybiBpdGVtO1xyXG5cdFx0fSxcclxuXHRcdHBlZWsoKTogVHx1bmRlZmluZWQge1xyXG5cdFx0XHRyZXR1cm4gaXRlbXNbaGVhZF07XHJcblx0XHR9LFxyXG5cdFx0dmFsdWVzKCk6IFRbXSB7XHJcblx0XHRcdHJldHVybiBPYmplY3QudmFsdWVzKGl0ZW1zKTtcclxuXHRcdH0sXHJcblx0fTtcclxufTsiLCIvKipcclxuICogU29ydCBkaXJlY3Rpb24gdHlwZVxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU29ydERpcmVjdGlvbiA9IDF8LTF8J2FzYyd8J2Rlc2MnfCdhc2NlbmRpbmcnfCdkZXNjZW5kaW5nJztcclxuXHJcbi8qKlxyXG4gKiBTb3J0IG9yZGVyIHR5cGVcclxuICovXHJcbmV4cG9ydCB0eXBlIFNvcnRPcmRlciA9IFNvcnREaXJlY3Rpb258e1trZXk6IHN0cmluZ106IFNvcnREaXJlY3Rpb259O1xyXG5cclxuLyoqXHJcbiAqIFNvcnQgYXJyYXkgdmFsdWVzXHJcbiAqIFxyXG4gKiBAcGFyYW0gYXJyYXlcclxuICogQHBhcmFtIHNvcnRcclxuICogQHJldHVybnMgU29ydGVkIGBhcnJheWBcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc29ydFZhbHVlcyA9IDxUIGV4dGVuZHMgYW55PihhcnJheTogVFtdLCBzb3J0PzogU29ydE9yZGVyKTogVFtdID0+IHtcclxuXHRjb25zdCBfY29tcGFyZSA9IChhOiBhbnksIGI6IGFueSk6IG51bWJlciA9PiB7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBhICYmICdzdHJpbmcnID09PSB0eXBlb2YgYiAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgYT8ubG9jYWxlQ29tcGFyZSkgcmV0dXJuIGEubG9jYWxlQ29tcGFyZShiKTtcclxuXHRcdHJldHVybiBhID4gYiA/IDEgOiAoYSA8IGIgPyAtMSA6IDApO1xyXG5cdH07XHJcblx0Y29uc3QgX2RpcmVjdGlvbiA9ICh2YWw/OiBTb3J0RGlyZWN0aW9uKTogbnVtYmVyID0+IHtcclxuXHRcdGlmICgnbnVtYmVyJyA9PT0gdHlwZW9mIHZhbCAmJiBbMSwgLTFdLmluY2x1ZGVzKHZhbCkpIHJldHVybiB2YWw7XHJcblx0XHRpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2YWwpe1xyXG5cdFx0XHRpZiAodmFsLnN0YXJ0c1dpdGgoJ2FzYycpKSByZXR1cm4gMTtcclxuXHRcdFx0aWYgKHZhbC5zdGFydHNXaXRoKCdkZXNjJykpIHJldHVybiAtMTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAxO1xyXG5cdH07XHJcblx0Y29uc3QgX21ldGhvZCA9ICgpOiAoKGE6IGFueSwgYjogYW55KT0+bnVtYmVyKSA9PiB7XHJcblx0XHRpZiAoT2JqZWN0KHNvcnQpID09PSBzb3J0KXtcclxuXHRcdFx0Y29uc3QgX2VudHJpZXMgPSBPYmplY3QuZW50cmllcyhzb3J0IGFzIHtba2V5OiBzdHJpbmddOiBTb3J0RGlyZWN0aW9ufSk7XHJcblx0XHRcdGlmIChfZW50cmllcy5sZW5ndGgpIHJldHVybiAoYSwgYikgPT4ge1xyXG5cdFx0XHRcdGxldCBpLCByZXN1bHQ7XHJcblx0XHRcdFx0Zm9yIChyZXN1bHQgPSAwLCBpID0gMDsgcmVzdWx0ID09PSAwIHx8IGkgPCBfZW50cmllcy5sZW5ndGg7IGkgKyspe1xyXG5cdFx0XHRcdFx0Y29uc3QgW2tleSwgdmFsXSA9IF9lbnRyaWVzW2ldO1xyXG5cdFx0XHRcdFx0cmVzdWx0ID0gX2NvbXBhcmUoYT8uW2tleV0sIGI/LltrZXldKSAqIF9kaXJlY3Rpb24odmFsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAoYSwgYikgPT4gX2NvbXBhcmUoYSwgYikgKiBfZGlyZWN0aW9uKHNvcnQgYXMgU29ydERpcmVjdGlvbik7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyYXkuc29ydChfbWV0aG9kKCkpO1xyXG59OyIsImltcG9ydCB7IGJvb2wgfSBmcm9tICcuL19jb21tb24nO1xyXG5pbXBvcnQgeyBfanNvblN0cmluZ2lmeSB9IGZyb20gJy4vX2pzb24nO1xyXG5cclxuLyoqXHJcbiAqIEdldCB1bmlxdWUgc3RyaW5nIG9mIHJhbmRvbSBjaGFyYWN0ZXJzIChpbiBsb3dlcmNhc2UpXHJcbiAqIFxyXG4gKiBAcGFyYW0gbGVuZ3RoICAobWF4IDY0KVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF91dWlkKGxlbmd0aD86IG51bWJlcik6IHN0cmluZ3tcclxuXHRjb25zdCBfdWlkID0gKCkgPT4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKS50b1N0cmluZygzNik7XHJcblx0aWYgKCEobGVuZ3RoICE9PSB1bmRlZmluZWQgJiYgTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpICYmIGxlbmd0aCA+IDAgJiYgbGVuZ3RoIDw9IDY0KSkgcmV0dXJuIF91aWQoKTtcclxuXHRsZXQgYnVmZmVyID0gJyc7XHJcblx0d2hpbGUgKGJ1ZmZlci5sZW5ndGggPCBsZW5ndGgpIGJ1ZmZlciArPSBfdWlkKCk7XHJcblx0cmV0dXJuIGJ1ZmZlci5zdWJzdHJpbmcoMCwgbGVuZ3RoKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNhZmVseSBgc3RyaW5nYCBjYXN0IHZhbHVlXHJcbiAqIC0gUmV0dXJucyBJU08gZm9ybWF0IHRpbWVzdGFtcCBmb3IgdmFsaWQgRGF0ZSB2YWx1ZVxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBDYXN0IHZhbHVlXHJcbiAqIEBwYXJhbSBfZGVmYXVsdCAgW2RlZmF1bHQ6IGAnJ2BdIERlZmF1bHQgcmVzdWx0IG9uIGZhaWx1cmVcclxuICogQHJldHVybnMgYHN0cmluZ2BcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyaW5nID0gKHZhbHVlOiBhbnksIF9kZWZhdWx0OiBzdHJpbmcgPSAnJyk6IHN0cmluZyA9PiB7XHJcblx0bGV0IHZhbDogc3RyaW5nID0gJyc7XHJcblx0dHJ5IHtcclxuXHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlLmdldFRpbWUoKSkpIHZhbCA9IHZhbHVlLnRvSVNPU3RyaW5nKCk7XHJcblx0XHRlbHNlIHZhbCA9IFN0cmluZyh2YWx1ZSk7XHJcblx0fVxyXG5cdGNhdGNoIChlKXtcclxuXHRcdHZhbCA9IF9kZWZhdWx0O1xyXG5cdH1cclxuXHRyZXR1cm4gdmFsO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFNhZmVseSBgc3RyaW5nYCBjYXN0IHZhbHVlIGlmIHBvc3NpYmxlLlxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBmYWxzZXxzdHJpbmdgIENhc3QgcmVzdWx0IG9yIGBmYWxzZWAgb24gZmFpbHVyZVxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9zdHJpbmdhYmxlID0gKHZhbHVlOiBhbnkpOiBmYWxzZXxzdHJpbmcgPT4ge1xyXG5cdGNvbnN0IGZhaWxlZCA9IGAhJHtEYXRlLm5vdygpfSFgLCB2YWwgPSBfc3RyaW5nKHZhbHVlLCBmYWlsZWQpLCBwYXR0ZXJuID0gL1xcW29iamVjdCBcXHcrXFxdLztcclxuXHRyZXR1cm4gISh2YWwgPT09IGZhaWxlZCB8fCBwYXR0ZXJuLnRlc3QodmFsKSkgPyB2YWwgOiBmYWxzZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBOb3JtYWxpemUgc3RyaW5nIGJ5IHJlbW92aW5nIGFjY2VudHMgKGkuZS4gXCJBbcOpbGllXCIgPT4gXCJBbWVsaWVcIilcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZVxyXG4gKiBAcmV0dXJucyBgc3RyaW5nYCBub3JtYWxpemVkXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3N0ck5vcm0gPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiB2YWx1ZS5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csICcnKTtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IHZhbHVlIHRvIGBzdHJpbmdgIGVxdWl2YWxlbnRcclxuICogXHJcbiAqIC0gUmV0dXJucyAnJyBmb3IgYG51bGxgIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZVxyXG4gKiAtIFdoZW4gYHN0cmluZ2lmeWAgaXMgYGZhbHNlYCwgcmV0dXJucyAnJyBmb3IgYGFycmF5YCBvciBgb2JqZWN0YCB2YWx1ZSB0aGF0IGRvZXMgbm90IGltcGxlbWVudCBgdG9TdHJpbmcoKWAgbWV0aG9kXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHBhcmFtIHRyaW0gIFRyaW0gcmVzdWx0XHJcbiAqIEBwYXJhbSBzdHJpbmdpZnkgIFN0cmluZ2lmeSBgYXJyYXlgIG9yIGBvYmplY3RgIHZhbHVlIHRoYXQgZG9lcyBub3QgaW1wbGVtZW50IGB0b1N0cmluZygpYCBtZXRob2RcclxuICogQHJldHVybnMgIGBzdHJpbmdgXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgX3N0ciA9ICh2YWx1ZTogYW55LCB0cmltOiBib29sZWFuID0gZmFsc2UsIHN0cmluZ2lmeTogYm9vbGVhbiA9IGZhbHNlKTogc3RyaW5nID0+IHtcclxuXHRpZiAoJ3N0cmluZycgIT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuICcnO1xyXG5cdFx0ZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGVvZiB2YWx1ZSl7XHJcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkgcmV0dXJuIHN0cmluZ2lmeSA/IF9qc29uU3RyaW5naWZ5KHZhbHVlKSA6ICcnO1xyXG5cdFx0XHRjb25zdCB0bXAgPSBfc3RyaW5nYWJsZSh2YWx1ZSk7XHJcblx0XHRcdGlmICh0bXAgPT09IGZhbHNlKSByZXR1cm4gc3RyaW5naWZ5ID8gX2pzb25TdHJpbmdpZnkodmFsdWUpIDogJyc7XHJcblx0XHRcdGVsc2UgdmFsdWUgPSB0bXA7XHJcblx0XHR9XHJcblx0XHRlbHNlIHZhbHVlID0gX3N0cmluZyh2YWx1ZSk7XHJcblx0fVxyXG5cdHJldHVybiB0cmltID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XHJcbn07XHJcblxyXG4vKipcclxuICogRXNjYXBlIHJlZ2V4IG9wZXJhdG9ycyBmcm9tIHN0cmluZ1xyXG4gKiAtIGkuZS4gYCdcXFxcc1xcblxcclxcdFxcdlxceDAwfl8hQCMkJV4mKigpW11cXFxcLywuP1wiXFwnOjt7fXw8Pj0rLSdgID0+IGAnXFxcXHNcXG5cXHJcXHRcXHZcXHgwMFxcc35fIUAjXFxcXCQlXFxcXF4mXFxcXCpcXFxcKFxcXFwpXFxcXFtcXFxcXVxcXFxcXFxcLyxcXFxcLlxcXFw/XCJcXCc6O1xcXFx7XFxcXH1cXFxcfDw+PVxcXFwrLSdgXHJcbiAqIFxyXG4gKiBAcGFyYW0gdmFsdWVcclxuICogQHJldHVybnMgYHN0cmluZ2AgZXNjYXBlZFxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IF9yZWdFc2NhcGUgPSAodmFsdWU6IGFueSk6IHN0cmluZyA9PiBfc3RyKHZhbHVlKS5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgJ1xcXFwkJicpO1xyXG5cclxuLyoqXHJcbiAqIEVzY2FwZSBzdHJpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzXHJcbiAqIC0gaS5lLiBgJ1xcblxcclxcdFxcdlxceDAwJ2AgPT4gYCdcXFxcblxcXFxyXFxcXHRcXFxcdlxcXFx4MDAnYFxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdgIGVzY2FwZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBfc3RyRXNjYXBlID0gKHZhbHVlOiBhbnkpOiBzdHJpbmcgPT4gSlNPTi5zdHJpbmdpZnkoX3N0cih2YWx1ZSkpXHJcbi5yZXBsYWNlKC9eXCJ8XCIkL2csICcnKVxyXG4ucmVwbGFjZSgvXFxcXFwiL2csICdcIicpXHJcbi5yZXBsYWNlKC9cXFxcdTAwMGJcXFxcdTAwMDAvZywgJ1xcXFx4MDAnKTtcclxuLy8gLnJlcGxhY2UoL1xcbi9nLCAnXFxcXG4nKVxyXG4vLyAucmVwbGFjZSgvXFxyL2csICdcXFxccicpXHJcbi8vIC5yZXBsYWNlKC9cXHQvZywgJ1xcXFx0JylcclxuLy8gLnJlcGxhY2UoL1xcdi9nLCAnXFxcXHYnKVxyXG4vLyAucmVwbGFjZSgvXFx4MDAvZywgJ1xcXFx4MDAnKTtcclxuXHJcblxyXG4vKipcclxuICogVHJpbSBzdHJpbmcgcmVnZXggY2hhcmFjdGVycyBgWyBcXG5cXHJcXHRcXHZcXHgwMF0qYFxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlICBUcmltIHN0cmluZ1xyXG4gKiBAcGFyYW0gcmwgIFtkZWZhdWx0OiBgYm90aGBdIFRyaW0gZGlyZWN0aW9uIGAncid8J3JpZ2h0J2Agb3IgYCdsJy8nbGVmdCdgIFxyXG4gKiBAcGFyYW0gY2hhcnMgIFtkZWZhdWx0OiBgJyBcXG5cXHJcXHRcXHZcXHgwMCdgXSBTdHJpcCBjaGFyYWN0ZXJzXHJcbiAqIEByZXR1cm5zIGBzdHJpbmdgIHRyaW1tZWRcclxuICovXHJcbmV4cG9ydCBjb25zdCBfdHJpbSA9ICh2YWx1ZTogc3RyaW5nLCBybDogJyd8J3InfCdsJ3wncmlnaHQnfCdsZWZ0JyA9ICcnLCBjaGFyczogc3RyaW5nID0gJyBcXG5cXHJcXHRcXHZcXHgwMCcpOiBzdHJpbmcgPT4ge1xyXG5cdHJsID0gWycnLCdyJywnbCcsJ3JpZ2h0JywnbGVmdCddLmluY2x1ZGVzKHJsKSA/IHJsIDogJyc7XHJcblx0bGV0IHAgPSBgWyR7X3JlZ0VzY2FwZShjaGFycyl9XSpgLCBwYXR0ZXJuID0gYF4ke3B9fCR7cH0kYDtcclxuXHRpZiAoWydsJywgJ2xlZnQnXS5pbmNsdWRlcyhybCkpIHBhdHRlcm4gPSBgXiR7cH1gO1xyXG5cdGVsc2UgaWYgKFsncicsICdyaWdodCddLmluY2x1ZGVzKHJsKSkgcGF0dGVybiA9IGAke3B9JGA7XHJcblx0cmV0dXJuIHZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChwYXR0ZXJuLCAnZycpLCAnJyk7XHJcbn07XHJcbi8vXHJcbi8vIC8qKlxyXG4vLyAgKiBDb252ZXJ0IHN0cmluZyB0byB0aXRsZSBjYXNlIChpLmUuIFwiaGVMTG8gd29SbGRcIiA9PiBcIkhlbGxvIFdvcmxkXCIpXHJcbi8vICAqIFxyXG4vLyAgKiBAcGFyYW0gdmFsdWVcclxuLy8gICogQHJldHVybnMgYHN0cmluZ2AgVGl0bGUgQ2FzZVxyXG4vLyAgKi9cclxuLy8gZXhwb3J0IGNvbnN0IF90aXRsZUNhc2UgPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiB2YWx1ZS5yZXBsYWNlKC9cXHdcXFMqL2csIG1hdGNoID0+IG1hdGNoWzBdLnRvVXBwZXJDYXNlKCkgKyBtYXRjaC5zdWJzdHJpbmcoMSkudG9Mb3dlckNhc2UoKSk7XHJcbi8vXHJcbi8vIC8qKlxyXG4vLyAgKiBDb252ZXJ0IHN0cmluZyB0byBzZW50ZW5jZSBjYXNlXHJcbi8vICAqIFxyXG4vLyAgKiBAcGFyYW0gdmFsdWUgIFBhcnNlIHZhbHVlXHJcbi8vICAqIEBwYXJhbSBpZ25vcmUgIElnbm9yZSBsb3dlcmNhc2luZ1xyXG4vLyAgKiBAcmV0dXJucyBgc3RyaW5nYCBTZW50ZW5jZSBjYXNlXHJcbi8vICAqL1xyXG4vLyBleHBvcnQgY29uc3QgX3NlbnRlbmNlQ2FzZSA9ICh2YWx1ZTogc3RyaW5nLCBpZ25vcmU6IGJvb2wgPSBmYWxzZSk6IHN0cmluZyA9PiB2YWx1ZS5zcGxpdCgvKCg/PD1cXC58XFw/fCEpXFxzKikvKVxyXG4vLyAubWFwKHZhbCA9PiB7XHJcbi8vICAgaWYgKHZhbC5sZW5ndGgpe1xyXG4vLyAgICAgY29uc3QgZmlyc3QgPSB2YWwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCk7XHJcbi8vICAgICBjb25zdCByZXN0ID0gdmFsLmxlbmd0aCA+IDEgPyB2YWwuc2xpY2UoMSkgOiAnJztcclxuLy8gICAgIHZhbCA9IGZpcnN0ICsgKGlnbm9yZSA/IHJlc3QgOiByZXN0LnRvTG93ZXJDYXNlKCkpO1xyXG4vLyAgIH1cclxuLy8gICByZXR1cm4gdmFsO1xyXG4vLyB9KVxyXG4vLyAuam9pbignJyk7XHJcbi8vXHJcbi8vIC8qKlxyXG4vLyAgKiBDb252ZXJ0IHZhbHVlIHRvIHNuYWtlIGNhc2UgKGkuZS4gJ0hlbGxvV29ybGQnID0+ICdoZWxsb193b3JsZCcpXHJcbi8vICAqIFxyXG4vLyAgKiBAcGFyYW0gdmFsdWVcclxuLy8gICogQHJldHVybnMgYHN0cmluZ2Agc25ha2VfY2FzZVxyXG4vLyAgKi9cclxuLy8gZXhwb3J0IGNvbnN0IF9zbmFrZUNhc2UgPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiBfc3RyTm9ybSh2YWx1ZSkucmVwbGFjZSgvXFxXKy9nLCAnICcpLnNwbGl0KC8gfFxcQig/PVtBLVpdKS8pLmpvaW4oJ18nKS5yZXBsYWNlKC9fKy9nLCAnXycpLnRvTG93ZXJDYXNlKCk7XHJcbi8vXHJcbi8vIC8qKlxyXG4vLyAgKiBDb252ZXJ0IHZhbHVlIHRvIHNsdWcgY2FzZSAoaS5lLiAnSGVsbG9Xb3JsZCcgPT4gJ2hlbGxvLXdvcmxkJylcclxuLy8gICogXHJcbi8vICAqIEBwYXJhbSB2YWx1ZVxyXG4vLyAgKiBAcmV0dXJucyBgc3RyaW5nYCBzbHVnLWNhc2VcclxuLy8gICovXHJcbi8vIGV4cG9ydCBjb25zdCBfc2x1Z0Nhc2UgPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiBfc3RyTm9ybSh2YWx1ZSkucmVwbGFjZSgvKD86W1xcV19dKT9bQS1aXS9nLCAobSwgaSkgPT4gbS5sZW5ndGggPT09IDEgJiYgaSA/ICctJyArIG0gOiBtKVxyXG4vLyAucmVwbGFjZSgvWzAtOWEtekEtWl0vLCAnLScpXHJcbi8vIC5yZXBsYWNlKC8tKy9nLCAnLScpXHJcbi8vIC50b0xvd2VyQ2FzZSgpO1xyXG4vL1xyXG4vLyAvKipcclxuLy8gICogQ29udmVydCB2YWx1ZSB0byBzdHVkbHkgY2FzZSAoaS5lLiAnaGVsbG8td29ybGQnID0+ICdIZWxsb1dvcmxkJylcclxuLy8gICogXHJcbi8vICAqIEBwYXJhbSB2YWx1ZVxyXG4vLyAgKiBAcmV0dXJucyBgc3RyaW5nYCBTdHVkbHlDYXNlXHJcbi8vICAqL1xyXG4vLyBleHBvcnQgY29uc3QgX3N0dWRseUNhc2UgPSAodmFsdWU6IHN0cmluZyk6IHN0cmluZyA9PiBfc2x1Zyh2YWx1ZSkuc3BsaXQoJy0nKS5tYXAodyA9PiB3WzBdLnRvVXBwZXJDYXNlKCkgKyB3LnN1YnN0cmluZygxKS50b0xvd2VyQ2FzZSgpKS5qb2luKCcnKTsiLCJpbXBvcnQgeyBfaXNEYXRlLCBfdGltZXN0YW1wIH0gZnJvbSAnLi9fZGF0ZXRpbWUnO1xyXG5pbXBvcnQgeyBfc3RyLCBfc3RyaW5nLCBfc3RyaW5nYWJsZSB9IGZyb20gJy4vX3N0cmluZyc7XHJcbmltcG9ydCB7IF9qc29uU3RyaW5naWZ5LCBfanNvbkNsb25lIH0gZnJvbSAnLi9fanNvbic7XHJcblxyXG4vKipcclxuICogVGVybSBmb3JtYXQgcmVzdWx0IGludGVyZmFjZVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJVGVybUZvcm1hdCB7XHJcblx0Zm9ybWF0OiAoZm9ybWF0czogc3RyaW5nfHN0cmluZ1tdLCAuLi5hcmdzOiBhbnlbXSkgPT4gSVRlcm1Gb3JtYXQ7XHJcblx0dmFsdWVzOiAoLi4uYXJnczogYW55W10pID0+IGFueVtdO1xyXG5cdGNsZWFyOiAoLi4uYXJnczogYW55W10pID0+IGFueVtdO1xyXG5cdGxvZzogKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gdm9pZDtcclxuXHRkZWJ1ZzogKG1lc3NhZ2U/OiBhbnksIC4uLm9wdGlvbmFsUGFyYW1zOiBhbnlbXSkgPT4gdm9pZDtcclxuXHR3YXJuOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xyXG5cdGVycm9yOiAobWVzc2FnZT86IGFueSwgLi4ub3B0aW9uYWxQYXJhbXM6IGFueVtdKSA9PiB2b2lkO1xyXG5cdGluZm86IChtZXNzYWdlPzogYW55LCAuLi5vcHRpb25hbFBhcmFtczogYW55W10pID0+IHZvaWQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUZXJtIGBjb25zb2xlLipgIGxvZ2dlclxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFRlcm1cclxue1xyXG5cdC8qKlxyXG5cdCAqIERpc2FibGUgZm9ybWF0c1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBESVNBQkxFRDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuXHQvKipcclxuXHQgKiBUZXh0IGZvcm1hdHNcclxuXHQgKi9cclxuXHRzdGF0aWMgRk9STUFUUzoge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7XHJcblx0XHRyZXNldDogJ1xceDFiWzBtJyxcclxuXHRcdGJyaWdodDogJ1xceDFiWzFtJyxcclxuXHRcdGRpbTogJ1xceDFiWzJtJyxcclxuXHRcdHVuZGVyc2NvcmU6ICdcXHgxYls0bScsXHJcblx0XHRibGluazogJ1xceDFiWzVtJyxcclxuXHRcdHJldmVyc2U6ICdcXHgxYls3bScsXHJcblx0XHRoaWRkZW46ICdcXHgxYls4bScsXHJcblx0XHRmZ19ibGFjazogJ1xceDFiWzMwbScsXHJcblx0XHRmZ19yZWQ6ICdcXHgxYlszMW0nLFxyXG5cdFx0ZmdfZ3JlZW46ICdcXHgxYlszMm0nLFxyXG5cdFx0ZmdfeWVsbG93OiAnXFx4MWJbMzNtJyxcclxuXHRcdGZnX2JsdWU6ICdcXHgxYlszNG0nLFxyXG5cdFx0ZmdfbWFnZW50YTogJ1xceDFiWzM1bScsXHJcblx0XHRmZ19jeWFuOiAnXFx4MWJbMzZtJyxcclxuXHRcdGZnX3doaXRlOiAnXFx4MWJbMzdtJyxcclxuXHRcdGZnX2dyYXk6ICdcXHgxYls5MG0nLFxyXG5cdFx0YmdfYmxhY2s6ICdcXHgxYls0MG0nLFxyXG5cdFx0YmdfcmVkOiAnXFx4MWJbNDFtJyxcclxuXHRcdGJnX2dyZWVuOiAnXFx4MWJbNDJtJyxcclxuXHRcdGJnX3llbGxvdzogJ1xceDFiWzQzbScsXHJcblx0XHRiZ19ibHVlOiAnXFx4MWJbNDRtJyxcclxuXHRcdGJnX21hZ2VudGE6ICdcXHgxYls0NW0nLFxyXG5cdFx0YmdfY3lhbjogJ1xceDFiWzQ2bScsXHJcblx0XHRiZ193aGl0ZTogJ1xceDFiWzQ3bScsXHJcblx0XHRiZ19ncmF5OiAnXFx4MWJbMTAwbScsXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogUHJlZGVmaW5lZCB0ZXh0IGZvcm1hdHNcclxuXHQgKi9cclxuXHRzdGF0aWMgUFJFREVGSU5FRF9GT1JNQVRTOiB7W2tleTogc3RyaW5nXTogc3RyaW5nfHN0cmluZ1tdfSA9IHtcclxuXHRcdGxvZzogJ2ZnX3doaXRlJyxcclxuXHRcdGRlYnVnOiAnZmdfZ3JheScsXHJcblx0XHRlcnJvcjogJ2ZnX3JlZCcsXHJcblx0XHR3YXJuOiAnZmdfeWVsbG93JyxcclxuXHRcdGluZm86ICdmZ19jeWFuJyxcclxuXHRcdHN1Y2Nlc3M6ICdmZ19ncmVlbicsXHJcblx0XHRiZ19sb2c6IFsnYmdfYmx1ZScsICdmZ193aGl0ZSddLFxyXG5cdFx0YmdfZGVidWc6IFsnYmdfZ3JheScsICdmZ19ibGFjayddLFxyXG5cdFx0YmdfZXJyb3I6IFsnYmdfcmVkJywgJ2ZnX3doaXRlJ10sXHJcblx0XHRiZ193YXJuOiBbJ2JnX3llbGxvdycsICdmZ19ibGFjayddLFxyXG5cdFx0YmdfaW5mbzogWydiZ19jeWFuJywgJ2ZnX2JsYWNrJ10sXHJcblx0XHRiZ19zdWNjZXNzOiBbJ2JnX2dyZWVuJywgJ2ZnX3doaXRlJ10sXHJcblx0fTtcclxuXHJcblx0LyoqXHJcblx0ICogR2V0IHN0YW5kYXJkaXplZCB0ZXh0IGZvcm1hdHNcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gZm9ybWF0cyBUZXh0IGZvcm1hdChzKVxyXG5cdCAqIEByZXR1cm5zIGBzdHJpbmdbXWBcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0Rm9ybWF0cyhmb3JtYXRzOiBzdHJpbmd8c3RyaW5nW10pOiBzdHJpbmdbXSB7XHJcblx0XHRjb25zdCBGTSA9IHRoaXMuRk9STUFUUztcclxuXHRcdGNvbnN0IFBGID0gdGhpcy5QUkVERUZJTkVEX0ZPUk1BVFM7XHJcblx0XHRjb25zdCBfZm9ybWF0czogc3RyaW5nW10gPSBBcnJheS5pc0FycmF5KGZvcm1hdHMpID8gZm9ybWF0cyA6ICdzdHJpbmcnID09PSB0eXBlb2YgZm9ybWF0cyA/IFtmb3JtYXRzXSA6IFtdO1xyXG5cdFx0cmV0dXJuIF9mb3JtYXRzLnJlZHVjZTxzdHJpbmdbXT4oKHByZXYsIHZhbCkgPT4ge1xyXG5cdFx0XHRpZiAoKHZhbCA9IHZhbC50cmltKCkudG9Mb3dlckNhc2UoKSkgJiYgdmFsICE9PSAncmVzZXQnKXtcclxuXHRcdFx0XHRsZXQgdG1wID0gdmFsID0gdmFsLnJlcGxhY2UoL1teYS16MC05XS9pZywgJ18nKS5yZXBsYWNlKCdncmV5JywgJ2dyYXknKTtcclxuXHRcdFx0XHRjb25zdCBfYWRkUEYgPSAoazogc3RyaW5nKTogdm9pZCA9PiB7XHJcblx0XHRcdFx0XHRjb25zdCB2ID0gUEZba107XHJcblx0XHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheSh2KSkgcHJldi5wdXNoKC4uLnYpO1xyXG5cdFx0XHRcdFx0ZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB2KSBwcmV2LnB1c2godik7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRpZiAoRk0uaGFzT3duUHJvcGVydHkodmFsKSkgcHJldi5wdXNoKHZhbCk7XHJcblx0XHRcdFx0ZWxzZSBpZiAoRk0uaGFzT3duUHJvcGVydHkodG1wID0gYGZnXyR7dmFsfWApKSBwcmV2LnB1c2godG1wKTtcclxuXHRcdFx0XHRlbHNlIGlmIChQRi5oYXNPd25Qcm9wZXJ0eSh2YWwpKSBfYWRkUEYodmFsKTtcclxuXHRcdFx0XHRlbHNlIGlmIChQRi5oYXNPd25Qcm9wZXJ0eSh0bXAgPSBgYmdfJHt2YWx9YCkpIF9hZGRQRih0bXApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBwcmV2O1xyXG5cdFx0fSwgW10pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBUZXh0IGZvcm1hdCBsb2cgYXJndW1lbnRzXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGZvcm1hdHMgIFRleHQgZm9ybWF0KHMpXHJcblx0ICogQHBhcmFtIGFyZ3MgIEZvcm1hdCB2YWx1ZXNcclxuXHQgKiBAcmV0dXJucyBgSVRlcm1Gb3JtYXRgXHJcblx0ICovXHJcblx0c3RhdGljIGZvcm1hdChmb3JtYXRzOiBzdHJpbmd8c3RyaW5nW10sIC4uLmFyZ3M6IGFueSk6IElUZXJtRm9ybWF0IHtcclxuXHRcdGxldCB0bXA6IHN0cmluZztcclxuXHRcdGNvbnN0IF9mb3JtYXRzOiBzdHJpbmdbXSA9IHRoaXMuZ2V0Rm9ybWF0cyhmb3JtYXRzKTtcclxuXHRcdGNvbnN0IF9mb3JtYXQgPSAodmFsOiBhbnkpOiBhbnkgPT4ge1xyXG5cdFx0XHRpZiAodGhpcy5ESVNBQkxFRCB8fCAhZm9ybWF0cy5sZW5ndGgpIHJldHVybiB2YWw7XHJcblx0XHRcdGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbCAmJiB2YWwpe1xyXG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHJldHVybiB2YWw7XHJcblx0XHRcdFx0aWYgKG5ldyBSZWdFeHAoJ1xcXFxbb2JqZWN0IFxcXFx3K1xcXFxcXF0nKS50ZXN0KHRtcCA9IF9zdHJpbmcodmFsKSkpIHJldHVybiB2YWw7XHJcblx0XHRcdFx0ZWxzZSB2YWwgPSB0bXA7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCEoJ3N0cmluZycgPT09IHR5cGVvZiB2YWwgJiYgdmFsLmxlbmd0aCkpIHJldHVybiB2YWw7XHJcblx0XHRcdHJldHVybiBfZm9ybWF0cy5yZWR1Y2U8c3RyaW5nPigodiwgZikgPT4gdGhpcy5GT1JNQVRTW2ZdICsgdiArIHRoaXMuRk9STUFUUy5yZXNldCwgdmFsKTtcclxuXHRcdH07XHJcblx0XHRjb25zdCB0aGF0ID0gdGhpcywgX2FyZ3M6IGFueVtdID0gYXJncztcclxuXHRcdHJldHVybiB7XHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogQWRkIGZvcm1hdHRlZCB2YWx1ZXNcclxuXHRcdFx0ICogXHJcblx0XHRcdCAqIEBwYXJhbSBmb3JtYXRzXHJcblx0XHRcdCAqIEBwYXJhbSBhcmdzXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRmb3JtYXQoZm9ybWF0czogc3RyaW5nfHN0cmluZ1tdLCAuLi5hcmdzOiBhbnlbXSk6IElUZXJtRm9ybWF0IHtcclxuXHRcdFx0XHRfYXJncy5wdXNoKHRoYXQuZm9ybWF0KGZvcm1hdHMsIC4uLmFyZ3MpLnZhbHVlcygpKTtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcztcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3NcclxuXHRcdFx0ICovXHJcblx0XHRcdHZhbHVlcyguLi5hcmdzOiBhbnlbXSk6IGFueVtdIHtcclxuXHRcdFx0XHRyZXR1cm4gX2FyZ3MuY29uY2F0KGFyZ3MpLm1hcCh2YWwgPT4gX2Zvcm1hdCh2YWwpKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBHZXQgdmFsdWVzIHdpdGhvdXQgZm9ybWF0dGluZ1xyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3NcclxuXHRcdFx0ICovXHJcblx0XHRcdGNsZWFyKC4uLmFyZ3M6IGFueVtdKTogYW55W10ge1xyXG5cdFx0XHRcdHJldHVybiB0aGF0LmNsZWFyKC4uLnRoaXMudmFsdWVzKC4uLmFyZ3MpKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBgY29uc29sZS5sb2dgIGZvcm1hdHRlZCB2YWx1ZXNcclxuXHRcdFx0ICogXHJcblx0XHRcdCAqIEBwYXJhbSBhcmdzIFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0bG9nKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHRcdFx0Y29uc29sZS5sb2coLi4udGhpcy52YWx1ZXMoLi4uYXJncykpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIGBjb25zb2xlLmRlYnVnYCBmb3JtYXR0ZWQgdmFsdWVzXHJcblx0XHRcdCAqIFxyXG5cdFx0XHQgKiBAcGFyYW0gYXJncyBcclxuXHRcdFx0ICovXHJcblx0XHRcdGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHRcdFx0Y29uc29sZS5kZWJ1ZyguLi50aGlzLnZhbHVlcyguLi5hcmdzKSk7XHJcblx0XHRcdH0sXHJcblxyXG5cdFx0XHQvKipcclxuXHRcdFx0ICogYGNvbnNvbGUud2FybmAgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3MgXHJcblx0XHRcdCAqL1xyXG5cdFx0XHR3YXJuKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHRcdFx0Y29uc29sZS53YXJuKC4uLnRoaXMudmFsdWVzKC4uLmFyZ3MpKTtcclxuXHRcdFx0fSxcclxuXHJcblx0XHRcdC8qKlxyXG5cdFx0XHQgKiBgY29uc29sZS5lcnJvcmAgZm9ybWF0dGVkIHZhbHVlc1xyXG5cdFx0XHQgKiBcclxuXHRcdFx0ICogQHBhcmFtIGFyZ3MgXHJcblx0XHRcdCAqL1xyXG5cdFx0XHRlcnJvciguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoLi4udGhpcy52YWx1ZXMoLi4uYXJncykpO1xyXG5cdFx0XHR9LFxyXG5cclxuXHRcdFx0LyoqXHJcblx0XHRcdCAqIGBjb25zb2xlLmluZm9gIGZvcm1hdHRlZCB2YWx1ZXNcclxuXHRcdFx0ICogXHJcblx0XHRcdCAqIEBwYXJhbSBhcmdzIFxyXG5cdFx0XHQgKi9cclxuXHRcdFx0aW5mbyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG5cdFx0XHRcdGNvbnNvbGUuaW5mbyguLi50aGlzLnZhbHVlcyguLi5hcmdzKSk7XHJcblx0XHRcdH0sXHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2xlYXIgdGV4dCB2YWx1ZSBmb3JtYXR0aW5nXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGFyZ3MgIEZvcm1hdHRlZCB2YWx1ZXNcclxuXHQgKiBAcmV0dXJucyBgYW55W11gIENsZWFyIHZhbHVlc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBjbGVhciguLi5hcmdzOiBhbnlbXSk6IGFueVtdIHtcclxuXHRcdGNvbnN0IF9jbGVhciA9ICh2YWw6IHN0cmluZyk6IHN0cmluZyA9PiBPYmplY3QudmFsdWVzKHRoaXMuRk9STUFUUykucmVkdWNlPHN0cmluZz4oKHAsIHYpPT4gcC5yZXBsYWNlKG5ldyBSZWdFeHAoU3RyaW5nKHYpLnJlcGxhY2UoL1xceDFCLywgJ1xcXFx4MUInKS5yZXBsYWNlKC9cXFsvLCAnXFxcXFsnKSwgJ2cnKSwgJycpLCB2YWwpO1xyXG5cdFx0cmV0dXJuIGFyZ3MubWFwKCh2YWw6IGFueSkgPT4gJ3N0cmluZycgPT09IHR5cGVvZiB2YWwgJiYgdmFsLnRyaW0oKS5sZW5ndGggPyBfY2xlYXIodmFsKSA6IHZhbCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXQgZm9ybWF0dGVkIHRleHRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gdmFsdWUgIFRleHQgdmFsdWVcclxuXHQgKiBAcGFyYW0gZm9ybWF0cyAgVGV4dCBmb3JtYXQocylcclxuXHQgKiBAcmV0dXJucyBgc3RyaW5nYCBGb3JtYXR0ZWRcclxuXHQgKi9cclxuXHRzdGF0aWMgdGV4dCh2YWx1ZTogc3RyaW5nLCBmb3JtYXRzPzogc3RyaW5nfHN0cmluZ1tdKTogc3RyaW5nIHtcclxuXHRcdGNvbnN0IF92YWw6IHN0cmluZyA9IF9zdHJpbmcodmFsdWUpLCBfZm9ybWF0czogc3RyaW5nW10gPSAoQXJyYXkuaXNBcnJheShmb3JtYXRzKSA/IGZvcm1hdHMgOiAnc3RyaW5nJyA9PT0gdHlwZW9mIGZvcm1hdHMgPyBbZm9ybWF0c10gOiBbXSkuZmlsdGVyKHYgPT4gJ3N0cmluZycgPT09IHR5cGVvZiB2ICYmICEhdi50cmltKCkpO1xyXG5cdFx0aWYgKCEoX2Zvcm1hdHMubGVuZ3RoICYmIF92YWwudHJpbSgpLmxlbmd0aCkpIHJldHVybiBfdmFsO1xyXG5cdFx0cmV0dXJuIHRoaXMuZm9ybWF0KF9mb3JtYXRzLCBfdmFsKS52YWx1ZXMoKVswXTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIExvZyBgY29uc29sZS5sb2dgIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIGxvZyguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xyXG5cdFx0dGhpcy5mb3JtYXQoJ2xvZycsIC4uLmFyZ3MpLmxvZygpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRGVidWcgYGNvbnNvbGUuZGVidWdgIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIGRlYnVnKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnZGVidWcnLCAuLi5hcmdzKS5kZWJ1ZygpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXJyb3IgYGNvbnNvbGUuZXJyb3JgIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIGVycm9yKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnZXJyb3InLCAuLi5hcmdzKS5lcnJvcigpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogV2FybiBgY29uc29sZS53YXJuYCBmb3JtYXRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gYXJnc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyB3YXJuKC4uLmFyZ3M6IGFueSk6IHZvaWQge1xyXG5cdFx0dGhpcy5mb3JtYXQoJ3dhcm4nLCAuLi5hcmdzKS53YXJuKCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBJbmZvIGBjb25zb2xlLmluZm9gIGZvcm1hdFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBhcmdzXHJcblx0ICovXHJcblx0c3RhdGljIGluZm8oLi4uYXJnczogYW55KTogdm9pZCB7XHJcblx0XHR0aGlzLmZvcm1hdCgnaW5mbycsIC4uLmFyZ3MpLmluZm8oKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN1Y2Nlc3MgYGNvbnNvbGUubG9nYCBmb3JtYXRcclxuXHQgKiBcclxuXHQgKiBAcGFyYW0gYXJnc1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBzdWNjZXNzKC4uLmFyZ3M6IGFueSk6IHZvaWQge1xyXG5cdFx0dGhpcy5mb3JtYXQoJ3N1Y2Nlc3MnLCAuLi5hcmdzKS5sb2coKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldCB2YWx1ZSBsaXN0XHJcblx0ICogXHJcblx0ICogQHBhcmFtIHZhbHVlXHJcblx0ICogQHBhcmFtIF9lbnRyaWVzXHJcblx0ICovXHJcblx0c3RhdGljIGxpc3QodmFsdWU6IGFueSwgX2VudHJpZXM6IGJvb2xlYW4gPSBmYWxzZSk6IFtsaXN0OiBhbnlbXSwgdHlwZTondmFsdWVzJ3wnZW50cmllcyddIHtcclxuXHRcdGxldCBpdGVtczogYW55W10gPSBbdmFsdWVdLCB0eXBlOiAndmFsdWVzJ3wnZW50cmllcycgPSAndmFsdWVzJztcclxuXHRcdGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbHVlICYmIHZhbHVlKXtcclxuXHRcdFx0aWYgKCEodHlwZSA9IHZhbHVlW1N5bWJvbC5pdGVyYXRvcl0/Lm5hbWUpKXtcclxuXHRcdFx0XHR0eXBlID0gJ3ZhbHVlcyc7XHJcblx0XHRcdFx0aXRlbXMgPSBbdmFsdWVdO1xyXG5cdFx0XHRcdGlmIChfZW50cmllcyAmJiBfc3RyaW5nYWJsZSh2YWx1ZSkgPT09IGZhbHNlKXtcclxuXHRcdFx0XHRcdGxldCB0bXA6IGFueSA9IF9qc29uQ2xvbmU8YW55Pih2YWx1ZSksIHRtcF9lbnRyaWVzOiBbazogYW55LCB2OiBhbnldW10gPSBbXTtcclxuXHRcdFx0XHRcdGlmICghKCdvYmplY3QnID09PSB0eXBlb2YgdG1wICYmIHRtcCAmJiAodG1wX2VudHJpZXMgPSBPYmplY3QuZW50cmllcyh0bXApKS5sZW5ndGgpKSB0bXBfZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKHZhbHVlKTtcclxuXHRcdFx0XHRcdGlmICh0bXBfZW50cmllcy5sZW5ndGgpe1xyXG5cdFx0XHRcdFx0XHR0eXBlID0gJ2VudHJpZXMnO1xyXG5cdFx0XHRcdFx0XHRpdGVtcyA9IHRtcF9lbnRyaWVzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmICh0eXBlID09PSAnZW50cmllcycpIGl0ZW1zID0gX2VudHJpZXMgPyBbLi4udmFsdWVdIDogW3ZhbHVlXTtcclxuXHRcdFx0ZWxzZSBpdGVtcyA9IFsuLi52YWx1ZV07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gW2l0ZW1zLCB0eXBlXTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEN1c3RvbSBgY29uc29sZS50YWJsZWAgbG9nZ2VyXHJcblx0ICogXHJcblx0ICogQHBhcmFtIGRhdGFcclxuXHQgKiBAcGFyYW0gY2VsbE1heExlbmd0aFxyXG5cdCAqL1xyXG5cdHN0YXRpYyB0YWJsZShkYXRhOiBhbnksIGNlbGxNYXhMZW5ndGg6IG51bWJlciA9IDI0OCwgZGl2aWRlcjogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcblx0XHRcclxuXHRcdC8vdmFyc1xyXG5cdFx0Y29uc3QgdGhhdCA9IHRoaXM7XHJcblx0XHRjb25zdCBbZGF0YV9pdGVtcywgZGF0YV90eXBlXSA9IHRoYXQubGlzdChkYXRhLCAnb2JqZWN0JyA9PT0gdHlwZW9mIGRhdGEgJiYgZGF0YSAmJiAhX3N0cmluZ2FibGUoZGF0YSkpO1xyXG5cclxuXHRcdC8vZm4gPT4gc3RyIHZhbHVlXHJcblx0XHRjb25zdCBzdHJWYWwgPSAodmFsOiBhbnkpOiBbX3ZhbHVlOiBzdHJpbmcsIF9mb3JtYXQ6IHN0cmluZ10gPT4ge1xyXG5cdFx0XHRsZXQgY29sb3I6IHN0cmluZywgdG1wOiBhbnk7XHJcblx0XHRcdGlmICghQXJyYXkuaXNBcnJheSh2YWwpICYmICh0bXAgPSBfc3RyaW5nYWJsZSh2YWwpKSAhPT0gZmFsc2Upe1xyXG5cdFx0XHRcdGNvbG9yID0gJ2dyZWVuJztcclxuXHRcdFx0XHRpZiAoJ251bWJlcicgPT09IHR5cGVvZiB2YWwpIGNvbG9yID0gJ3llbGxvdyc7XHJcblx0XHRcdFx0ZWxzZSBpZiAodmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSBudWxsKSBjb2xvciA9ICdncmF5JztcclxuXHRcdFx0XHRlbHNlIGlmICh2YWwgPT09IHRydWUpIGNvbG9yID0gJ2N5YW4nO1xyXG5cdFx0XHRcdGVsc2UgaWYgKHZhbCA9PT0gZmFsc2UpIGNvbG9yID0gJ3JlZCc7XHJcblx0XHRcdFx0ZWxzZSBpZiAoL15cXGR7NH0tKD86MFsxLTldfDFbMC0yXSktKD86WzAtMl1bMS05XXxbMS0zXTB8M1swMV0pVCg/OlswLTFdWzAtOV18MlswLTNdKSg/OjpbMC02XVxcZCkoPzo6WzAtNl1cXGQpPyg/OlxcLlxcZHszfSk/KD86WystXVswLTJdXFxkOlswLTVdXFxkfFopPyQvLnRlc3QodG1wKSkgY29sb3IgPSAnbWFnZW50YSc7IC8vbWF0Y2ggSVNPIHRpbWVzdGFtcCAoaS5lLiAyMDIzLTA2LTA5VDE4OjE4OjU3LjA3MFopXHJcblx0XHRcdFx0dmFsID0gdG1wO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdGlmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHZhbCAmJiB2YWwpe1xyXG5cdFx0XHRcdFx0Y29uc3QgX3R5cGUgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXTtcclxuXHRcdFx0XHRcdGlmICghIV90eXBlKXtcclxuXHRcdFx0XHRcdFx0dmFsID0gWy4uLnZhbF07XHJcblx0XHRcdFx0XHRcdGlmIChfdHlwZSA9PT0gJ2VudHJpZXMnKSB2YWwgPSBPYmplY3QuZnJvbUVudHJpZXModmFsKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2UgdmFsID0gX2pzb25DbG9uZTxhbnk+KHZhbCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHZhbCA9IF9qc29uU3RyaW5naWZ5KHZhbCk7XHJcblx0XHRcdFx0Y29sb3IgPSAnbWFnZW50YSc7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIFt2YWwsIGNvbG9yXTtcclxuXHRcdH07XHJcblxyXG5cdFx0Ly92YWx1ZSBsb2cgLSBjYW5ub3QgYmUgdGFibGVkXHJcblx0XHRpZiAoZGF0YV90eXBlID09PSAndmFsdWVzJyAmJiBkYXRhX2l0ZW1zLmxlbmd0aCA8IDIpe1xyXG5cdFx0XHRjb25zdCBbX3ZhbHVlLCBfZm9ybWF0XSA9IHN0clZhbChkYXRhKTtcclxuXHRcdFx0Y29uc29sZS5sb2codGhhdC50ZXh0KF92YWx1ZSwgX2Zvcm1hdCkpO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblxyXG5cdFx0Ly90YWJsZSBpdGVtc1xyXG5cdFx0bGV0IG1vZGU6ICd2YWx1ZXMnfCdlbnRyaWVzJztcclxuXHRcdGNvbnN0IHRhYmxlX2l0ZW1zOiBhbnlbXVtdID0gW107XHJcblx0XHRpZiAoZGF0YV90eXBlID09PSAnZW50cmllcycpe1xyXG5cdFx0XHR0YWJsZV9pdGVtcy5wdXNoKFsnKGluZGV4KScsICdWYWx1ZXMnXSk7XHJcblx0XHRcdHRhYmxlX2l0ZW1zLnB1c2goLi4uZGF0YV9pdGVtcyk7XHJcblx0XHR9XHJcblx0XHRlbHNlIHtcclxuXHRcdFx0bGV0IG1hcF9rZXlzOiBzdHJpbmdbXSA9IFtdLCBtYXBfaXRlbXM6IHtba2V5OiBzdHJpbmddOiBhbnl9W10gPSBbXTtcclxuXHRcdFx0ZGF0YV9pdGVtcy5mb3JFYWNoKChkYXRhX2l0ZW0sIHIpID0+IHtcclxuXHRcdFx0XHRsZXQgW2xpc3RfaXRlbXMsIGxpc3RfdHlwZV0gPSB0aGF0Lmxpc3QoZGF0YV9pdGVtLCAhciB8fCBtb2RlID09PSAnZW50cmllcycpO1xyXG5cdFx0XHRcdGlmICghcikgbW9kZSA9IGxpc3RfdHlwZTtcclxuXHRcdFx0XHRjb25zdCBtYXBfaXRlbToge1trZXk6IHN0cmluZ106IGFueX0gPSB7fTtcclxuXHRcdFx0XHRsaXN0X2l0ZW1zLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcclxuXHRcdFx0XHRcdGxldCBrOiBzdHJpbmcsIHY6IGFueTtcclxuXHRcdFx0XHRcdGlmIChsaXN0X3R5cGUgPT09ICdlbnRyaWVzJyl7XHJcblx0XHRcdFx0XHRcdGsgPSBfc3RyKGl0ZW1bMF0sIHRydWUsIHRydWUpO1xyXG5cdFx0XHRcdFx0XHR2ID0gaXRlbVsxXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRrID0gYCR7aX1gO1xyXG5cdFx0XHRcdFx0XHR2ID0gaXRlbTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmICghbWFwX2tleXMuaW5jbHVkZXMoaykpIG1hcF9rZXlzLnB1c2goayk7XHJcblx0XHRcdFx0XHRtYXBfaXRlbVtrXSA9IHY7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0bWFwX2l0ZW1zLnB1c2gobWFwX2l0ZW0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGFibGVfaXRlbXMucHVzaChbJyhpbmRleCknLCAuLi5tYXBfa2V5c10pO1xyXG5cdFx0XHRtYXBfaXRlbXMuZm9yRWFjaCgobWFwX2l0ZW0sIHIpID0+IHtcclxuXHRcdFx0XHRjb25zdCB0YWJsZV9pdGVtOiBhbnlbXSA9IFtdO1xyXG5cdFx0XHRcdGZvciAoY29uc3Qga2V5IG9mIG1hcF9rZXlzKSB0YWJsZV9pdGVtLnB1c2gobWFwX2l0ZW1ba2V5XSk7XHJcblx0XHRcdFx0dGFibGVfaXRlbXMucHVzaChbciwgLi4udGFibGVfaXRlbV0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHJcblx0XHQvL3dpZHRoXHJcblx0XHRjb25zdCB3aWR0aF9tYXA6IHtba2V5OiBudW1iZXJdOiBudW1iZXJ9ID0ge307XHJcblx0XHRjb25zdCBzdHJfaXRlbXM6IFtfdmFsdWU6IHN0cmluZywgX2Zvcm1hdDogc3RyaW5nXVtdW10gPSBbXTtcclxuXHRcdHRhYmxlX2l0ZW1zLmZvckVhY2godGFibGVfaXRlbSA9PiB7XHJcblx0XHRcdGNvbnN0IHN0cl9pdGVtOiBbX3ZhbHVlOiBzdHJpbmcsIF9mb3JtYXQ6IHN0cmluZ11bXSA9IFtdO1xyXG5cdFx0XHR0YWJsZV9pdGVtLmZvckVhY2goKHZhbCwgaSkgPT4ge1xyXG5cdFx0XHRcdGNvbnN0IFtfdmFsdWUsIF9mb3JtYXRdID0gc3RyVmFsKHZhbCk7XHJcblx0XHRcdFx0aWYgKCF3aWR0aF9tYXAuaGFzT3duUHJvcGVydHkoaSkpIHdpZHRoX21hcFtpXSA9IDA7XHJcblx0XHRcdFx0bGV0IGxlbiA9IF92YWx1ZS5sZW5ndGg7XHJcblx0XHRcdFx0aWYgKGxlbiA+IGNlbGxNYXhMZW5ndGgpIGxlbiA9IGNlbGxNYXhMZW5ndGg7IC8vY2VsbE1heExlbmd0aCBsaW1pdFxyXG5cdFx0XHRcdGlmIChsZW4gPiB3aWR0aF9tYXBbaV0pIHdpZHRoX21hcFtpXSA9IGxlbjtcclxuXHRcdFx0XHRzdHJfaXRlbS5wdXNoKFtfdmFsdWUsIF9mb3JtYXRdKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHN0cl9pdGVtcy5wdXNoKHN0cl9pdGVtKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdC8vcm93c1xyXG5cdFx0Y29uc3Qgcm93c19sZW46IG51bWJlciA9IHN0cl9pdGVtcy5sZW5ndGg7XHJcblx0XHRzdHJfaXRlbXMuZm9yRWFjaCgoc3RyX2l0ZW0sIHIpID0+IHtcclxuXHRcdFx0bGV0IG1heF9saW5lczogbnVtYmVyID0gMCwgc3RyX2l0ZW1fbGluZXM6IHN0cmluZ1tdW10gPSBbXTtcclxuXHRcdFx0c3RyX2l0ZW0uZm9yRWFjaCgodmFsLCBpKSA9PiB7XHJcblx0XHRcdFx0bGV0IFtfdmFsdWUsIF9mb3JtYXRdID0gdmFsO1xyXG5cdFx0XHRcdGlmICghaSB8fCAhcikgX2Zvcm1hdCA9ICghaSAmJiByICYmIG1vZGUgPT09ICd2YWx1ZXMnKSA/ICdncmF5JyA6ICd3aGl0ZSc7XHJcblx0XHRcdFx0Y29uc3Qgd2lkdGg6IG51bWJlciA9IHdpZHRoX21hcFtpXTtcclxuXHRcdFx0XHRjb25zdCBsaW5lczogc3RyaW5nW10gPSBbXTtcclxuXHRcdFx0XHRpZiAoX3ZhbHVlLmxlbmd0aCA+IHdpZHRoKXtcclxuXHRcdFx0XHRcdHdoaWxlIChfdmFsdWUubGVuZ3RoID4gd2lkdGgpIHtcclxuXHRcdFx0XHRcdFx0Y29uc3QgbGluZSA9IF92YWx1ZS5zdWJzdHJpbmcoMCwgd2lkdGgpLnBhZEVuZCh3aWR0aCk7XHJcblx0XHRcdFx0XHRcdF92YWx1ZSA9IF92YWx1ZS5zbGljZSh3aWR0aCk7XHJcblx0XHRcdFx0XHRcdGxpbmVzLnB1c2godGhhdC50ZXh0KGxpbmUsIF9mb3JtYXQpKTsgLy9mb3JtYXRcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChfdmFsdWUubGVuZ3RoKSBsaW5lcy5wdXNoKHRoYXQudGV4dChfdmFsdWUucGFkRW5kKHdpZHRoKSwgX2Zvcm1hdCkpOyAvL2Zvcm1hdFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRlbHNlIGxpbmVzLnB1c2godGhhdC50ZXh0KF92YWx1ZS5wYWRFbmQod2lkdGgpLCBfZm9ybWF0KSk7IC8vZm9ybWF0XHJcblx0XHRcdFx0c3RyX2l0ZW1fbGluZXMucHVzaChsaW5lcyk7XHJcblx0XHRcdFx0aWYgKG1heF9saW5lcyA8IGxpbmVzLmxlbmd0aCkgbWF4X2xpbmVzID0gbGluZXMubGVuZ3RoO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0c3RyX2l0ZW1fbGluZXMgPSBzdHJfaXRlbV9saW5lcy5tYXAoKGxpbmVzLCBjKSA9PiB7XHJcblx0XHRcdFx0Y29uc3Qgd2lkdGg6IG51bWJlciA9IHdpZHRoX21hcFtjXTtcclxuXHRcdFx0XHRyZXR1cm4gWy4uLkFycmF5KG1heF9saW5lcyldLm1hcCgoXywgaSkgPT4ge1xyXG5cdFx0XHRcdFx0Y29uc3QgbGluZSA9IGkgPCBsaW5lcy5sZW5ndGggPyBsaW5lc1tpXSA6ICcnLnBhZEVuZCh3aWR0aCk7XHJcblx0XHRcdFx0XHRyZXR1cm4gbGluZTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdGNvbnN0IGxpbmVfcm93czpzdHJpbmdbXVtdID0gWy4uLkFycmF5KG1heF9saW5lcyldLm1hcCgoKSA9PiBbXSk7XHJcblx0XHRcdHN0cl9pdGVtX2xpbmVzLmZvckVhY2goKGxpbmVzLCBjKSA9PiB7XHJcblx0XHRcdFx0bGluZXMuZm9yRWFjaCgobGluZSwgaSkgPT4gbGluZV9yb3dzW2ldW2NdID0gbGluZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRjb25zdCByb3dzOiBzdHJpbmdbXSA9IFtdO1xyXG5cdFx0XHRjb25zdCBsZW4gPSBsaW5lX3Jvd3MubGVuZ3RoO1xyXG5cdFx0XHRsaW5lX3Jvd3MuZm9yRWFjaCgobGluZV9yb3csIG4pID0+IHtcclxuXHRcdFx0XHRpZiAoIW4gJiYgIXIpIHJvd3MucHVzaCgn4pSM4pSAJyArIGxpbmVfcm93Lm1hcCgoXywgaSkgPT4gJycucGFkRW5kKHdpZHRoX21hcFtpXSwgJ+KUgCcpKS5qb2luKCfilIDilKzilIAnKSArICfilIDilJAnKTsgLy9ib3JkZXIgdG9wXHJcblx0XHRcdFx0cm93cy5wdXNoKCfilIIgJyArIGxpbmVfcm93LmpvaW4oJyDilIIgJykgKyAnIOKUgicpO1xyXG5cdFx0XHRcdGlmICgoIXIgfHwgZGl2aWRlcikgJiYgbiArIDEgPT09IGxlbiAmJiByICsgMSA8IHJvd3NfbGVuKSByb3dzLnB1c2goJ+KUnOKUgCcgKyBsaW5lX3Jvdy5tYXAoKF8sIGkpID0+ICcnLnBhZEVuZCh3aWR0aF9tYXBbaV0sICfilIAnKSkuam9pbign4pSA4pS84pSAJykgKyAn4pSA4pSkJyk7IC8vYm9yZGVyIG1pZFxyXG5cdFx0XHRcdGlmIChuICsgMSA9PT0gbGVuICYmIHIgKyAxID09PSByb3dzX2xlbikgcm93cy5wdXNoKCfilJTilIAnICsgbGluZV9yb3cubWFwKChfLCBpKSA9PiAnJy5wYWRFbmQod2lkdGhfbWFwW2ldLCAn4pSAJykpLmpvaW4oJ+KUgOKUtOKUgCcpICsgJ+KUgOKUmCcpOyAvL2JvcmRlciBib3R0b21cclxuXHRcdFx0fSk7XHJcblx0XHRcdHJvd3MuZm9yRWFjaChyb3cgPT4gY29uc29sZS5sb2cocm93KSk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuXHJcblxyXG4vL1RFU1QgVEFCTEVcclxuLy8gY29uc3QgX3ZhbHVlczogYW55W10gPSBgXHJcbi8vIEluIGV1IGZldWdpYXQgaXBzdW0sIGlkIGV1aXNtb2QgbmlzaS5cclxuLy8gU2VkIHNlbSB2ZWxpdCwgZmFjaWxpc2lzIHZpdGFlIHR1cnBpcyB1dCwgb3JuYXJlIGZpbmlidXMgbGFjdXMuXHJcbi8vIFByb2luIHNvZGFsZXMgdmVzdGlidWx1bSBtYXVyaXMgZXUgdGVtcG9yLiBDcmFzIHNpdCBhbWV0IHZlaGljdWxhIHVybmEuXHJcbi8vIE1hZWNlbmFzIGZldWdpYXQgdmFyaXVzIHZlbGl0IGV1IGVnZXN0YXMuIERvbmVjIGZpbmlidXMgbG9yZW0gZXQgdGVtcG9yIGxvYm9ydGlzLlxyXG4vLyBOdWxsYW0gdGluY2lkdW50IHBvc3VlcmUgbmliaCwgdm9sdXRwYXQgaW1wZXJkaWV0IG9yY2kgcmhvbmN1cyBldS4gVmVzdGlidWx1bSBtYXhpbXVzIHJ1dHJ1bSBlcmF0IGFjIGZhdWNpYnVzLlxyXG4vLyBNYXVyaXMgdml0YWUgdGVtcG9yIHZlbGl0LlxyXG4vLyBDdXJhYml0dXIgdWx0cmljaWVzIG51bmMgbm9uIG1hc3NhIGF1Y3RvciwgdmVsIHRpbmNpZHVudCB0dXJwaXMgZWxlbWVudHVtLlxyXG4vLyBgLnRyaW0oKS5zcGxpdCgnXFxuJykubWFwKHYgPT4gdi50cmltKCkpO1xyXG4vLyBjb25zdCBfc2V0ID0gbmV3IFNldDxudW1iZXI+KFsxLCAyLCAyLCA0LCA1XSk7XHJcbi8vIGNvbnN0IF9tYXAgPSBuZXcgTWFwPHN0cmluZywgYW55PihbWyduYW1lJywgJ01hcnRpbiddLCBbJ2FnZScsIDMwXSwgWydwaG9uZScsIDQ0NDU1NV1dKTtcclxuLy8gY29uc3QgX2NpcmMgPSAoKCk9PnsgY29uc3QgeHYgPSB7bmFtZTondGVzdFhWJyxfZ2V0OmZ1bmN0aW9uKHRoaXM6IGFueSl7Y29uc3Qgc2VsZiA9IHRoaXM7IHNlbGYuX3h2ID0gc2VsZjsgcmV0dXJuIHNlbGY7fX07IHJldHVybiB4di5fZ2V0KCk7IH0pKCk7XHJcbi8vIF92YWx1ZXMucHVzaCguLi5bbmV3IERhdGUoKSwgbmV3IFR5cGVFcnJvcignSGVsbG8gZXJyb3IuJyksIF9zZXQsIF9tYXAsIF9jaXJjXSk7XHJcbi8vIGNvbnN0IF9iYXRjaCA9IF9iYXRjaFZhbHVlcyhfdmFsdWVzLCAzKS5tYXAoYXJyID0+ICEoX3JhbmQoMCwgMTApJTIpID8gYXJyLnNsaWNlKDApIDogYXJyLnNsaWNlKDApLnJldmVyc2UoKSk7XHJcbi8vIGNvbnN0IF9vYmplY3RzOiBhbnlbXSA9IF9qc29uQ2xvbmU8YW55W11bXT4oX2JhdGNoKS5tYXAoYXJyID0+IE9iamVjdC5mcm9tRW50cmllcyhhcnIubWFwKCh2LCBpKSA9PiBbYGNvbCAke2l9YCwgdl0pKSk7XHJcbi8vIGNvbnN0IF9vYmplY3Q6IGFueSA9IF9vYmplY3RzW19yYW5kKDAsIF9vYmplY3RzLmxlbmd0aCAtIDEpXTtcclxuLy8gY29uc3QgX2FycjogYW55W10gPSBbLi4uQXJyYXkoNSldLm1hcCgoXywgcikgPT4gWy4uLkFycmF5KDQpXS5tYXAoKF8sIGMpID0+IGAke1tyLCBjXX1gKSk7XHJcbi8vIC8vdGVzdHNcclxuLy8gY29uc3QgX3Rlc3RzOiB7W2tleTogc3RyaW5nXTogYW55fSA9IHtcclxuLy8gXHRfc2V0LFxyXG4vLyBcdF9tYXAsXHJcbi8vIFx0X2JhdGNoLFxyXG4vLyBcdF9vYmplY3QsXHJcbi8vIFx0X2FycixcclxuLy8gXHRfc3RyOiAnQ3VyYWJpdHVyIHVsdHJpY2llcyBudW5jIG5vbiBtYXNzYSBhdWN0b3IsIHZlbCB0aW5jaWR1bnQgdHVycGlzIGVsZW1lbnR1bS4nLFxyXG4vLyBcdF9udW06IF9yYW5kKDEwMDAsIDEwMDAwMCksXHJcbi8vIFx0X2RhdGU6IG5ldyBEYXRlKCksXHJcbi8vIFx0X2VycjogbmV3IEVycm9yKCdIZWxsbyBlcnJvciEnKSxcclxuLy8gXHRfYm9vbDogW3RydWUsIGZhbHNlXSxcclxuLy8gfTtcclxuLy8gT2JqZWN0LmVudHJpZXMoX3Rlc3RzKS5mb3JFYWNoKChlbnRyeSwgaSkgPT4ge1xyXG4vLyBcdGNvbnN0IFtrZXksIHZhbHVlXSA9IGVudHJ5O1xyXG4vLyBcdGNvbnNvbGUubG9nKCcnKTtcclxuLy8gXHRUZXJtLndhcm4oYC0tLSBbJHtpfV0gdGVzdCAtICR7a2V5fWAsIHZhbHVlPy5sZW5ndGggPz8gJycpO1xyXG4vLyBcdFRlcm0udGFibGUodmFsdWUsIDMyKTtcclxuLy8gfSk7XHJcbi8vIC8vdGFibGVcclxuLy8gY29uc29sZS5sb2coJycpO1xyXG4vLyBUZXJtLmRlYnVnKCc9PT0gdGFibGUnKTtcclxuLy8gY29uc29sZS50YWJsZShfYXJyKTtcclxuLy8gY29uc29sZS50YWJsZShfb2JqZWN0KTtcclxuLy8gcmV0dXJuOyIsIi8vX2NvbW1vblxyXG5leHBvcnQgdHlwZSB7XHJcbiAgYm9vbCxcclxufSBmcm9tICcuL19jb21tb24nO1xyXG5cclxuLy9faGVsbG9cclxuZXhwb3J0IHtcclxuICBfc2F5SGVsbG8sXHJcbn0gZnJvbSAnLi9faGVsbG8nO1xyXG5cclxuLy9fanNvblxyXG5leHBvcnQge1xyXG4gIF9qc29uU3RyaW5naWZ5LFxyXG4gIF9qc29uUGFyc2UsXHJcbiAgX2pzb25DbG9uZSxcclxufSBmcm9tICcuL19qc29uJztcclxuXHJcbi8vX3N0cmluZ1xyXG5leHBvcnQge1xyXG5cdF91dWlkLFxyXG4gIF9zdHJpbmcsXHJcbiAgX3N0cmluZ2FibGUsXHJcbiAgX3N0ck5vcm0sXHJcbiAgX3N0cixcclxuICBfcmVnRXNjYXBlLFxyXG5cdF9zdHJFc2NhcGUsXHJcbiAgLy8gX3RyaW0sXHJcbiAgLy8gX3RpdGxlQ2FzZSxcclxuICAvLyBfc2VudGVuY2VDYXNlLFxyXG4gIC8vIF9zbmFrZUNhc2UsXHJcbiAgLy8gX3NsdWdDYXNlLFxyXG4gIC8vIF9zdHVkbHlDYXNlLFxyXG59IGZyb20gJy4vX3N0cmluZyc7XHJcblxyXG4vL19iYXRjaFxyXG5leHBvcnQge1xyXG4gIF9iYXRjaFZhbHVlcyxcclxufSBmcm9tICcuL19iYXRjaCc7XHJcblxyXG4vL19kYXRldGltZVxyXG5leHBvcnQge1xyXG4gIF9pc0RhdGUsXHJcbiAgX2dldERhdGUsXHJcbiAgX2RhdGV0aW1lLFxyXG4gIF90aW1lc3RhbXAsXHJcbn0gZnJvbSAnLi9fZGF0ZXRpbWUnO1xyXG5cclxuZXhwb3J0IHtcclxuICBfaXNOdW1lcmljLFxyXG4gIF90b051bSxcclxuICBfbnVtLFxyXG4gIF9pbnQsXHJcbiAgX3JvdW5kLFxyXG4gIF9jb21tYXMsXHJcbiAgX3JhbmQsXHJcbn0gZnJvbSAnLi9fbnVtYmVyJztcclxuXHJcbi8vX3Byb21pc2VcclxuZXhwb3J0IHR5cGUge1xyXG4gIElQcm9taXNlUmVzdWx0LFxyXG59IGZyb20gJy4vX3Byb21pc2UnO1xyXG5cclxuZXhwb3J0IHtcclxuICBfYXN5bmNBbGwsXHJcbiAgX2FzeW5jVmFsdWVzLFxyXG4gIF9zbGVlcCxcclxufSBmcm9tICcuL19wcm9taXNlJztcclxuXHJcbi8vX3F1ZXVlXHJcbmV4cG9ydCB0eXBlIHtcclxuICBJUXVldWUsXHJcbn0gZnJvbSAnLi9fcXVldWUnO1xyXG5cclxuZXhwb3J0IHtcclxuICBfcXVldWUsXHJcbn0gZnJvbSAnLi9fcXVldWUnO1xyXG5cclxuLy9fc29ydFxyXG5leHBvcnQgdHlwZSB7XHJcbiAgU29ydERpcmVjdGlvbixcclxuICBTb3J0T3JkZXIsXHJcbn0gZnJvbSAnLi9fc29ydCc7XHJcblxyXG5leHBvcnQge1xyXG4gIF9zb3J0VmFsdWVzLFxyXG59IGZyb20gJy4vX3NvcnQnO1xyXG5cclxuLy9fdGVybVxyXG5leHBvcnQgdHlwZSB7XHJcbiAgSVRlcm1Gb3JtYXQsXHJcbn0gZnJvbSAnLi9fdGVybSc7XHJcblxyXG5leHBvcnQge1xyXG4gIFRlcm0sXHJcbn0gZnJvbSAnLi9fdGVybSc7XHJcblxyXG4vL19FbGFwc2VkVGltZVxyXG5leHBvcnQge1xyXG4gIEVsYXBzZWRUaW1lLFxyXG59IGZyb20gJy4vX0VsYXBzZWRUaW1lJztcclxuXHJcbi8vX29iamVjdHNcclxuZXhwb3J0IHtcclxuICBfZmxhdHRlbixcclxuICBfaGFzUHJvcCxcclxuICBfaGFzUHJvcHMsXHJcbiAgX2hhc0FueVByb3BzLFxyXG59IGZyb20gJy4vX29iamVjdHMnO1xyXG5cclxuLy9fZGVib3VuY2VkXHJcbmV4cG9ydCB7XHJcbiAgX2RlYm91Y2VkLFxyXG59IGZyb20gJy4vX2RlYm91Y2VkJztcclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTMpO1xuIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJjb25zdHJ1Y3RvciIsInN0YXJ0X3RpbWUiLCJEYXRlIiwic3RvcF90aW1lIiwidW5kZWZpbmVkIiwiX21zIiwic3RhcnQiLCJfbm93IiwiX2lzRGF0ZSIsIm5vdyIsInVwZGF0ZVN0YXJ0IiwiX3N0YXJ0IiwiZ2V0VGltZSIsInN0b3AiLCJ0IiwiX3N0b3BfdGltZSIsIl9zdG9wIiwic3RhcnRlZCIsInN0b3BwZWQiLCJtcyIsInBhcnNlSW50Iiwic2VjIiwiZGVjaW1hbFBsYWNlcyIsIl9yb3VuZCIsIm1pbiIsImRhdGEiLCJlbGFwc2VkX21zIiwiX2JhdGNoVmFsdWVzIiwiYXJyYXkiLCJiYXRjaFNpemUiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJFcnJvciIsIl9hcnJheSIsInNsaWNlIiwiX2J1ZmZlciIsImxlbmd0aCIsInB1c2giLCJzcGxpY2UiLCJ2YWx1ZSIsImlzTmFOIiwiX2dldERhdGUiLCJfZGVmYXVsdCIsIl9kYXRldGltZSIsImRhdGUiLCJfcGFkIiwidiIsInBhZFN0YXJ0IiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwiX3RpbWVzdGFtcCIsInRvSVNPU3RyaW5nIiwiX2RlYm91Y2VkIiwiaGFuZGxlciIsImRlbGF5IiwibWF4V2FpdCIsImltbWVkaWF0ZSIsImltbWVkaWF0ZVRpbWVyIiwiY2FsbFRpbWVyIiwid2FpdFRpbWVyIiwibmV4dENhbGwiLCJwYXJzZUZsb2F0IiwiZXhlY3V0ZSIsImlzX2ltbWVkaWF0ZSIsIm5leHQiLCJjbGVhclRpbWVvdXQiLCJhcHBseSIsInNldFRpbWVvdXQiLCJ3cmFwcGVyIiwiYXJncyIsIl9uZXh0Iiwibm9fd2FpdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJuYW1lIiwiX3NheUhlbGxvIiwiaGVsbG8iLCJjb25zb2xlIiwibG9nIiwiX2pzb25TdHJpbmdpZnkiLCJzcGFjZSIsIl91bmRlZmluZWQiLCJfc3BhY2UiLCJwYXJlbnRzIiwicGF0aCIsInJlZnMiLCJNYXAiLCJfcmVwbGFjZXIiLCJrZXkiLCJTdHJpbmciLCJTZXQiLCJpIiwicHJldiIsIl9wYXJlbnRzIiwib3RoZXIiLCJnZXQiLCJzZXQiLCJqb2luIiwiSlNPTiIsInN0cmluZ2lmeSIsImNsZWFyIiwiX2pzb25QYXJzZSIsInBhcnNlIiwiZSIsIl9qc29uQ2xvbmUiLCJ2YWwiLCJfaXNOdW1lcmljIiwiYm9vbGVhbnMiLCJibGFua3MiLCJ0cmltIiwidGVzdCIsIl90b051bSIsIk5hTiIsImZpeEZsb2F0IiwibWF0Y2hlcyIsIm51bSIsInAiLCJtYXRjaCIsInJlcGxhY2UiLCJSZWdFeHAiLCJmbG9hdHMiLCJsZW4iLCJuIiwieCIsInN1YnN0cmluZyIsIl9udW0iLCJfaW50IiwicGxhY2VzIiwiTWF0aCIsImFicyIsInJvdW5kIiwiRVBTSUxPTiIsIl9jb21tYXMiLCJ6ZXJvcyIsIndhcm4iLCJpbmRleE9mIiwicGFkRW5kIiwic3BsaXQiLCJyZWR1Y2UiLCJfcmFuZCIsIm1heCIsImZsb29yIiwicmFuZG9tIiwiX2ZsYXR0ZW4iLCJ2YWx1ZXMiLCJmbGF0IiwiSW5maW5pdHkiLCJfaGFzUHJvcCIsInByb3AiLCJvd24iLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJfaGFzUHJvcHMiLCJwcm9wcyIsImZpbHRlciIsImsiLCJfaGFzQW55UHJvcHMiLCJfYXN5bmNBbGwiLCJjYWxsYmFjayIsIlByb21pc2UiLCJyZXNvbHZlIiwiX2xlbiIsIl9yZXNvbHZlIiwiY291bnQiLCJmb3JFYWNoIiwiYSIsInRoZW4iLCJzdGF0dXMiLCJpbmRleCIsImNhdGNoIiwicmVhc29uIiwiZmluYWxseSIsIl9hc3luY1ZhbHVlcyIsInNpemUiLCJlYWNoIiwic2VsZiIsImNhbmNlbCIsIl9icmVhayIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0aGF0IiwiZG9uZSIsIl9zbGVlcCIsInRpbWVvdXQiLCJfcXVldWUiLCJpdGVtcyIsImhlYWQiLCJ0YWlsIiwiaXNFbXB0eSIsImVucXVldWUiLCJkZXF1ZXVlIiwiaXRlbSIsInBlZWsiLCJfc29ydFZhbHVlcyIsInNvcnQiLCJfY29tcGFyZSIsImIiLCJsb2NhbGVDb21wYXJlIiwiX2RpcmVjdGlvbiIsImluY2x1ZGVzIiwic3RhcnRzV2l0aCIsIl9lbnRyaWVzIiwiZW50cmllcyIsInJlc3VsdCIsIl9tZXRob2QiLCJfdWlkIiwidG9TdHJpbmciLCJidWZmZXIiLCJfc3RyaW5nIiwiX3N0cmluZ2FibGUiLCJmYWlsZWQiLCJfc3RyTm9ybSIsIm5vcm1hbGl6ZSIsIl9zdHIiLCJBcnJheSIsImlzQXJyYXkiLCJ0bXAiLCJfcmVnRXNjYXBlIiwiX3N0ckVzY2FwZSIsIl90cmltIiwicmwiLCJjaGFycyIsInBhdHRlcm4iLCJUZXJtIiwic3RhdGljIiwiZm9ybWF0cyIsIkZNIiwiRk9STUFUUyIsIlBGIiwiUFJFREVGSU5FRF9GT1JNQVRTIiwidG9Mb3dlckNhc2UiLCJfYWRkUEYiLCJfZm9ybWF0cyIsImdldEZvcm1hdHMiLCJfZm9ybWF0IiwiRElTQUJMRUQiLCJmIiwicmVzZXQiLCJfYXJncyIsImZvcm1hdCIsImNvbmNhdCIsIm1hcCIsImRlYnVnIiwiZXJyb3IiLCJpbmZvIiwiX2NsZWFyIiwiX3ZhbCIsInR5cGUiLCJpdGVyYXRvciIsInRtcF9lbnRyaWVzIiwiY2VsbE1heExlbmd0aCIsImRpdmlkZXIiLCJkYXRhX2l0ZW1zIiwiZGF0YV90eXBlIiwibGlzdCIsInN0clZhbCIsImNvbG9yIiwiX3R5cGUiLCJmcm9tRW50cmllcyIsIl92YWx1ZSIsInRleHQiLCJtb2RlIiwidGFibGVfaXRlbXMiLCJtYXBfa2V5cyIsIm1hcF9pdGVtcyIsImRhdGFfaXRlbSIsInIiLCJsaXN0X2l0ZW1zIiwibGlzdF90eXBlIiwibWFwX2l0ZW0iLCJ0YWJsZV9pdGVtIiwid2lkdGhfbWFwIiwic3RyX2l0ZW1zIiwic3RyX2l0ZW0iLCJyb3dzX2xlbiIsIm1heF9saW5lcyIsInN0cl9pdGVtX2xpbmVzIiwid2lkdGgiLCJsaW5lcyIsImxpbmUiLCJjIiwiXyIsImxpbmVfcm93cyIsInJvd3MiLCJsaW5lX3JvdyIsInJvdyIsImJyaWdodCIsImRpbSIsInVuZGVyc2NvcmUiLCJibGluayIsInJldmVyc2UiLCJoaWRkZW4iLCJmZ19ibGFjayIsImZnX3JlZCIsImZnX2dyZWVuIiwiZmdfeWVsbG93IiwiZmdfYmx1ZSIsImZnX21hZ2VudGEiLCJmZ19jeWFuIiwiZmdfd2hpdGUiLCJmZ19ncmF5IiwiYmdfYmxhY2siLCJiZ19yZWQiLCJiZ19ncmVlbiIsImJnX3llbGxvdyIsImJnX2JsdWUiLCJiZ19tYWdlbnRhIiwiYmdfY3lhbiIsImJnX3doaXRlIiwiYmdfZ3JheSIsInN1Y2Nlc3MiLCJiZ19sb2ciLCJiZ19kZWJ1ZyIsImJnX2Vycm9yIiwiYmdfd2FybiIsImJnX2luZm8iLCJiZ19zdWNjZXNzIiwiX3V1aWQiLCJFbGFwc2VkVGltZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iXSwic291cmNlUm9vdCI6IiJ9